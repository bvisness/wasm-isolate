// This file is automatically generated. DO NOT EDIT.
package parser

type OTypes_TypeIdx = OInt32
type OTypes_LocalIdx = OInt32
type OTypes_Name = string

type OTypes_NullKind int

const (
	KTypes_NoNull OTypes_NullKind = iota + 1
	KTypes_Null
)

type OTypes_Null interface {
	Kind() OTypes_NullKind
}

type SimpleOTypes_Null struct {
	kind OTypes_NullKind
}

func (t SimpleOTypes_Null) Kind() OTypes_NullKind {
	return t.kind
}

var _NoNull OTypes_Null = SimpleOTypes_Null{KTypes_NoNull}
var _Null OTypes_Null = SimpleOTypes_Null{KTypes_Null}

type OTypes_MutKind int

const (
	KTypes_Cons OTypes_MutKind = iota + 1
	KTypes_Var
)

type OTypes_Mut interface {
	Kind() OTypes_MutKind
}

type SimpleOTypes_Mut struct {
	kind OTypes_MutKind
}

func (t SimpleOTypes_Mut) Kind() OTypes_MutKind {
	return t.kind
}

var _Cons OTypes_Mut = SimpleOTypes_Mut{KTypes_Cons}
var _Var OTypes_Mut = SimpleOTypes_Mut{KTypes_Var}

type OTypes_InitKind int

const (
	KTypes_Set OTypes_InitKind = iota + 1
	KTypes_Unset
)

type OTypes_Init interface {
	Kind() OTypes_InitKind
}

type SimpleOTypes_Init struct {
	kind OTypes_InitKind
}

func (t SimpleOTypes_Init) Kind() OTypes_InitKind {
	return t.kind
}

var _Set OTypes_Init = SimpleOTypes_Init{KTypes_Set}
var _Unset OTypes_Init = SimpleOTypes_Init{KTypes_Unset}

type OTypes_FinalKind int

const (
	KTypes_NoFinal OTypes_FinalKind = iota + 1
	KTypes_Final
)

type OTypes_Final interface {
	Kind() OTypes_FinalKind
}

type SimpleOTypes_Final struct {
	kind OTypes_FinalKind
}

func (t SimpleOTypes_Final) Kind() OTypes_FinalKind {
	return t.kind
}

var _NoFinal OTypes_Final = SimpleOTypes_Final{KTypes_NoFinal}
var _Final OTypes_Final = SimpleOTypes_Final{KTypes_Final}

type OTypes_Limits struct {
	Min OInt64
	Max *OInt64
}

type OTypes_VarKind int

const (
	KTypes_StatX OTypes_VarKind = iota + 1
	KTypes_RecX
)

type OTypes_Var interface {
	Kind() OTypes_VarKind
}

type SimpleOTypes_Var struct {
	kind OTypes_VarKind
}

func (t SimpleOTypes_Var) Kind() OTypes_VarKind {
	return t.kind
}

type OTypes_Var_StatX struct {
	V OTypes_TypeIdx
}

func (t OTypes_Var_StatX) Kind() OTypes_VarKind {
	return KTypes_StatX
}
func Types_StatX_1(v OTypes_TypeIdx) OTypes_Var {
	return OTypes_Var_StatX{v}
}

type OTypes_Var_RecX struct {
	V OInt32
}

func (t OTypes_Var_RecX) Kind() OTypes_VarKind {
	return KTypes_RecX
}
func Types_RecX_1(v OInt32) OTypes_Var {
	return OTypes_Var_RecX{v}
}

type OTypes_AddrTypeKind int

const (
	KTypes_I32AT OTypes_AddrTypeKind = iota + 1
	KTypes_I64AT
)

type OTypes_AddrType interface {
	Kind() OTypes_AddrTypeKind
}

type SimpleOTypes_AddrType struct {
	kind OTypes_AddrTypeKind
}

func (t SimpleOTypes_AddrType) Kind() OTypes_AddrTypeKind {
	return t.kind
}

var _I32AT OTypes_AddrType = SimpleOTypes_AddrType{KTypes_I32AT}
var _I64AT OTypes_AddrType = SimpleOTypes_AddrType{KTypes_I64AT}

type OTypes_NumTypeKind int

const (
	KTypes_I32T OTypes_NumTypeKind = iota + 1
	KTypes_I64T
	KTypes_F32T
	KTypes_F64T
)

type OTypes_NumType interface {
	Kind() OTypes_NumTypeKind
}

type SimpleOTypes_NumType struct {
	kind OTypes_NumTypeKind
}

func (t SimpleOTypes_NumType) Kind() OTypes_NumTypeKind {
	return t.kind
}

var _I32T OTypes_NumType = SimpleOTypes_NumType{KTypes_I32T}
var _I64T OTypes_NumType = SimpleOTypes_NumType{KTypes_I64T}
var _F32T OTypes_NumType = SimpleOTypes_NumType{KTypes_F32T}
var _F64T OTypes_NumType = SimpleOTypes_NumType{KTypes_F64T}

type OTypes_VecTypeKind int

const (
	KTypes_V128T OTypes_VecTypeKind = iota + 1
)

type OTypes_VecType interface {
	Kind() OTypes_VecTypeKind
}

type SimpleOTypes_VecType struct {
	kind OTypes_VecTypeKind
}

func (t SimpleOTypes_VecType) Kind() OTypes_VecTypeKind {
	return t.kind
}

var _V128T OTypes_VecType = SimpleOTypes_VecType{KTypes_V128T}

type OTypes_HeapTypeKind int

const (
	KTypes_AnyHT OTypes_HeapTypeKind = iota + 1
	KTypes_NoneHT
	KTypes_EqHT
	KTypes_I31HT
	KTypes_StructHT
	KTypes_ArrayHT
	KTypes_FuncHT
	KTypes_NoFuncHT
	KTypes_ExnHT
	KTypes_NoExnHT
	KTypes_ExternHT
	KTypes_NoExternHT
	KTypes_VarHT
	KTypes_DefHT
	KTypes_BotHT
)

type OTypes_HeapType interface {
	Kind() OTypes_HeapTypeKind
}

type SimpleOTypes_HeapType struct {
	kind OTypes_HeapTypeKind
}

func (t SimpleOTypes_HeapType) Kind() OTypes_HeapTypeKind {
	return t.kind
}

var _AnyHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_AnyHT}
var _NoneHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_NoneHT}
var _EqHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_EqHT}
var _I31HT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_I31HT}
var _StructHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_StructHT}
var _ArrayHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_ArrayHT}
var _FuncHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_FuncHT}
var _NoFuncHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_NoFuncHT}
var _ExnHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_ExnHT}
var _NoExnHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_NoExnHT}
var _ExternHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_ExternHT}
var _NoExternHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_NoExternHT}

type OTypes_HeapType_VarHT struct {
	V OTypes_Var
}

func (t OTypes_HeapType_VarHT) Kind() OTypes_HeapTypeKind {
	return KTypes_VarHT
}
func Types_VarHT_1(v OTypes_Var) OTypes_HeapType {
	return OTypes_HeapType_VarHT{v}
}

type OTypes_HeapType_DefHT struct {
	V OTypes_DefType
}

func (t OTypes_HeapType_DefHT) Kind() OTypes_HeapTypeKind {
	return KTypes_DefHT
}
func Types_DefHT_1(v OTypes_DefType) OTypes_HeapType {
	return OTypes_HeapType_DefHT{v}
}

var _BotHT OTypes_HeapType = SimpleOTypes_HeapType{KTypes_BotHT}

type OTypes_RefType = struct {
	F0 OTypes_Null
	F1 OTypes_HeapType
}

type OTypes_ValTypeKind int

const (
	KTypes_NumT OTypes_ValTypeKind = iota + 1
	KTypes_VecT
	KTypes_RefT
	KTypes_BotT
)

type OTypes_ValType interface {
	Kind() OTypes_ValTypeKind
}

type SimpleOTypes_ValType struct {
	kind OTypes_ValTypeKind
}

func (t SimpleOTypes_ValType) Kind() OTypes_ValTypeKind {
	return t.kind
}

type OTypes_ValType_NumT struct {
	V OTypes_NumType
}

func (t OTypes_ValType_NumT) Kind() OTypes_ValTypeKind {
	return KTypes_NumT
}
func Types_NumT_1(v OTypes_NumType) OTypes_ValType {
	return OTypes_ValType_NumT{v}
}

type OTypes_ValType_VecT struct {
	V OTypes_VecType
}

func (t OTypes_ValType_VecT) Kind() OTypes_ValTypeKind {
	return KTypes_VecT
}
func Types_VecT_1(v OTypes_VecType) OTypes_ValType {
	return OTypes_ValType_VecT{v}
}

type OTypes_ValType_RefT struct {
	V OTypes_RefType
}

func (t OTypes_ValType_RefT) Kind() OTypes_ValTypeKind {
	return KTypes_RefT
}
func Types_RefT_1(v OTypes_RefType) OTypes_ValType {
	return OTypes_ValType_RefT{v}
}

var _BotT OTypes_ValType = SimpleOTypes_ValType{KTypes_BotT}

type OTypes_ResultType = []OTypes_ValType

type OTypes_InstrTypeKind int

const (
	KTypes_InstrT OTypes_InstrTypeKind = iota + 1
)

type OTypes_InstrType interface {
	Kind() OTypes_InstrTypeKind
}

type SimpleOTypes_InstrType struct {
	kind OTypes_InstrTypeKind
}

func (t SimpleOTypes_InstrType) Kind() OTypes_InstrTypeKind {
	return t.kind
}

type OTypes_InstrType_InstrT struct {
	V struct {
		F0 OTypes_ResultType
		F1 OTypes_ResultType
		F2 []OTypes_LocalIdx
	}
}

func (t OTypes_InstrType_InstrT) Kind() OTypes_InstrTypeKind {
	return KTypes_InstrT
}
func Types_InstrT_1(v struct {
	F0 OTypes_ResultType
	F1 OTypes_ResultType
	F2 []OTypes_LocalIdx
}) OTypes_InstrType {
	return OTypes_InstrType_InstrT{v}
}

type OTypes_StorageTypeKind int

const (
	KTypes_ValStorageT OTypes_StorageTypeKind = iota + 1
	KTypes_PackStorageT
)

type OTypes_StorageType interface {
	Kind() OTypes_StorageTypeKind
}

type SimpleOTypes_StorageType struct {
	kind OTypes_StorageTypeKind
}

func (t SimpleOTypes_StorageType) Kind() OTypes_StorageTypeKind {
	return t.kind
}

type OTypes_StorageType_ValStorageT struct {
	V OTypes_ValType
}

func (t OTypes_StorageType_ValStorageT) Kind() OTypes_StorageTypeKind {
	return KTypes_ValStorageT
}
func Types_ValStorageT_1(v OTypes_ValType) OTypes_StorageType {
	return OTypes_StorageType_ValStorageT{v}
}

type OTypes_StorageType_PackStorageT struct {
	V OPack_PackSize
}

func (t OTypes_StorageType_PackStorageT) Kind() OTypes_StorageTypeKind {
	return KTypes_PackStorageT
}
func Types_PackStorageT_1(v OPack_PackSize) OTypes_StorageType {
	return OTypes_StorageType_PackStorageT{v}
}

type OTypes_FieldTypeKind int

const (
	KTypes_FieldT OTypes_FieldTypeKind = iota + 1
)

type OTypes_FieldType interface {
	Kind() OTypes_FieldTypeKind
}

type SimpleOTypes_FieldType struct {
	kind OTypes_FieldTypeKind
}

func (t SimpleOTypes_FieldType) Kind() OTypes_FieldTypeKind {
	return t.kind
}

type OTypes_FieldType_FieldT struct {
	V struct {
		F0 OTypes_Mut
		F1 OTypes_StorageType
	}
}

func (t OTypes_FieldType_FieldT) Kind() OTypes_FieldTypeKind {
	return KTypes_FieldT
}
func Types_FieldT_1(v struct {
	F0 OTypes_Mut
	F1 OTypes_StorageType
}) OTypes_FieldType {
	return OTypes_FieldType_FieldT{v}
}

type OTypes_StructTypeKind int

const (
	KTypes_StructT OTypes_StructTypeKind = iota + 1
)

type OTypes_StructType interface {
	Kind() OTypes_StructTypeKind
}

type SimpleOTypes_StructType struct {
	kind OTypes_StructTypeKind
}

func (t SimpleOTypes_StructType) Kind() OTypes_StructTypeKind {
	return t.kind
}

type OTypes_StructType_StructT struct {
	V []OTypes_FieldType
}

func (t OTypes_StructType_StructT) Kind() OTypes_StructTypeKind {
	return KTypes_StructT
}
func Types_StructT_1(v []OTypes_FieldType) OTypes_StructType {
	return OTypes_StructType_StructT{v}
}

type OTypes_ArrayTypeKind int

const (
	KTypes_ArrayT OTypes_ArrayTypeKind = iota + 1
)

type OTypes_ArrayType interface {
	Kind() OTypes_ArrayTypeKind
}

type SimpleOTypes_ArrayType struct {
	kind OTypes_ArrayTypeKind
}

func (t SimpleOTypes_ArrayType) Kind() OTypes_ArrayTypeKind {
	return t.kind
}

type OTypes_ArrayType_ArrayT struct {
	V OTypes_FieldType
}

func (t OTypes_ArrayType_ArrayT) Kind() OTypes_ArrayTypeKind {
	return KTypes_ArrayT
}
func Types_ArrayT_1(v OTypes_FieldType) OTypes_ArrayType {
	return OTypes_ArrayType_ArrayT{v}
}

type OTypes_FuncTypeKind int

const (
	KTypes_FuncT OTypes_FuncTypeKind = iota + 1
)

type OTypes_FuncType interface {
	Kind() OTypes_FuncTypeKind
}

type SimpleOTypes_FuncType struct {
	kind OTypes_FuncTypeKind
}

func (t SimpleOTypes_FuncType) Kind() OTypes_FuncTypeKind {
	return t.kind
}

type OTypes_FuncType_FuncT struct {
	V struct {
		F0 OTypes_ResultType
		F1 OTypes_ResultType
	}
}

func (t OTypes_FuncType_FuncT) Kind() OTypes_FuncTypeKind {
	return KTypes_FuncT
}
func Types_FuncT_1(v struct {
	F0 OTypes_ResultType
	F1 OTypes_ResultType
}) OTypes_FuncType {
	return OTypes_FuncType_FuncT{v}
}

type OTypes_StrTypeKind int

const (
	KTypes_DefStructT OTypes_StrTypeKind = iota + 1
	KTypes_DefArrayT
	KTypes_DefFuncT
)

type OTypes_StrType interface {
	Kind() OTypes_StrTypeKind
}

type SimpleOTypes_StrType struct {
	kind OTypes_StrTypeKind
}

func (t SimpleOTypes_StrType) Kind() OTypes_StrTypeKind {
	return t.kind
}

type OTypes_StrType_DefStructT struct {
	V OTypes_StructType
}

func (t OTypes_StrType_DefStructT) Kind() OTypes_StrTypeKind {
	return KTypes_DefStructT
}
func Types_DefStructT_1(v OTypes_StructType) OTypes_StrType {
	return OTypes_StrType_DefStructT{v}
}

type OTypes_StrType_DefArrayT struct {
	V OTypes_ArrayType
}

func (t OTypes_StrType_DefArrayT) Kind() OTypes_StrTypeKind {
	return KTypes_DefArrayT
}
func Types_DefArrayT_1(v OTypes_ArrayType) OTypes_StrType {
	return OTypes_StrType_DefArrayT{v}
}

type OTypes_StrType_DefFuncT struct {
	V OTypes_FuncType
}

func (t OTypes_StrType_DefFuncT) Kind() OTypes_StrTypeKind {
	return KTypes_DefFuncT
}
func Types_DefFuncT_1(v OTypes_FuncType) OTypes_StrType {
	return OTypes_StrType_DefFuncT{v}
}

type OTypes_SubTypeKind int

const (
	KTypes_SubT OTypes_SubTypeKind = iota + 1
)

type OTypes_SubType interface {
	Kind() OTypes_SubTypeKind
}

type SimpleOTypes_SubType struct {
	kind OTypes_SubTypeKind
}

func (t SimpleOTypes_SubType) Kind() OTypes_SubTypeKind {
	return t.kind
}

type OTypes_SubType_SubT struct {
	V struct {
		F0 OTypes_Final
		F1 []OTypes_HeapType
		F2 OTypes_StrType
	}
}

func (t OTypes_SubType_SubT) Kind() OTypes_SubTypeKind {
	return KTypes_SubT
}
func Types_SubT_1(v struct {
	F0 OTypes_Final
	F1 []OTypes_HeapType
	F2 OTypes_StrType
}) OTypes_SubType {
	return OTypes_SubType_SubT{v}
}

type OTypes_RecTypeKind int

const (
	KTypes_RecT OTypes_RecTypeKind = iota + 1
)

type OTypes_RecType interface {
	Kind() OTypes_RecTypeKind
}

type SimpleOTypes_RecType struct {
	kind OTypes_RecTypeKind
}

func (t SimpleOTypes_RecType) Kind() OTypes_RecTypeKind {
	return t.kind
}

type OTypes_RecType_RecT struct {
	V []OTypes_SubType
}

func (t OTypes_RecType_RecT) Kind() OTypes_RecTypeKind {
	return KTypes_RecT
}
func Types_RecT_1(v []OTypes_SubType) OTypes_RecType {
	return OTypes_RecType_RecT{v}
}

type OTypes_DefTypeKind int

const (
	KTypes_DefT OTypes_DefTypeKind = iota + 1
)

type OTypes_DefType interface {
	Kind() OTypes_DefTypeKind
}

type SimpleOTypes_DefType struct {
	kind OTypes_DefTypeKind
}

func (t SimpleOTypes_DefType) Kind() OTypes_DefTypeKind {
	return t.kind
}

type OTypes_DefType_DefT struct {
	V struct {
		F0 OTypes_RecType
		F1 OInt32
	}
}

func (t OTypes_DefType_DefT) Kind() OTypes_DefTypeKind {
	return KTypes_DefT
}
func Types_DefT_1(v struct {
	F0 OTypes_RecType
	F1 OInt32
}) OTypes_DefType {
	return OTypes_DefType_DefT{v}
}

type OTypes_TableTypeKind int

const (
	KTypes_TableT OTypes_TableTypeKind = iota + 1
)

type OTypes_TableType interface {
	Kind() OTypes_TableTypeKind
}

type SimpleOTypes_TableType struct {
	kind OTypes_TableTypeKind
}

func (t SimpleOTypes_TableType) Kind() OTypes_TableTypeKind {
	return t.kind
}

type OTypes_TableType_TableT struct {
	V struct {
		F0 OTypes_AddrType
		F1 OTypes_Limits
		F2 OTypes_RefType
	}
}

func (t OTypes_TableType_TableT) Kind() OTypes_TableTypeKind {
	return KTypes_TableT
}
func Types_TableT_1(v struct {
	F0 OTypes_AddrType
	F1 OTypes_Limits
	F2 OTypes_RefType
}) OTypes_TableType {
	return OTypes_TableType_TableT{v}
}

type OTypes_MemoryTypeKind int

const (
	KTypes_MemoryT OTypes_MemoryTypeKind = iota + 1
)

type OTypes_MemoryType interface {
	Kind() OTypes_MemoryTypeKind
}

type SimpleOTypes_MemoryType struct {
	kind OTypes_MemoryTypeKind
}

func (t SimpleOTypes_MemoryType) Kind() OTypes_MemoryTypeKind {
	return t.kind
}

type OTypes_MemoryType_MemoryT struct {
	V struct {
		F0 OTypes_AddrType
		F1 OTypes_Limits
	}
}

func (t OTypes_MemoryType_MemoryT) Kind() OTypes_MemoryTypeKind {
	return KTypes_MemoryT
}
func Types_MemoryT_1(v struct {
	F0 OTypes_AddrType
	F1 OTypes_Limits
}) OTypes_MemoryType {
	return OTypes_MemoryType_MemoryT{v}
}

type OTypes_GlobalTypeKind int

const (
	KTypes_GlobalT OTypes_GlobalTypeKind = iota + 1
)

type OTypes_GlobalType interface {
	Kind() OTypes_GlobalTypeKind
}

type SimpleOTypes_GlobalType struct {
	kind OTypes_GlobalTypeKind
}

func (t SimpleOTypes_GlobalType) Kind() OTypes_GlobalTypeKind {
	return t.kind
}

type OTypes_GlobalType_GlobalT struct {
	V struct {
		F0 OTypes_Mut
		F1 OTypes_ValType
	}
}

func (t OTypes_GlobalType_GlobalT) Kind() OTypes_GlobalTypeKind {
	return KTypes_GlobalT
}
func Types_GlobalT_1(v struct {
	F0 OTypes_Mut
	F1 OTypes_ValType
}) OTypes_GlobalType {
	return OTypes_GlobalType_GlobalT{v}
}

type OTypes_TagTypeKind int

const (
	KTypes_TagT OTypes_TagTypeKind = iota + 1
)

type OTypes_TagType interface {
	Kind() OTypes_TagTypeKind
}

type SimpleOTypes_TagType struct {
	kind OTypes_TagTypeKind
}

func (t SimpleOTypes_TagType) Kind() OTypes_TagTypeKind {
	return t.kind
}

type OTypes_TagType_TagT struct {
	V OTypes_DefType
}

func (t OTypes_TagType_TagT) Kind() OTypes_TagTypeKind {
	return KTypes_TagT
}
func Types_TagT_1(v OTypes_DefType) OTypes_TagType {
	return OTypes_TagType_TagT{v}
}

type OTypes_LocalTypeKind int

const (
	KTypes_LocalT OTypes_LocalTypeKind = iota + 1
)

type OTypes_LocalType interface {
	Kind() OTypes_LocalTypeKind
}

type SimpleOTypes_LocalType struct {
	kind OTypes_LocalTypeKind
}

func (t SimpleOTypes_LocalType) Kind() OTypes_LocalTypeKind {
	return t.kind
}

type OTypes_LocalType_LocalT struct {
	V struct {
		F0 OTypes_Init
		F1 OTypes_ValType
	}
}

func (t OTypes_LocalType_LocalT) Kind() OTypes_LocalTypeKind {
	return KTypes_LocalT
}
func Types_LocalT_1(v struct {
	F0 OTypes_Init
	F1 OTypes_ValType
}) OTypes_LocalType {
	return OTypes_LocalType_LocalT{v}
}

type OTypes_ExternTypeKind int

const (
	KTypes_ExternFuncT OTypes_ExternTypeKind = iota + 1
	KTypes_ExternTableT
	KTypes_ExternMemoryT
	KTypes_ExternGlobalT
	KTypes_ExternTagT
)

type OTypes_ExternType interface {
	Kind() OTypes_ExternTypeKind
}

type SimpleOTypes_ExternType struct {
	kind OTypes_ExternTypeKind
}

func (t SimpleOTypes_ExternType) Kind() OTypes_ExternTypeKind {
	return t.kind
}

type OTypes_ExternType_ExternFuncT struct {
	V OTypes_DefType
}

func (t OTypes_ExternType_ExternFuncT) Kind() OTypes_ExternTypeKind {
	return KTypes_ExternFuncT
}
func Types_ExternFuncT_1(v OTypes_DefType) OTypes_ExternType {
	return OTypes_ExternType_ExternFuncT{v}
}

type OTypes_ExternType_ExternTableT struct {
	V OTypes_TableType
}

func (t OTypes_ExternType_ExternTableT) Kind() OTypes_ExternTypeKind {
	return KTypes_ExternTableT
}
func Types_ExternTableT_1(v OTypes_TableType) OTypes_ExternType {
	return OTypes_ExternType_ExternTableT{v}
}

type OTypes_ExternType_ExternMemoryT struct {
	V OTypes_MemoryType
}

func (t OTypes_ExternType_ExternMemoryT) Kind() OTypes_ExternTypeKind {
	return KTypes_ExternMemoryT
}
func Types_ExternMemoryT_1(v OTypes_MemoryType) OTypes_ExternType {
	return OTypes_ExternType_ExternMemoryT{v}
}

type OTypes_ExternType_ExternGlobalT struct {
	V OTypes_GlobalType
}

func (t OTypes_ExternType_ExternGlobalT) Kind() OTypes_ExternTypeKind {
	return KTypes_ExternGlobalT
}
func Types_ExternGlobalT_1(v OTypes_GlobalType) OTypes_ExternType {
	return OTypes_ExternType_ExternGlobalT{v}
}

type OTypes_ExternType_ExternTagT struct {
	V OTypes_TagType
}

func (t OTypes_ExternType_ExternTagT) Kind() OTypes_ExternTypeKind {
	return KTypes_ExternTagT
}
func Types_ExternTagT_1(v OTypes_TagType) OTypes_ExternType {
	return OTypes_ExternType_ExternTagT{v}
}

type OTypes_ExportTypeKind int

const (
	KTypes_ExportT OTypes_ExportTypeKind = iota + 1
)

type OTypes_ExportType interface {
	Kind() OTypes_ExportTypeKind
}

type SimpleOTypes_ExportType struct {
	kind OTypes_ExportTypeKind
}

func (t SimpleOTypes_ExportType) Kind() OTypes_ExportTypeKind {
	return t.kind
}

type OTypes_ExportType_ExportT struct {
	V struct {
		F0 OTypes_ExternType
		F1 OTypes_Name
	}
}

func (t OTypes_ExportType_ExportT) Kind() OTypes_ExportTypeKind {
	return KTypes_ExportT
}
func Types_ExportT_1(v struct {
	F0 OTypes_ExternType
	F1 OTypes_Name
}) OTypes_ExportType {
	return OTypes_ExportType_ExportT{v}
}

type OTypes_ImportTypeKind int

const (
	KTypes_ImportT OTypes_ImportTypeKind = iota + 1
)

type OTypes_ImportType interface {
	Kind() OTypes_ImportTypeKind
}

type SimpleOTypes_ImportType struct {
	kind OTypes_ImportTypeKind
}

func (t SimpleOTypes_ImportType) Kind() OTypes_ImportTypeKind {
	return t.kind
}

type OTypes_ImportType_ImportT struct {
	V struct {
		F0 OTypes_ExternType
		F1 OTypes_Name
		F2 OTypes_Name
	}
}

func (t OTypes_ImportType_ImportT) Kind() OTypes_ImportTypeKind {
	return KTypes_ImportT
}
func Types_ImportT_1(v struct {
	F0 OTypes_ExternType
	F1 OTypes_Name
	F2 OTypes_Name
}) OTypes_ImportType {
	return OTypes_ImportType_ImportT{v}
}

type OTypes_ModuleTypeKind int

const (
	KTypes_ModuleT OTypes_ModuleTypeKind = iota + 1
)

type OTypes_ModuleType interface {
	Kind() OTypes_ModuleTypeKind
}

type SimpleOTypes_ModuleType struct {
	kind OTypes_ModuleTypeKind
}

func (t SimpleOTypes_ModuleType) Kind() OTypes_ModuleTypeKind {
	return t.kind
}

type OTypes_ModuleType_ModuleT struct {
	V struct {
		F0 []OTypes_ImportType
		F1 []OTypes_ExportType
	}
}

func (t OTypes_ModuleType_ModuleT) Kind() OTypes_ModuleTypeKind {
	return KTypes_ModuleT
}
func Types_ModuleT_1(v struct {
	F0 []OTypes_ImportType
	F1 []OTypes_ExportType
}) OTypes_ModuleType {
	return OTypes_ModuleType_ModuleT{v}
}

type OTypes_Subst = func(OTypes_Var) OTypes_HeapType

type OPack_PackSizeKind int

const (
	KPack_Pack8 OPack_PackSizeKind = iota + 1
	KPack_Pack16
	KPack_Pack32
	KPack_Pack64
)

type OPack_PackSize interface {
	Kind() OPack_PackSizeKind
}

type SimpleOPack_PackSize struct {
	kind OPack_PackSizeKind
}

func (t SimpleOPack_PackSize) Kind() OPack_PackSizeKind {
	return t.kind
}

var _Pack8 OPack_PackSize = SimpleOPack_PackSize{KPack_Pack8}
var _Pack16 OPack_PackSize = SimpleOPack_PackSize{KPack_Pack16}
var _Pack32 OPack_PackSize = SimpleOPack_PackSize{KPack_Pack32}
var _Pack64 OPack_PackSize = SimpleOPack_PackSize{KPack_Pack64}

type OPack_ExtensionKind int

const (
	KPack_SX OPack_ExtensionKind = iota + 1
	KPack_ZX
)

type OPack_Extension interface {
	Kind() OPack_ExtensionKind
}

type SimpleOPack_Extension struct {
	kind OPack_ExtensionKind
}

func (t SimpleOPack_Extension) Kind() OPack_ExtensionKind {
	return t.kind
}

var _SX OPack_Extension = SimpleOPack_Extension{KPack_SX}
var _ZX OPack_Extension = SimpleOPack_Extension{KPack_ZX}

type OPack_PackShapeKind int

const (
	KPack_Pack8x8 OPack_PackShapeKind = iota + 1
	KPack_Pack16x4
	KPack_Pack32x2
)

type OPack_PackShape interface {
	Kind() OPack_PackShapeKind
}

type SimpleOPack_PackShape struct {
	kind OPack_PackShapeKind
}

func (t SimpleOPack_PackShape) Kind() OPack_PackShapeKind {
	return t.kind
}

var _Pack8x8 OPack_PackShape = SimpleOPack_PackShape{KPack_Pack8x8}
var _Pack16x4 OPack_PackShape = SimpleOPack_PackShape{KPack_Pack16x4}
var _Pack32x2 OPack_PackShape = SimpleOPack_PackShape{KPack_Pack32x2}

type OPack_VecExtensionKind int

const (
	KPack_ExtLane OPack_VecExtensionKind = iota + 1
	KPack_ExtSplat
	KPack_ExtZero
)

type OPack_VecExtension interface {
	Kind() OPack_VecExtensionKind
}

type SimpleOPack_VecExtension struct {
	kind OPack_VecExtensionKind
}

func (t SimpleOPack_VecExtension) Kind() OPack_VecExtensionKind {
	return t.kind
}

type OPack_VecExtension_ExtLane struct {
	V struct {
		F0 OPack_PackShape
		F1 OPack_Extension
	}
}

func (t OPack_VecExtension_ExtLane) Kind() OPack_VecExtensionKind {
	return KPack_ExtLane
}
func Pack_ExtLane_1(v struct {
	F0 OPack_PackShape
	F1 OPack_Extension
}) OPack_VecExtension {
	return OPack_VecExtension_ExtLane{v}
}

var _ExtSplat OPack_VecExtension = SimpleOPack_VecExtension{KPack_ExtSplat}
var _ExtZero OPack_VecExtension = SimpleOPack_VecExtension{KPack_ExtZero}

type OSource_Pos struct {
	File   string
	Line   OInt
	Column OInt
}
type OSource_Region struct {
	Left  OSource_Pos
	Right OSource_Pos
}

var _no_pos = nil             /* TODO: record_expression */
var _no_region = nil          /* TODO: record_expression */
type OAst_Testop = TODO       /* I32Op.testop I64Op.testop (kind 3) */
type OAst_Unop = TODO         /* I32Op.unop I64Op.unop (kind 3) */
type OAst_Binop = TODO        /* I32Op.binop I64Op.binop (kind 3) */
type OAst_Relop = TODO        /* I32Op.relop I64Op.relop (kind 3) */
type OAst_Cvtop = TODO        /* I32Op.cvtop I64Op.cvtop (kind 3) */
type OAst_VecTestop = TODO    /* Ast.testop Value.vecop (kind 3) */
type OAst_VecRelop = TODO     /* Ast.relop Value.vecop (kind 3) */
type OAst_VecUnop = TODO      /* Ast.unop Value.vecop (kind 3) */
type OAst_VecBinop = TODO     /* Ast.binop Value.vecop (kind 3) */
type OAst_VecTernop = TODO    /* V128Op.ternop Value.vecop (kind 3) */
type OAst_VecCvtop = TODO     /* Ast.cvtop Value.vecop (kind 3) */
type OAst_VecShiftop = TODO   /* V128Op.shiftop Value.vecop (kind 3) */
type OAst_VecBitmaskop = TODO /* V128Op.bitmaskop Value.vecop (kind 3) */
type OAst_VecVtestop = TODO   /* V128Op.vtestop Value.vecop (kind 3) */
type OAst_VecVunop = TODO     /* V128Op.vunop Value.vecop (kind 3) */
type OAst_VecVbinop = TODO    /* V128Op.vbinop Value.vecop (kind 3) */
type OAst_VecVternop = TODO   /* V128Op.vternop Value.vecop (kind 3) */
type OAst_VecSplatop = TODO   /* V128Op.splatop Value.vecop (kind 3) */
type OAst_VecExtractop = TODO /* V128Op.extractop Value.vecop (kind 3) */
type OAst_VecReplaceop = TODO /* V128Op.replaceop Value.vecop (kind 3) */
type OAst_Memop = OUnknownTypeVariableP
type OAst_Loadop = TODO     /* Types.num_type Pack.pack_size * Pack.extension option (kind 3) */
type OAst_Storeop = TODO    /* Types.num_type Pack.pack_size option (kind 3) */
type OAst_VecLoadop = TODO  /* Types.vec_type Pack.pack_size * Pack.vec_extension option (kind 3) */
type OAst_VecStoreop = TODO /* Types.vec_type Ast.unit (kind 3) */
type OAst_VecLaneop = TODO  /* Types.vec_type Pack.pack_size (kind 3) */

type OAst_InitopKind int

const (
	KAst_Explicit OAst_InitopKind = iota + 1
	KAst_Implicit
)

type OAst_Initop interface {
	Kind() OAst_InitopKind
}

type SimpleOAst_Initop struct {
	kind OAst_InitopKind
}

func (t SimpleOAst_Initop) Kind() OAst_InitopKind {
	return t.kind
}

var _Explicit OAst_Initop = SimpleOAst_Initop{KAst_Explicit}
var _Implicit OAst_Initop = SimpleOAst_Initop{KAst_Implicit}

type OAst_ExternopKind int

const (
	KAst_Internalize OAst_ExternopKind = iota + 1
	KAst_Externalize
)

type OAst_Externop interface {
	Kind() OAst_ExternopKind
}

type SimpleOAst_Externop struct {
	kind OAst_ExternopKind
}

func (t SimpleOAst_Externop) Kind() OAst_ExternopKind {
	return t.kind
}

var _Internalize OAst_Externop = SimpleOAst_Externop{KAst_Internalize}
var _Externalize OAst_Externop = SimpleOAst_Externop{KAst_Externalize}

type OAst_Idx = *OSource_Phrase[OInt32]
type OAst_Num = *OSource_Phrase[OValue_Num]
type OAst_Vec = *OSource_Phrase[OValue_Vec]
type OAst_Name = string

type OAst_BlockTypeKind int

const (
	KAst_VarBlockType OAst_BlockTypeKind = iota + 1
	KAst_ValBlockType
)

type OAst_BlockType interface {
	Kind() OAst_BlockTypeKind
}

type SimpleOAst_BlockType struct {
	kind OAst_BlockTypeKind
}

func (t SimpleOAst_BlockType) Kind() OAst_BlockTypeKind {
	return t.kind
}

type OAst_BlockType_VarBlockType struct {
	V OAst_Idx
}

func (t OAst_BlockType_VarBlockType) Kind() OAst_BlockTypeKind {
	return KAst_VarBlockType
}
func Ast_VarBlockType_1(v OAst_Idx) OAst_BlockType {
	return OAst_BlockType_VarBlockType{v}
}

type OAst_BlockType_ValBlockType struct {
	V *OTypes_ValType
}

func (t OAst_BlockType_ValBlockType) Kind() OAst_BlockTypeKind {
	return KAst_ValBlockType
}
func Ast_ValBlockType_1(v *OTypes_ValType) OAst_BlockType {
	return OAst_BlockType_ValBlockType{v}
}

type OAst_Instr = *OSource_Phrase[OAst_Instr_]

type OAst_Instr_Kind int

const (
	KAst_Unreachable OAst_Instr_Kind = iota + 1
	KAst_Nop
	KAst_Drop
	KAst_Select
	KAst_Block
	KAst_Loop
	KAst_If
	KAst_Br
	KAst_BrIf
	KAst_BrTable
	KAst_BrOnNull
	KAst_BrOnNonNull
	KAst_BrOnCast
	KAst_BrOnCastFail
	KAst_Return
	KAst_Call
	KAst_CallRef
	KAst_CallIndirect
	KAst_ReturnCall
	KAst_ReturnCallRef
	KAst_ReturnCallIndirect
	KAst_Throw
	KAst_ThrowRef
	KAst_TryTable
	KAst_LocalGet
	KAst_LocalSet
	KAst_LocalTee
	KAst_GlobalGet
	KAst_GlobalSet
	KAst_TableGet
	KAst_TableSet
	KAst_TableSize
	KAst_TableGrow
	KAst_TableFill
	KAst_TableCopy
	KAst_TableInit
	KAst_ElemDrop
	KAst_Load
	KAst_Store
	KAst_VecLoad
	KAst_VecStore
	KAst_VecLoadLane
	KAst_VecStoreLane
	KAst_MemorySize
	KAst_MemoryGrow
	KAst_MemoryFill
	KAst_MemoryCopy
	KAst_MemoryInit
	KAst_DataDrop
	KAst_Const
	KAst_Test
	KAst_Compare
	KAst_Unary
	KAst_Binary
	KAst_Convert
	KAst_RefNull
	KAst_RefFunc
	KAst_RefIsNull
	KAst_RefAsNonNull
	KAst_RefTest
	KAst_RefCast
	KAst_RefEq
	KAst_RefI31
	KAst_I31Get
	KAst_StructNew
	KAst_StructGet
	KAst_StructSet
	KAst_ArrayNew
	KAst_ArrayNewFixed
	KAst_ArrayNewElem
	KAst_ArrayNewData
	KAst_ArrayGet
	KAst_ArraySet
	KAst_ArrayLen
	KAst_ArrayCopy
	KAst_ArrayFill
	KAst_ArrayInitData
	KAst_ArrayInitElem
	KAst_ExternConvert
	KAst_VecConst
	KAst_VecTest
	KAst_VecCompare
	KAst_VecUnary
	KAst_VecBinary
	KAst_VecTernary
	KAst_VecConvert
	KAst_VecShift
	KAst_VecBitmask
	KAst_VecTestBits
	KAst_VecUnaryBits
	KAst_VecBinaryBits
	KAst_VecTernaryBits
	KAst_VecSplat
	KAst_VecExtract
	KAst_VecReplace
)

type OAst_Instr_ interface {
	Kind() OAst_Instr_Kind
}

type SimpleOAst_Instr_ struct {
	kind OAst_Instr_Kind
}

func (t SimpleOAst_Instr_) Kind() OAst_Instr_Kind {
	return t.kind
}

var _Unreachable OAst_Instr_ = SimpleOAst_Instr_{KAst_Unreachable}
var _Nop OAst_Instr_ = SimpleOAst_Instr_{KAst_Nop}
var _Drop OAst_Instr_ = SimpleOAst_Instr_{KAst_Drop}

type OAst_Instr__Select struct {
	V *[]OTypes_ValType
}

func (t OAst_Instr__Select) Kind() OAst_Instr_Kind {
	return KAst_Select
}
func Ast_Select_1(v *[]OTypes_ValType) OAst_Instr_ {
	return OAst_Instr__Select{v}
}

type OAst_Instr__Block struct {
	V struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
	}
}

func (t OAst_Instr__Block) Kind() OAst_Instr_Kind {
	return KAst_Block
}
func Ast_Block_1(v struct {
	F0 OAst_BlockType
	F1 []OAst_Instr
}) OAst_Instr_ {
	return OAst_Instr__Block{v}
}

type OAst_Instr__Loop struct {
	V struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
	}
}

func (t OAst_Instr__Loop) Kind() OAst_Instr_Kind {
	return KAst_Loop
}
func Ast_Loop_1(v struct {
	F0 OAst_BlockType
	F1 []OAst_Instr
}) OAst_Instr_ {
	return OAst_Instr__Loop{v}
}

type OAst_Instr__If struct {
	V struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
		F2 []OAst_Instr
	}
}

func (t OAst_Instr__If) Kind() OAst_Instr_Kind {
	return KAst_If
}
func Ast_If_1(v struct {
	F0 OAst_BlockType
	F1 []OAst_Instr
	F2 []OAst_Instr
}) OAst_Instr_ {
	return OAst_Instr__If{v}
}

type OAst_Instr__Br struct {
	V OAst_Idx
}

func (t OAst_Instr__Br) Kind() OAst_Instr_Kind {
	return KAst_Br
}
func Ast_Br_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__Br{v}
}

type OAst_Instr__BrIf struct {
	V OAst_Idx
}

func (t OAst_Instr__BrIf) Kind() OAst_Instr_Kind {
	return KAst_BrIf
}
func Ast_BrIf_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__BrIf{v}
}

type OAst_Instr__BrTable struct {
	V struct {
		F0 []OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__BrTable) Kind() OAst_Instr_Kind {
	return KAst_BrTable
}
func Ast_BrTable_1(v struct {
	F0 []OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__BrTable{v}
}

type OAst_Instr__BrOnNull struct {
	V OAst_Idx
}

func (t OAst_Instr__BrOnNull) Kind() OAst_Instr_Kind {
	return KAst_BrOnNull
}
func Ast_BrOnNull_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__BrOnNull{v}
}

type OAst_Instr__BrOnNonNull struct {
	V OAst_Idx
}

func (t OAst_Instr__BrOnNonNull) Kind() OAst_Instr_Kind {
	return KAst_BrOnNonNull
}
func Ast_BrOnNonNull_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__BrOnNonNull{v}
}

type OAst_Instr__BrOnCast struct {
	V struct {
		F0 OAst_Idx
		F1 OTypes_RefType
		F2 OTypes_RefType
	}
}

func (t OAst_Instr__BrOnCast) Kind() OAst_Instr_Kind {
	return KAst_BrOnCast
}
func Ast_BrOnCast_1(v struct {
	F0 OAst_Idx
	F1 OTypes_RefType
	F2 OTypes_RefType
}) OAst_Instr_ {
	return OAst_Instr__BrOnCast{v}
}

type OAst_Instr__BrOnCastFail struct {
	V struct {
		F0 OAst_Idx
		F1 OTypes_RefType
		F2 OTypes_RefType
	}
}

func (t OAst_Instr__BrOnCastFail) Kind() OAst_Instr_Kind {
	return KAst_BrOnCastFail
}
func Ast_BrOnCastFail_1(v struct {
	F0 OAst_Idx
	F1 OTypes_RefType
	F2 OTypes_RefType
}) OAst_Instr_ {
	return OAst_Instr__BrOnCastFail{v}
}

var _Return OAst_Instr_ = SimpleOAst_Instr_{KAst_Return}

type OAst_Instr__Call struct {
	V OAst_Idx
}

func (t OAst_Instr__Call) Kind() OAst_Instr_Kind {
	return KAst_Call
}
func Ast_Call_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__Call{v}
}

type OAst_Instr__CallRef struct {
	V OAst_Idx
}

func (t OAst_Instr__CallRef) Kind() OAst_Instr_Kind {
	return KAst_CallRef
}
func Ast_CallRef_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__CallRef{v}
}

type OAst_Instr__CallIndirect struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__CallIndirect) Kind() OAst_Instr_Kind {
	return KAst_CallIndirect
}
func Ast_CallIndirect_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__CallIndirect{v}
}

type OAst_Instr__ReturnCall struct {
	V OAst_Idx
}

func (t OAst_Instr__ReturnCall) Kind() OAst_Instr_Kind {
	return KAst_ReturnCall
}
func Ast_ReturnCall_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__ReturnCall{v}
}

type OAst_Instr__ReturnCallRef struct {
	V OAst_Idx
}

func (t OAst_Instr__ReturnCallRef) Kind() OAst_Instr_Kind {
	return KAst_ReturnCallRef
}
func Ast_ReturnCallRef_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__ReturnCallRef{v}
}

type OAst_Instr__ReturnCallIndirect struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ReturnCallIndirect) Kind() OAst_Instr_Kind {
	return KAst_ReturnCallIndirect
}
func Ast_ReturnCallIndirect_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ReturnCallIndirect{v}
}

type OAst_Instr__Throw struct {
	V OAst_Idx
}

func (t OAst_Instr__Throw) Kind() OAst_Instr_Kind {
	return KAst_Throw
}
func Ast_Throw_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__Throw{v}
}

var _ThrowRef OAst_Instr_ = SimpleOAst_Instr_{KAst_ThrowRef}

type OAst_Instr__TryTable struct {
	V struct {
		F0 OAst_BlockType
		F1 []OAst_Catch
		F2 []OAst_Instr
	}
}

func (t OAst_Instr__TryTable) Kind() OAst_Instr_Kind {
	return KAst_TryTable
}
func Ast_TryTable_1(v struct {
	F0 OAst_BlockType
	F1 []OAst_Catch
	F2 []OAst_Instr
}) OAst_Instr_ {
	return OAst_Instr__TryTable{v}
}

type OAst_Instr__LocalGet struct {
	V OAst_Idx
}

func (t OAst_Instr__LocalGet) Kind() OAst_Instr_Kind {
	return KAst_LocalGet
}
func Ast_LocalGet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__LocalGet{v}
}

type OAst_Instr__LocalSet struct {
	V OAst_Idx
}

func (t OAst_Instr__LocalSet) Kind() OAst_Instr_Kind {
	return KAst_LocalSet
}
func Ast_LocalSet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__LocalSet{v}
}

type OAst_Instr__LocalTee struct {
	V OAst_Idx
}

func (t OAst_Instr__LocalTee) Kind() OAst_Instr_Kind {
	return KAst_LocalTee
}
func Ast_LocalTee_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__LocalTee{v}
}

type OAst_Instr__GlobalGet struct {
	V OAst_Idx
}

func (t OAst_Instr__GlobalGet) Kind() OAst_Instr_Kind {
	return KAst_GlobalGet
}
func Ast_GlobalGet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__GlobalGet{v}
}

type OAst_Instr__GlobalSet struct {
	V OAst_Idx
}

func (t OAst_Instr__GlobalSet) Kind() OAst_Instr_Kind {
	return KAst_GlobalSet
}
func Ast_GlobalSet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__GlobalSet{v}
}

type OAst_Instr__TableGet struct {
	V OAst_Idx
}

func (t OAst_Instr__TableGet) Kind() OAst_Instr_Kind {
	return KAst_TableGet
}
func Ast_TableGet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__TableGet{v}
}

type OAst_Instr__TableSet struct {
	V OAst_Idx
}

func (t OAst_Instr__TableSet) Kind() OAst_Instr_Kind {
	return KAst_TableSet
}
func Ast_TableSet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__TableSet{v}
}

type OAst_Instr__TableSize struct {
	V OAst_Idx
}

func (t OAst_Instr__TableSize) Kind() OAst_Instr_Kind {
	return KAst_TableSize
}
func Ast_TableSize_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__TableSize{v}
}

type OAst_Instr__TableGrow struct {
	V OAst_Idx
}

func (t OAst_Instr__TableGrow) Kind() OAst_Instr_Kind {
	return KAst_TableGrow
}
func Ast_TableGrow_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__TableGrow{v}
}

type OAst_Instr__TableFill struct {
	V OAst_Idx
}

func (t OAst_Instr__TableFill) Kind() OAst_Instr_Kind {
	return KAst_TableFill
}
func Ast_TableFill_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__TableFill{v}
}

type OAst_Instr__TableCopy struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__TableCopy) Kind() OAst_Instr_Kind {
	return KAst_TableCopy
}
func Ast_TableCopy_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__TableCopy{v}
}

type OAst_Instr__TableInit struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__TableInit) Kind() OAst_Instr_Kind {
	return KAst_TableInit
}
func Ast_TableInit_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__TableInit{v}
}

type OAst_Instr__ElemDrop struct {
	V OAst_Idx
}

func (t OAst_Instr__ElemDrop) Kind() OAst_Instr_Kind {
	return KAst_ElemDrop
}
func Ast_ElemDrop_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__ElemDrop{v}
}

type OAst_Instr__Load struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}
}

func (t OAst_Instr__Load) Kind() OAst_Instr_Kind {
	return KAst_Load
}
func Ast_Load_1(v struct {
	F0 OAst_Idx
	F1 OAst_Loadop
}) OAst_Instr_ {
	return OAst_Instr__Load{v}
}

type OAst_Instr__Store struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}
}

func (t OAst_Instr__Store) Kind() OAst_Instr_Kind {
	return KAst_Store
}
func Ast_Store_1(v struct {
	F0 OAst_Idx
	F1 OAst_Storeop
}) OAst_Instr_ {
	return OAst_Instr__Store{v}
}

type OAst_Instr__VecLoad struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}
}

func (t OAst_Instr__VecLoad) Kind() OAst_Instr_Kind {
	return KAst_VecLoad
}
func Ast_VecLoad_1(v struct {
	F0 OAst_Idx
	F1 OAst_VecLoadop
}) OAst_Instr_ {
	return OAst_Instr__VecLoad{v}
}

type OAst_Instr__VecStore struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_VecStoreop
	}
}

func (t OAst_Instr__VecStore) Kind() OAst_Instr_Kind {
	return KAst_VecStore
}
func Ast_VecStore_1(v struct {
	F0 OAst_Idx
	F1 OAst_VecStoreop
}) OAst_Instr_ {
	return OAst_Instr__VecStore{v}
}

type OAst_Instr__VecLoadLane struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}
}

func (t OAst_Instr__VecLoadLane) Kind() OAst_Instr_Kind {
	return KAst_VecLoadLane
}
func Ast_VecLoadLane_1(v struct {
	F0 OAst_Idx
	F1 OAst_VecLaneop
	F2 OInt
}) OAst_Instr_ {
	return OAst_Instr__VecLoadLane{v}
}

type OAst_Instr__VecStoreLane struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}
}

func (t OAst_Instr__VecStoreLane) Kind() OAst_Instr_Kind {
	return KAst_VecStoreLane
}
func Ast_VecStoreLane_1(v struct {
	F0 OAst_Idx
	F1 OAst_VecLaneop
	F2 OInt
}) OAst_Instr_ {
	return OAst_Instr__VecStoreLane{v}
}

type OAst_Instr__MemorySize struct {
	V OAst_Idx
}

func (t OAst_Instr__MemorySize) Kind() OAst_Instr_Kind {
	return KAst_MemorySize
}
func Ast_MemorySize_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__MemorySize{v}
}

type OAst_Instr__MemoryGrow struct {
	V OAst_Idx
}

func (t OAst_Instr__MemoryGrow) Kind() OAst_Instr_Kind {
	return KAst_MemoryGrow
}
func Ast_MemoryGrow_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__MemoryGrow{v}
}

type OAst_Instr__MemoryFill struct {
	V OAst_Idx
}

func (t OAst_Instr__MemoryFill) Kind() OAst_Instr_Kind {
	return KAst_MemoryFill
}
func Ast_MemoryFill_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__MemoryFill{v}
}

type OAst_Instr__MemoryCopy struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__MemoryCopy) Kind() OAst_Instr_Kind {
	return KAst_MemoryCopy
}
func Ast_MemoryCopy_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__MemoryCopy{v}
}

type OAst_Instr__MemoryInit struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__MemoryInit) Kind() OAst_Instr_Kind {
	return KAst_MemoryInit
}
func Ast_MemoryInit_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__MemoryInit{v}
}

type OAst_Instr__DataDrop struct {
	V OAst_Idx
}

func (t OAst_Instr__DataDrop) Kind() OAst_Instr_Kind {
	return KAst_DataDrop
}
func Ast_DataDrop_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__DataDrop{v}
}

type OAst_Instr__Const struct {
	V OAst_Num
}

func (t OAst_Instr__Const) Kind() OAst_Instr_Kind {
	return KAst_Const
}
func Ast_Const_1(v OAst_Num) OAst_Instr_ {
	return OAst_Instr__Const{v}
}

type OAst_Instr__Test struct {
	V OAst_Testop
}

func (t OAst_Instr__Test) Kind() OAst_Instr_Kind {
	return KAst_Test
}
func Ast_Test_1(v OAst_Testop) OAst_Instr_ {
	return OAst_Instr__Test{v}
}

type OAst_Instr__Compare struct {
	V OAst_Relop
}

func (t OAst_Instr__Compare) Kind() OAst_Instr_Kind {
	return KAst_Compare
}
func Ast_Compare_1(v OAst_Relop) OAst_Instr_ {
	return OAst_Instr__Compare{v}
}

type OAst_Instr__Unary struct {
	V OAst_Unop
}

func (t OAst_Instr__Unary) Kind() OAst_Instr_Kind {
	return KAst_Unary
}
func Ast_Unary_1(v OAst_Unop) OAst_Instr_ {
	return OAst_Instr__Unary{v}
}

type OAst_Instr__Binary struct {
	V OAst_Binop
}

func (t OAst_Instr__Binary) Kind() OAst_Instr_Kind {
	return KAst_Binary
}
func Ast_Binary_1(v OAst_Binop) OAst_Instr_ {
	return OAst_Instr__Binary{v}
}

type OAst_Instr__Convert struct {
	V OAst_Cvtop
}

func (t OAst_Instr__Convert) Kind() OAst_Instr_Kind {
	return KAst_Convert
}
func Ast_Convert_1(v OAst_Cvtop) OAst_Instr_ {
	return OAst_Instr__Convert{v}
}

type OAst_Instr__RefNull struct {
	V OTypes_HeapType
}

func (t OAst_Instr__RefNull) Kind() OAst_Instr_Kind {
	return KAst_RefNull
}
func Ast_RefNull_1(v OTypes_HeapType) OAst_Instr_ {
	return OAst_Instr__RefNull{v}
}

type OAst_Instr__RefFunc struct {
	V OAst_Idx
}

func (t OAst_Instr__RefFunc) Kind() OAst_Instr_Kind {
	return KAst_RefFunc
}
func Ast_RefFunc_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__RefFunc{v}
}

var _RefIsNull OAst_Instr_ = SimpleOAst_Instr_{KAst_RefIsNull}
var _RefAsNonNull OAst_Instr_ = SimpleOAst_Instr_{KAst_RefAsNonNull}

type OAst_Instr__RefTest struct {
	V OTypes_RefType
}

func (t OAst_Instr__RefTest) Kind() OAst_Instr_Kind {
	return KAst_RefTest
}
func Ast_RefTest_1(v OTypes_RefType) OAst_Instr_ {
	return OAst_Instr__RefTest{v}
}

type OAst_Instr__RefCast struct {
	V OTypes_RefType
}

func (t OAst_Instr__RefCast) Kind() OAst_Instr_Kind {
	return KAst_RefCast
}
func Ast_RefCast_1(v OTypes_RefType) OAst_Instr_ {
	return OAst_Instr__RefCast{v}
}

var _RefEq OAst_Instr_ = SimpleOAst_Instr_{KAst_RefEq}
var _RefI31 OAst_Instr_ = SimpleOAst_Instr_{KAst_RefI31}

type OAst_Instr__I31Get struct {
	V OPack_Extension
}

func (t OAst_Instr__I31Get) Kind() OAst_Instr_Kind {
	return KAst_I31Get
}
func Ast_I31Get_1(v OPack_Extension) OAst_Instr_ {
	return OAst_Instr__I31Get{v}
}

type OAst_Instr__StructNew struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}
}

func (t OAst_Instr__StructNew) Kind() OAst_Instr_Kind {
	return KAst_StructNew
}
func Ast_StructNew_1(v struct {
	F0 OAst_Idx
	F1 OAst_Initop
}) OAst_Instr_ {
	return OAst_Instr__StructNew{v}
}

type OAst_Instr__StructGet struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
		F2 *OPack_Extension
	}
}

func (t OAst_Instr__StructGet) Kind() OAst_Instr_Kind {
	return KAst_StructGet
}
func Ast_StructGet_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
	F2 *OPack_Extension
}) OAst_Instr_ {
	return OAst_Instr__StructGet{v}
}

type OAst_Instr__StructSet struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__StructSet) Kind() OAst_Instr_Kind {
	return KAst_StructSet
}
func Ast_StructSet_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__StructSet{v}
}

type OAst_Instr__ArrayNew struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}
}

func (t OAst_Instr__ArrayNew) Kind() OAst_Instr_Kind {
	return KAst_ArrayNew
}
func Ast_ArrayNew_1(v struct {
	F0 OAst_Idx
	F1 OAst_Initop
}) OAst_Instr_ {
	return OAst_Instr__ArrayNew{v}
}

type OAst_Instr__ArrayNewFixed struct {
	V struct {
		F0 OAst_Idx
		F1 OInt32
	}
}

func (t OAst_Instr__ArrayNewFixed) Kind() OAst_Instr_Kind {
	return KAst_ArrayNewFixed
}
func Ast_ArrayNewFixed_1(v struct {
	F0 OAst_Idx
	F1 OInt32
}) OAst_Instr_ {
	return OAst_Instr__ArrayNewFixed{v}
}

type OAst_Instr__ArrayNewElem struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ArrayNewElem) Kind() OAst_Instr_Kind {
	return KAst_ArrayNewElem
}
func Ast_ArrayNewElem_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ArrayNewElem{v}
}

type OAst_Instr__ArrayNewData struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ArrayNewData) Kind() OAst_Instr_Kind {
	return KAst_ArrayNewData
}
func Ast_ArrayNewData_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ArrayNewData{v}
}

type OAst_Instr__ArrayGet struct {
	V struct {
		F0 OAst_Idx
		F1 *OPack_Extension
	}
}

func (t OAst_Instr__ArrayGet) Kind() OAst_Instr_Kind {
	return KAst_ArrayGet
}
func Ast_ArrayGet_1(v struct {
	F0 OAst_Idx
	F1 *OPack_Extension
}) OAst_Instr_ {
	return OAst_Instr__ArrayGet{v}
}

type OAst_Instr__ArraySet struct {
	V OAst_Idx
}

func (t OAst_Instr__ArraySet) Kind() OAst_Instr_Kind {
	return KAst_ArraySet
}
func Ast_ArraySet_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__ArraySet{v}
}

var _ArrayLen OAst_Instr_ = SimpleOAst_Instr_{KAst_ArrayLen}

type OAst_Instr__ArrayCopy struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ArrayCopy) Kind() OAst_Instr_Kind {
	return KAst_ArrayCopy
}
func Ast_ArrayCopy_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ArrayCopy{v}
}

type OAst_Instr__ArrayFill struct {
	V OAst_Idx
}

func (t OAst_Instr__ArrayFill) Kind() OAst_Instr_Kind {
	return KAst_ArrayFill
}
func Ast_ArrayFill_1(v OAst_Idx) OAst_Instr_ {
	return OAst_Instr__ArrayFill{v}
}

type OAst_Instr__ArrayInitData struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ArrayInitData) Kind() OAst_Instr_Kind {
	return KAst_ArrayInitData
}
func Ast_ArrayInitData_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ArrayInitData{v}
}

type OAst_Instr__ArrayInitElem struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Instr__ArrayInitElem) Kind() OAst_Instr_Kind {
	return KAst_ArrayInitElem
}
func Ast_ArrayInitElem_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Instr_ {
	return OAst_Instr__ArrayInitElem{v}
}

type OAst_Instr__ExternConvert struct {
	V OAst_Externop
}

func (t OAst_Instr__ExternConvert) Kind() OAst_Instr_Kind {
	return KAst_ExternConvert
}
func Ast_ExternConvert_1(v OAst_Externop) OAst_Instr_ {
	return OAst_Instr__ExternConvert{v}
}

type OAst_Instr__VecConst struct {
	V OAst_Vec
}

func (t OAst_Instr__VecConst) Kind() OAst_Instr_Kind {
	return KAst_VecConst
}
func Ast_VecConst_1(v OAst_Vec) OAst_Instr_ {
	return OAst_Instr__VecConst{v}
}

type OAst_Instr__VecTest struct {
	V OAst_VecTestop
}

func (t OAst_Instr__VecTest) Kind() OAst_Instr_Kind {
	return KAst_VecTest
}
func Ast_VecTest_1(v OAst_VecTestop) OAst_Instr_ {
	return OAst_Instr__VecTest{v}
}

type OAst_Instr__VecCompare struct {
	V OAst_VecRelop
}

func (t OAst_Instr__VecCompare) Kind() OAst_Instr_Kind {
	return KAst_VecCompare
}
func Ast_VecCompare_1(v OAst_VecRelop) OAst_Instr_ {
	return OAst_Instr__VecCompare{v}
}

type OAst_Instr__VecUnary struct {
	V OAst_VecUnop
}

func (t OAst_Instr__VecUnary) Kind() OAst_Instr_Kind {
	return KAst_VecUnary
}
func Ast_VecUnary_1(v OAst_VecUnop) OAst_Instr_ {
	return OAst_Instr__VecUnary{v}
}

type OAst_Instr__VecBinary struct {
	V OAst_VecBinop
}

func (t OAst_Instr__VecBinary) Kind() OAst_Instr_Kind {
	return KAst_VecBinary
}
func Ast_VecBinary_1(v OAst_VecBinop) OAst_Instr_ {
	return OAst_Instr__VecBinary{v}
}

type OAst_Instr__VecTernary struct {
	V OAst_VecTernop
}

func (t OAst_Instr__VecTernary) Kind() OAst_Instr_Kind {
	return KAst_VecTernary
}
func Ast_VecTernary_1(v OAst_VecTernop) OAst_Instr_ {
	return OAst_Instr__VecTernary{v}
}

type OAst_Instr__VecConvert struct {
	V OAst_VecCvtop
}

func (t OAst_Instr__VecConvert) Kind() OAst_Instr_Kind {
	return KAst_VecConvert
}
func Ast_VecConvert_1(v OAst_VecCvtop) OAst_Instr_ {
	return OAst_Instr__VecConvert{v}
}

type OAst_Instr__VecShift struct {
	V OAst_VecShiftop
}

func (t OAst_Instr__VecShift) Kind() OAst_Instr_Kind {
	return KAst_VecShift
}
func Ast_VecShift_1(v OAst_VecShiftop) OAst_Instr_ {
	return OAst_Instr__VecShift{v}
}

type OAst_Instr__VecBitmask struct {
	V OAst_VecBitmaskop
}

func (t OAst_Instr__VecBitmask) Kind() OAst_Instr_Kind {
	return KAst_VecBitmask
}
func Ast_VecBitmask_1(v OAst_VecBitmaskop) OAst_Instr_ {
	return OAst_Instr__VecBitmask{v}
}

type OAst_Instr__VecTestBits struct {
	V OAst_VecVtestop
}

func (t OAst_Instr__VecTestBits) Kind() OAst_Instr_Kind {
	return KAst_VecTestBits
}
func Ast_VecTestBits_1(v OAst_VecVtestop) OAst_Instr_ {
	return OAst_Instr__VecTestBits{v}
}

type OAst_Instr__VecUnaryBits struct {
	V OAst_VecVunop
}

func (t OAst_Instr__VecUnaryBits) Kind() OAst_Instr_Kind {
	return KAst_VecUnaryBits
}
func Ast_VecUnaryBits_1(v OAst_VecVunop) OAst_Instr_ {
	return OAst_Instr__VecUnaryBits{v}
}

type OAst_Instr__VecBinaryBits struct {
	V OAst_VecVbinop
}

func (t OAst_Instr__VecBinaryBits) Kind() OAst_Instr_Kind {
	return KAst_VecBinaryBits
}
func Ast_VecBinaryBits_1(v OAst_VecVbinop) OAst_Instr_ {
	return OAst_Instr__VecBinaryBits{v}
}

type OAst_Instr__VecTernaryBits struct {
	V OAst_VecVternop
}

func (t OAst_Instr__VecTernaryBits) Kind() OAst_Instr_Kind {
	return KAst_VecTernaryBits
}
func Ast_VecTernaryBits_1(v OAst_VecVternop) OAst_Instr_ {
	return OAst_Instr__VecTernaryBits{v}
}

type OAst_Instr__VecSplat struct {
	V OAst_VecSplatop
}

func (t OAst_Instr__VecSplat) Kind() OAst_Instr_Kind {
	return KAst_VecSplat
}
func Ast_VecSplat_1(v OAst_VecSplatop) OAst_Instr_ {
	return OAst_Instr__VecSplat{v}
}

type OAst_Instr__VecExtract struct {
	V OAst_VecExtractop
}

func (t OAst_Instr__VecExtract) Kind() OAst_Instr_Kind {
	return KAst_VecExtract
}
func Ast_VecExtract_1(v OAst_VecExtractop) OAst_Instr_ {
	return OAst_Instr__VecExtract{v}
}

type OAst_Instr__VecReplace struct {
	V OAst_VecReplaceop
}

func (t OAst_Instr__VecReplace) Kind() OAst_Instr_Kind {
	return KAst_VecReplace
}
func Ast_VecReplace_1(v OAst_VecReplaceop) OAst_Instr_ {
	return OAst_Instr__VecReplace{v}
}

type OAst_Catch = *OSource_Phrase[OAst_Catch_]

type OAst_Catch_Kind int

const (
	KAst_Catch OAst_Catch_Kind = iota + 1
	KAst_CatchRef
	KAst_CatchAll
	KAst_CatchAllRef
)

type OAst_Catch_ interface {
	Kind() OAst_Catch_Kind
}

type SimpleOAst_Catch_ struct {
	kind OAst_Catch_Kind
}

func (t SimpleOAst_Catch_) Kind() OAst_Catch_Kind {
	return t.kind
}

type OAst_Catch__Catch struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Catch__Catch) Kind() OAst_Catch_Kind {
	return KAst_Catch
}
func Ast_Catch_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Catch_ {
	return OAst_Catch__Catch{v}
}

type OAst_Catch__CatchRef struct {
	V struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}
}

func (t OAst_Catch__CatchRef) Kind() OAst_Catch_Kind {
	return KAst_CatchRef
}
func Ast_CatchRef_1(v struct {
	F0 OAst_Idx
	F1 OAst_Idx
}) OAst_Catch_ {
	return OAst_Catch__CatchRef{v}
}

type OAst_Catch__CatchAll struct {
	V OAst_Idx
}

func (t OAst_Catch__CatchAll) Kind() OAst_Catch_Kind {
	return KAst_CatchAll
}
func Ast_CatchAll_1(v OAst_Idx) OAst_Catch_ {
	return OAst_Catch__CatchAll{v}
}

type OAst_Catch__CatchAllRef struct {
	V OAst_Idx
}

func (t OAst_Catch__CatchAllRef) Kind() OAst_Catch_Kind {
	return KAst_CatchAllRef
}
func Ast_CatchAllRef_1(v OAst_Idx) OAst_Catch_ {
	return OAst_Catch__CatchAllRef{v}
}

type OAst_Const = *OSource_Phrase[[]OAst_Instr]
type OAst_Local = *OSource_Phrase[OAst_Local_]
type OAst_Local_ struct {
	Ltype OTypes_ValType
}
type OAst_Global = *OSource_Phrase[OAst_Global_]
type OAst_Global_ struct {
	Gtype OTypes_GlobalType
	Ginit OAst_Const
}
type OAst_Func = *OSource_Phrase[OAst_Func_]
type OAst_Func_ struct {
	Ftype  OAst_Idx
	Locals []OAst_Local
	Body   []OAst_Instr
}
type OAst_Table = *OSource_Phrase[OAst_Table_]
type OAst_Table_ struct {
	Ttype OTypes_TableType
	Tinit OAst_Const
}
type OAst_Memory = *OSource_Phrase[OAst_Memory_]
type OAst_Memory_ struct {
	Mtype OTypes_MemoryType
}
type OAst_Tag = *OSource_Phrase[OAst_Tag_]
type OAst_Tag_ struct {
	Tgtype OAst_Idx
}
type OAst_SegmentMode = *OSource_Phrase[OAst_SegmentMode_]

type OAst_SegmentMode_Kind int

const (
	KAst_Passive OAst_SegmentMode_Kind = iota + 1
	KAst_Active
	KAst_Declarative
)

type OAst_SegmentMode_ interface {
	Kind() OAst_SegmentMode_Kind
}

type SimpleOAst_SegmentMode_ struct {
	kind OAst_SegmentMode_Kind
}

func (t SimpleOAst_SegmentMode_) Kind() OAst_SegmentMode_Kind {
	return t.kind
}

var _Passive OAst_SegmentMode_ = SimpleOAst_SegmentMode_{KAst_Passive}

type OAst_SegmentMode__Active struct {
	V struct {
		Index  OAst_Idx
		Offset OAst_Const
	}
}

func (t OAst_SegmentMode__Active) Kind() OAst_SegmentMode_Kind {
	return KAst_Active
}
func Ast_Active_1(v struct {
	Index  OAst_Idx
	Offset OAst_Const
}) OAst_SegmentMode_ {
	return OAst_SegmentMode__Active{v}
}

var _Declarative OAst_SegmentMode_ = SimpleOAst_SegmentMode_{KAst_Declarative}

type OAst_ElemSegment = *OSource_Phrase[OAst_ElemSegment_]
type OAst_ElemSegment_ struct {
	Etype OTypes_RefType
	Einit []OAst_Const
	Emode OAst_SegmentMode
}
type OAst_DataSegment = *OSource_Phrase[OAst_DataSegment_]
type OAst_DataSegment_ struct {
	Dinit string
	Dmode OAst_SegmentMode
}
type OAst_Type = *OSource_Phrase[OTypes_RecType]
type OAst_ExportDesc = *OSource_Phrase[OAst_ExportDesc_]

type OAst_ExportDesc_Kind int

const (
	KAst_FuncExport OAst_ExportDesc_Kind = iota + 1
	KAst_TableExport
	KAst_MemoryExport
	KAst_GlobalExport
	KAst_TagExport
)

type OAst_ExportDesc_ interface {
	Kind() OAst_ExportDesc_Kind
}

type SimpleOAst_ExportDesc_ struct {
	kind OAst_ExportDesc_Kind
}

func (t SimpleOAst_ExportDesc_) Kind() OAst_ExportDesc_Kind {
	return t.kind
}

type OAst_ExportDesc__FuncExport struct {
	V OAst_Idx
}

func (t OAst_ExportDesc__FuncExport) Kind() OAst_ExportDesc_Kind {
	return KAst_FuncExport
}
func Ast_FuncExport_1(v OAst_Idx) OAst_ExportDesc_ {
	return OAst_ExportDesc__FuncExport{v}
}

type OAst_ExportDesc__TableExport struct {
	V OAst_Idx
}

func (t OAst_ExportDesc__TableExport) Kind() OAst_ExportDesc_Kind {
	return KAst_TableExport
}
func Ast_TableExport_1(v OAst_Idx) OAst_ExportDesc_ {
	return OAst_ExportDesc__TableExport{v}
}

type OAst_ExportDesc__MemoryExport struct {
	V OAst_Idx
}

func (t OAst_ExportDesc__MemoryExport) Kind() OAst_ExportDesc_Kind {
	return KAst_MemoryExport
}
func Ast_MemoryExport_1(v OAst_Idx) OAst_ExportDesc_ {
	return OAst_ExportDesc__MemoryExport{v}
}

type OAst_ExportDesc__GlobalExport struct {
	V OAst_Idx
}

func (t OAst_ExportDesc__GlobalExport) Kind() OAst_ExportDesc_Kind {
	return KAst_GlobalExport
}
func Ast_GlobalExport_1(v OAst_Idx) OAst_ExportDesc_ {
	return OAst_ExportDesc__GlobalExport{v}
}

type OAst_ExportDesc__TagExport struct {
	V OAst_Idx
}

func (t OAst_ExportDesc__TagExport) Kind() OAst_ExportDesc_Kind {
	return KAst_TagExport
}
func Ast_TagExport_1(v OAst_Idx) OAst_ExportDesc_ {
	return OAst_ExportDesc__TagExport{v}
}

type OAst_Export = *OSource_Phrase[OAst_Export_]
type OAst_Export_ struct {
	Name  OAst_Name
	Edesc OAst_ExportDesc
}
type OAst_ImportDesc = *OSource_Phrase[OAst_ImportDesc_]

type OAst_ImportDesc_Kind int

const (
	KAst_FuncImport OAst_ImportDesc_Kind = iota + 1
	KAst_TableImport
	KAst_MemoryImport
	KAst_GlobalImport
	KAst_TagImport
)

type OAst_ImportDesc_ interface {
	Kind() OAst_ImportDesc_Kind
}

type SimpleOAst_ImportDesc_ struct {
	kind OAst_ImportDesc_Kind
}

func (t SimpleOAst_ImportDesc_) Kind() OAst_ImportDesc_Kind {
	return t.kind
}

type OAst_ImportDesc__FuncImport struct {
	V OAst_Idx
}

func (t OAst_ImportDesc__FuncImport) Kind() OAst_ImportDesc_Kind {
	return KAst_FuncImport
}
func Ast_FuncImport_1(v OAst_Idx) OAst_ImportDesc_ {
	return OAst_ImportDesc__FuncImport{v}
}

type OAst_ImportDesc__TableImport struct {
	V OTypes_TableType
}

func (t OAst_ImportDesc__TableImport) Kind() OAst_ImportDesc_Kind {
	return KAst_TableImport
}
func Ast_TableImport_1(v OTypes_TableType) OAst_ImportDesc_ {
	return OAst_ImportDesc__TableImport{v}
}

type OAst_ImportDesc__MemoryImport struct {
	V OTypes_MemoryType
}

func (t OAst_ImportDesc__MemoryImport) Kind() OAst_ImportDesc_Kind {
	return KAst_MemoryImport
}
func Ast_MemoryImport_1(v OTypes_MemoryType) OAst_ImportDesc_ {
	return OAst_ImportDesc__MemoryImport{v}
}

type OAst_ImportDesc__GlobalImport struct {
	V OTypes_GlobalType
}

func (t OAst_ImportDesc__GlobalImport) Kind() OAst_ImportDesc_Kind {
	return KAst_GlobalImport
}
func Ast_GlobalImport_1(v OTypes_GlobalType) OAst_ImportDesc_ {
	return OAst_ImportDesc__GlobalImport{v}
}

type OAst_ImportDesc__TagImport struct {
	V OAst_Idx
}

func (t OAst_ImportDesc__TagImport) Kind() OAst_ImportDesc_Kind {
	return KAst_TagImport
}
func Ast_TagImport_1(v OAst_Idx) OAst_ImportDesc_ {
	return OAst_ImportDesc__TagImport{v}
}

type OAst_Import = *OSource_Phrase[OAst_Import_]
type OAst_Import_ struct {
	ModuleName OAst_Name
	ItemName   OAst_Name
	Idesc      OAst_ImportDesc
}
type OAst_Start = *OSource_Phrase[OAst_Start_]
type OAst_Start_ struct {
	Sfunc OAst_Idx
}
type OAst_Module = *OSource_Phrase[OAst_Module_]
type OAst_Module_ struct {
	Types    []OAst_Type
	Globals  []OAst_Global
	Tables   []OAst_Table
	Memories []OAst_Memory
	Tags     []OAst_Tag
	Funcs    []OAst_Func
	Start    *OAst_Start
	Elems    []OAst_ElemSegment
	Datas    []OAst_DataSegment
	Imports  []OAst_Import
	Exports  []OAst_Export
}

var _empty_module = nil /* TODO: record_expression */
func Operators_I32Const_1(_n TODO /* Types.type_idx Operators.phrase (kind 3) */) OAst_Instr_ {
	__tmp1 := Operators_Const_1(_operatorAtAt_2(Operators_I32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_I32Const = Operators_I32Const_1

func Operators_I64Const_1(_n TODO /* Operators.address Operators.phrase (kind 3) */) OAst_Instr_ {
	__tmp1 := Operators_Const_1(_operatorAtAt_2(Operators_I64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_I64Const = Operators_I64Const_1

func Operators_F32Const_1(_n TODO /* Operators.F32.t Operators.phrase (kind 3) */) OAst_Instr_ {
	__tmp1 := Operators_Const_1(_operatorAtAt_2(Operators_F32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_F32Const = Operators_F32Const_1

func Operators_F64Const_1(_n TODO /* Operators.F64.t Operators.phrase (kind 3) */) OAst_Instr_ {
	__tmp1 := Operators_Const_1(_operatorAtAt_2(Operators_F64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_F64Const = Operators_F64Const_1

func Operators_V128Const_1(_n TODO /* Operators.V128.t Operators.phrase (kind 3) */) OAst_Instr_ {
	__tmp1 := Operators_VecConst_1(_operatorAtAt_2(Operators_V128_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_V128Const = Operators_V128Const_1

func Operators_RefNull_1(_t OTypes_HeapType) OAst_Instr_ {
	__tmp1 := Operators_RefNull_1(_t)
	return __tmp1
}

var Operators_RefNull = Operators_RefNull_1

func Operators_RefFunc_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_RefFunc_1(_x)
	return __tmp1
}

var Operators_RefFunc = Operators_RefFunc_1

func Operators_AtConst_0() func(OTypes_AddrType) func(TODO /* Operators.address Operators.phrase (kind 3) */) OAst_Instr_ {
	TODO /* unknown expression type function_expression */
}

var Operators_AtConst = Operators_AtConst_0

var _unreachable = _Unreachable
var _nop = _Nop
var _drop = _Drop

func Operators_Select_1(_t *[]OTypes_ValType) OAst_Instr_ {
	__tmp1 := Operators_Select_1(_t)
	return __tmp1
}

var Operators_Select = Operators_Select_1

func Operators_Block_2(_bt OAst_BlockType, _es []OAst_Instr) OAst_Instr_ {
	__tmp1 := Operators_Block_1(struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
	}{_bt, _es})
	return __tmp1
}

func Block_1(_bt OAst_BlockType) func(_es []OAst_Instr) OAst_Instr_ {
	return func(_es []OAst_Instr) OAst_Instr_ {
		return Operators_Block_2(_bt, _es)
	}
}

var Operators_Block = Operators_Block_2

func Operators_Loop_2(_bt OAst_BlockType, _es []OAst_Instr) OAst_Instr_ {
	__tmp1 := Operators_Loop_1(struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
	}{_bt, _es})
	return __tmp1
}

func Loop_1(_bt OAst_BlockType) func(_es []OAst_Instr) OAst_Instr_ {
	return func(_es []OAst_Instr) OAst_Instr_ {
		return Operators_Loop_2(_bt, _es)
	}
}

var Operators_Loop = Operators_Loop_2

func Operators_If_3(_bt OAst_BlockType, _es1 []OAst_Instr, _es2 []OAst_Instr) OAst_Instr_ {
	__tmp1 := Operators_If_1(struct {
		F0 OAst_BlockType
		F1 []OAst_Instr
		F2 []OAst_Instr
	}{_bt, _es1, _es2})
	return __tmp1
}

func If_2(_bt OAst_BlockType, _es1 []OAst_Instr) func(_es2 []OAst_Instr) OAst_Instr_ {
	return func(_es2 []OAst_Instr) OAst_Instr_ {
		return Operators_If_3(_bt, _es1, _es2)
	}
}

func If_1(_bt OAst_BlockType) func(_es1 []OAst_Instr, _es2 []OAst_Instr) OAst_Instr_ {
	return func(_es1 []OAst_Instr, _es2 []OAst_Instr) OAst_Instr_ {
		return Operators_If_3(_bt, _es1, _es2)
	}
}

var Operators_If = Operators_If_3

func Operators_Br_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_Br_1(_x)
	return __tmp1
}

var Operators_Br = Operators_Br_1

func Operators_BrIf_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_BrIf_1(_x)
	return __tmp1
}

var Operators_BrIf = Operators_BrIf_1

func Operators_BrTable_2(_xs []OAst_Idx, _x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_BrTable_1(struct {
		F0 []OAst_Idx
		F1 OAst_Idx
	}{_xs, _x})
	return __tmp1
}

func BrTable_1(_xs []OAst_Idx) func(_x OAst_Idx) OAst_Instr_ {
	return func(_x OAst_Idx) OAst_Instr_ {
		return Operators_BrTable_2(_xs, _x)
	}
}

var Operators_BrTable = Operators_BrTable_2

func Operators_BrOnNull_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_BrOnNull_1(_x)
	return __tmp1
}

var Operators_BrOnNull = Operators_BrOnNull_1

func Operators_BrOnNonNull_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_BrOnNonNull_1(_x)
	return __tmp1
}

var Operators_BrOnNonNull = Operators_BrOnNonNull_1

func Operators_BrOnCast_3(_x OAst_Idx, _t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
	__tmp1 := Operators_BrOnCast_1(struct {
		F0 OAst_Idx
		F1 OTypes_RefType
		F2 OTypes_RefType
	}{_x, _t1, _t2})
	return __tmp1
}

func BrOnCast_2(_x OAst_Idx, _t1 OTypes_RefType) func(_t2 OTypes_RefType) OAst_Instr_ {
	return func(_t2 OTypes_RefType) OAst_Instr_ {
		return Operators_BrOnCast_3(_x, _t1, _t2)
	}
}

func BrOnCast_1(_x OAst_Idx) func(_t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
	return func(_t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
		return Operators_BrOnCast_3(_x, _t1, _t2)
	}
}

var Operators_BrOnCast = Operators_BrOnCast_3

func Operators_BrOnCastFail_3(_x OAst_Idx, _t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
	__tmp1 := Operators_BrOnCastFail_1(struct {
		F0 OAst_Idx
		F1 OTypes_RefType
		F2 OTypes_RefType
	}{_x, _t1, _t2})
	return __tmp1
}

func BrOnCastFail_2(_x OAst_Idx, _t1 OTypes_RefType) func(_t2 OTypes_RefType) OAst_Instr_ {
	return func(_t2 OTypes_RefType) OAst_Instr_ {
		return Operators_BrOnCastFail_3(_x, _t1, _t2)
	}
}

func BrOnCastFail_1(_x OAst_Idx) func(_t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
	return func(_t1 OTypes_RefType, _t2 OTypes_RefType) OAst_Instr_ {
		return Operators_BrOnCastFail_3(_x, _t1, _t2)
	}
}

var Operators_BrOnCastFail = Operators_BrOnCastFail_3

func Operators_Catch_2(_x1 OAst_Idx, _x2 OAst_Idx) OAst_Catch_ {
	__tmp1 := Operators_Catch_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x1, _x2})
	return __tmp1
}

func Catch_1(_x1 OAst_Idx) func(_x2 OAst_Idx) OAst_Catch_ {
	return func(_x2 OAst_Idx) OAst_Catch_ {
		return Operators_Catch_2(_x1, _x2)
	}
}

var Operators_Catch = Operators_Catch_2

func Operators_CatchRef_2(_x1 OAst_Idx, _x2 OAst_Idx) OAst_Catch_ {
	__tmp1 := Operators_CatchRef_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x1, _x2})
	return __tmp1
}

func CatchRef_1(_x1 OAst_Idx) func(_x2 OAst_Idx) OAst_Catch_ {
	return func(_x2 OAst_Idx) OAst_Catch_ {
		return Operators_CatchRef_2(_x1, _x2)
	}
}

var Operators_CatchRef = Operators_CatchRef_2

func Operators_CatchAll_1(_x OAst_Idx) OAst_Catch_ {
	__tmp1 := Operators_CatchAll_1(_x)
	return __tmp1
}

var Operators_CatchAll = Operators_CatchAll_1

func Operators_CatchAllRef_1(_x OAst_Idx) OAst_Catch_ {
	__tmp1 := Operators_CatchAllRef_1(_x)
	return __tmp1
}

var Operators_CatchAllRef = Operators_CatchAllRef_1

var _return = _Return

func Operators_Call_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_Call_1(_x)
	return __tmp1
}

var Operators_Call = Operators_Call_1

func Operators_CallRef_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_CallRef_1(_x)
	return __tmp1
}

var Operators_CallRef = Operators_CallRef_1

func Operators_CallIndirect_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_CallIndirect_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func CallIndirect_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_CallIndirect_2(_x, _y)
	}
}

var Operators_CallIndirect = Operators_CallIndirect_2

func Operators_ReturnCall_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ReturnCall_1(_x)
	return __tmp1
}

var Operators_ReturnCall = Operators_ReturnCall_1

func Operators_ReturnCallRef_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ReturnCallRef_1(_x)
	return __tmp1
}

var Operators_ReturnCallRef = Operators_ReturnCallRef_1

func Operators_ReturnCallIndirect_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ReturnCallIndirect_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ReturnCallIndirect_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ReturnCallIndirect_2(_x, _y)
	}
}

var Operators_ReturnCallIndirect = Operators_ReturnCallIndirect_2

func Operators_Throw_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_Throw_1(_x)
	return __tmp1
}

var Operators_Throw = Operators_Throw_1

var _throw_ref = _ThrowRef

func Operators_TryTable_3(_bt OAst_BlockType, _cs []OAst_Catch, _es []OAst_Instr) OAst_Instr_ {
	__tmp1 := Operators_TryTable_1(struct {
		F0 OAst_BlockType
		F1 []OAst_Catch
		F2 []OAst_Instr
	}{_bt, _cs, _es})
	return __tmp1
}

func TryTable_2(_bt OAst_BlockType, _cs []OAst_Catch) func(_es []OAst_Instr) OAst_Instr_ {
	return func(_es []OAst_Instr) OAst_Instr_ {
		return Operators_TryTable_3(_bt, _cs, _es)
	}
}

func TryTable_1(_bt OAst_BlockType) func(_cs []OAst_Catch, _es []OAst_Instr) OAst_Instr_ {
	return func(_cs []OAst_Catch, _es []OAst_Instr) OAst_Instr_ {
		return Operators_TryTable_3(_bt, _cs, _es)
	}
}

var Operators_TryTable = Operators_TryTable_3

func Operators_LocalGet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_LocalGet_1(_x)
	return __tmp1
}

var Operators_LocalGet = Operators_LocalGet_1

func Operators_LocalSet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_LocalSet_1(_x)
	return __tmp1
}

var Operators_LocalSet = Operators_LocalSet_1

func Operators_LocalTee_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_LocalTee_1(_x)
	return __tmp1
}

var Operators_LocalTee = Operators_LocalTee_1

func Operators_GlobalGet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_GlobalGet_1(_x)
	return __tmp1
}

var Operators_GlobalGet = Operators_GlobalGet_1

func Operators_GlobalSet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_GlobalSet_1(_x)
	return __tmp1
}

var Operators_GlobalSet = Operators_GlobalSet_1

func Operators_TableGet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableGet_1(_x)
	return __tmp1
}

var Operators_TableGet = Operators_TableGet_1

func Operators_TableSet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableSet_1(_x)
	return __tmp1
}

var Operators_TableSet = Operators_TableSet_1

func Operators_TableSize_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableSize_1(_x)
	return __tmp1
}

var Operators_TableSize = Operators_TableSize_1

func Operators_TableGrow_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableGrow_1(_x)
	return __tmp1
}

var Operators_TableGrow = Operators_TableGrow_1

func Operators_TableFill_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableFill_1(_x)
	return __tmp1
}

var Operators_TableFill = Operators_TableFill_1

func Operators_TableCopy_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableCopy_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func TableCopy_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_TableCopy_2(_x, _y)
	}
}

var Operators_TableCopy = Operators_TableCopy_2

func Operators_TableInit_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_TableInit_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func TableInit_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_TableInit_2(_x, _y)
	}
}

var Operators_TableInit = Operators_TableInit_2

func Operators_ElemDrop_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ElemDrop_1(_x)
	return __tmp1
}

var Operators_ElemDrop = Operators_ElemDrop_1

func Operators_I32Load_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Load_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load_3(_x, _align, _offset)
	}
}

func I32Load_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load_3(_x, _align, _offset)
	}
}

var Operators_I32Load = Operators_I32Load_3

func Operators_I64Load_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load_3(_x, _align, _offset)
	}
}

func I64Load_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load_3(_x, _align, _offset)
	}
}

var Operators_I64Load = Operators_I64Load_3

func Operators_F32Load_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func F32Load_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_F32Load_3(_x, _align, _offset)
	}
}

func F32Load_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_F32Load_3(_x, _align, _offset)
	}
}

var Operators_F32Load = Operators_F32Load_3

func Operators_F64Load_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func F64Load_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_F64Load_3(_x, _align, _offset)
	}
}

func F64Load_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_F64Load_3(_x, _align, _offset)
	}
}

var Operators_F64Load = Operators_F64Load_3

func Operators_I32Load8S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Load8S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load8S_3(_x, _align, _offset)
	}
}

func I32Load8S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load8S_3(_x, _align, _offset)
	}
}

var Operators_I32Load8S = Operators_I32Load8S_3

func Operators_I32Load8U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Load8U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load8U_3(_x, _align, _offset)
	}
}

func I32Load8U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load8U_3(_x, _align, _offset)
	}
}

var Operators_I32Load8U = Operators_I32Load8U_3

func Operators_I32Load16S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Load16S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load16S_3(_x, _align, _offset)
	}
}

func I32Load16S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load16S_3(_x, _align, _offset)
	}
}

var Operators_I32Load16S = Operators_I32Load16S_3

func Operators_I32Load16U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Load16U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load16U_3(_x, _align, _offset)
	}
}

func I32Load16U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Load16U_3(_x, _align, _offset)
	}
}

var Operators_I32Load16U = Operators_I32Load16U_3

func Operators_I64Load8S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load8S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load8S_3(_x, _align, _offset)
	}
}

func I64Load8S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load8S_3(_x, _align, _offset)
	}
}

var Operators_I64Load8S = Operators_I64Load8S_3

func Operators_I64Load8U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load8U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load8U_3(_x, _align, _offset)
	}
}

func I64Load8U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load8U_3(_x, _align, _offset)
	}
}

var Operators_I64Load8U = Operators_I64Load8U_3

func Operators_I64Load16S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load16S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load16S_3(_x, _align, _offset)
	}
}

func I64Load16S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load16S_3(_x, _align, _offset)
	}
}

var Operators_I64Load16S = Operators_I64Load16S_3

func Operators_I64Load16U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load16U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load16U_3(_x, _align, _offset)
	}
}

func I64Load16U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load16U_3(_x, _align, _offset)
	}
}

var Operators_I64Load16U = Operators_I64Load16U_3

func Operators_I64Load32S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load32S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load32S_3(_x, _align, _offset)
	}
}

func I64Load32S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load32S_3(_x, _align, _offset)
	}
}

var Operators_I64Load32S = Operators_I64Load32S_3

func Operators_I64Load32U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Load_1(struct {
		F0 OAst_Idx
		F1 OAst_Loadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Load32U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load32U_3(_x, _align, _offset)
	}
}

func I64Load32U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Load32U_3(_x, _align, _offset)
	}
}

var Operators_I64Load32U = Operators_I64Load32U_3

func Operators_I32Store_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Store_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store_3(_x, _align, _offset)
	}
}

func I32Store_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store_3(_x, _align, _offset)
	}
}

var Operators_I32Store = Operators_I32Store_3

func Operators_I64Store_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Store_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store_3(_x, _align, _offset)
	}
}

func I64Store_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store_3(_x, _align, _offset)
	}
}

var Operators_I64Store = Operators_I64Store_3

func Operators_F32Store_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func F32Store_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_F32Store_3(_x, _align, _offset)
	}
}

func F32Store_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_F32Store_3(_x, _align, _offset)
	}
}

var Operators_F32Store = Operators_F32Store_3

func Operators_F64Store_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func F64Store_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_F64Store_3(_x, _align, _offset)
	}
}

func F64Store_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_F64Store_3(_x, _align, _offset)
	}
}

var Operators_F64Store = Operators_F64Store_3

func Operators_I32Store8_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Store8_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store8_3(_x, _align, _offset)
	}
}

func I32Store8_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store8_3(_x, _align, _offset)
	}
}

var Operators_I32Store8 = Operators_I32Store8_3

func Operators_I32Store16_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I32Store16_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store16_3(_x, _align, _offset)
	}
}

func I32Store16_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I32Store16_3(_x, _align, _offset)
	}
}

var Operators_I32Store16 = Operators_I32Store16_3

func Operators_I64Store8_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Store8_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store8_3(_x, _align, _offset)
	}
}

func I64Store8_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store8_3(_x, _align, _offset)
	}
}

var Operators_I64Store8 = Operators_I64Store8_3

func Operators_I64Store16_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Store16_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store16_3(_x, _align, _offset)
	}
}

func I64Store16_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store16_3(_x, _align, _offset)
	}
}

var Operators_I64Store16 = Operators_I64Store16_3

func Operators_I64Store32_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_Store_1(struct {
		F0 OAst_Idx
		F1 OAst_Storeop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func I64Store32_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store32_3(_x, _align, _offset)
	}
}

func I64Store32_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_I64Store32_3(_x, _align, _offset)
	}
}

var Operators_I64Store32 = Operators_I64Store32_3

func Operators_V128Load_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load_3(_x, _align, _offset)
	}
}

func V128Load_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load_3(_x, _align, _offset)
	}
}

var Operators_V128Load = Operators_V128Load_3

func Operators_V128Load8x8S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load8x8S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8x8S_3(_x, _align, _offset)
	}
}

func V128Load8x8S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8x8S_3(_x, _align, _offset)
	}
}

var Operators_V128Load8x8S = Operators_V128Load8x8S_3

func Operators_V128Load8x8U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load8x8U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8x8U_3(_x, _align, _offset)
	}
}

func V128Load8x8U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8x8U_3(_x, _align, _offset)
	}
}

var Operators_V128Load8x8U = Operators_V128Load8x8U_3

func Operators_V128Load16x4S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load16x4S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16x4S_3(_x, _align, _offset)
	}
}

func V128Load16x4S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16x4S_3(_x, _align, _offset)
	}
}

var Operators_V128Load16x4S = Operators_V128Load16x4S_3

func Operators_V128Load16x4U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load16x4U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16x4U_3(_x, _align, _offset)
	}
}

func V128Load16x4U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16x4U_3(_x, _align, _offset)
	}
}

var Operators_V128Load16x4U = Operators_V128Load16x4U_3

func Operators_V128Load32x2S_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load32x2S_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32x2S_3(_x, _align, _offset)
	}
}

func V128Load32x2S_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32x2S_3(_x, _align, _offset)
	}
}

var Operators_V128Load32x2S = Operators_V128Load32x2S_3

func Operators_V128Load32x2U_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load32x2U_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32x2U_3(_x, _align, _offset)
	}
}

func V128Load32x2U_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32x2U_3(_x, _align, _offset)
	}
}

var Operators_V128Load32x2U = Operators_V128Load32x2U_3

func Operators_V128Load8Splat_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load8Splat_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8Splat_3(_x, _align, _offset)
	}
}

func V128Load8Splat_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load8Splat_3(_x, _align, _offset)
	}
}

var Operators_V128Load8Splat = Operators_V128Load8Splat_3

func Operators_V128Load16Splat_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load16Splat_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16Splat_3(_x, _align, _offset)
	}
}

func V128Load16Splat_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load16Splat_3(_x, _align, _offset)
	}
}

var Operators_V128Load16Splat = Operators_V128Load16Splat_3

func Operators_V128Load32Splat_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load32Splat_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32Splat_3(_x, _align, _offset)
	}
}

func V128Load32Splat_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32Splat_3(_x, _align, _offset)
	}
}

var Operators_V128Load32Splat = Operators_V128Load32Splat_3

func Operators_V128Load64Splat_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load64Splat_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load64Splat_3(_x, _align, _offset)
	}
}

func V128Load64Splat_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load64Splat_3(_x, _align, _offset)
	}
}

var Operators_V128Load64Splat = Operators_V128Load64Splat_3

func Operators_V128Load32Zero_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load32Zero_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32Zero_3(_x, _align, _offset)
	}
}

func V128Load32Zero_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load32Zero_3(_x, _align, _offset)
	}
}

var Operators_V128Load32Zero = Operators_V128Load32Zero_3

func Operators_V128Load64Zero_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecLoad_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Load64Zero_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load64Zero_3(_x, _align, _offset)
	}
}

func V128Load64Zero_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Load64Zero_3(_x, _align, _offset)
	}
}

var Operators_V128Load64Zero = Operators_V128Load64Zero_3

func Operators_V128Load8Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecLoadLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Load8Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Load8Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load8Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load8Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load8Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load8Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Load8Lane = Operators_V128Load8Lane_4

func Operators_V128Load16Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecLoadLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Load16Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Load16Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load16Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load16Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load16Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load16Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Load16Lane = Operators_V128Load16Lane_4

func Operators_V128Load32Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecLoadLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Load32Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Load32Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load32Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load32Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load32Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load32Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Load32Lane = Operators_V128Load32Lane_4

func Operators_V128Load64Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecLoadLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Load64Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Load64Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load64Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load64Lane_4(_x, _align, _offset, _i)
	}
}

func V128Load64Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Load64Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Load64Lane = Operators_V128Load64Lane_4

func Operators_V128Store_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) OAst_Instr_ {
	__tmp1 := Operators_VecStore_1(struct {
		F0 OAst_Idx
		F1 OAst_VecStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func V128Store_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address) OAst_Instr_ {
	return func(_offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Store_3(_x, _align, _offset)
	}
}

func V128Store_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address) OAst_Instr_ {
		return Operators_V128Store_3(_x, _align, _offset)
	}
}

var Operators_V128Store = Operators_V128Store_3

func Operators_V128Store8Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecStoreLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Store8Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Store8Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store8Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store8Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store8Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store8Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Store8Lane = Operators_V128Store8Lane_4

func Operators_V128Store16Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecStoreLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Store16Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Store16Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store16Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store16Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store16Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store16Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Store16Lane = Operators_V128Store16Lane_4

func Operators_V128Store32Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecStoreLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Store32Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Store32Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store32Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store32Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store32Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store32Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Store32Lane = Operators_V128Store32Lane_4

func Operators_V128Store64Lane_4(_x OAst_Idx, _align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecStoreLane_1(struct {
		F0 OAst_Idx
		F1 OAst_VecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func V128Store64Lane_3(_x OAst_Idx, _align OInt, _offset OOperators_Address) func(_i OInt) OAst_Instr_ {
	return func(_i OInt) OAst_Instr_ {
		return Operators_V128Store64Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store64Lane_2(_x OAst_Idx, _align OInt) func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store64Lane_4(_x, _align, _offset, _i)
	}
}

func V128Store64Lane_1(_x OAst_Idx) func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
	return func(_align OInt, _offset OOperators_Address, _i OInt) OAst_Instr_ {
		return Operators_V128Store64Lane_4(_x, _align, _offset, _i)
	}
}

var Operators_V128Store64Lane = Operators_V128Store64Lane_4

func Operators_MemorySize_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_MemorySize_1(_x)
	return __tmp1
}

var Operators_MemorySize = Operators_MemorySize_1

func Operators_MemoryGrow_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_MemoryGrow_1(_x)
	return __tmp1
}

var Operators_MemoryGrow = Operators_MemoryGrow_1

func Operators_MemoryFill_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_MemoryFill_1(_x)
	return __tmp1
}

var Operators_MemoryFill = Operators_MemoryFill_1

func Operators_MemoryCopy_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_MemoryCopy_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func MemoryCopy_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_MemoryCopy_2(_x, _y)
	}
}

var Operators_MemoryCopy = Operators_MemoryCopy_2

func Operators_MemoryInit_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_MemoryInit_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func MemoryInit_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_MemoryInit_2(_x, _y)
	}
}

var Operators_MemoryInit = Operators_MemoryInit_2

func Operators_DataDrop_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_DataDrop_1(_x)
	return __tmp1
}

var Operators_DataDrop = Operators_DataDrop_1

var _ref_is_null = _RefIsNull
var _ref_as_non_null = _RefAsNonNull

func Operators_RefTest_1(_t OTypes_RefType) OAst_Instr_ {
	__tmp1 := Operators_RefTest_1(_t)
	return __tmp1
}

var Operators_RefTest = Operators_RefTest_1

func Operators_RefCast_1(_t OTypes_RefType) OAst_Instr_ {
	__tmp1 := Operators_RefCast_1(_t)
	return __tmp1
}

var Operators_RefCast = Operators_RefCast_1

var _ref_eq = _RefEq
var _ref_i31 = _RefI31
var _i31_get_u = Operators_I31Get_1(_ZX)
var _i31_get_s = Operators_I31Get_1(_SX)

func Operators_StructNew_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructNew_1(struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}{_x, _Explicit})
	return __tmp1
}

var Operators_StructNew = Operators_StructNew_1

func Operators_StructNewDefault_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructNew_1(struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}{_x, _Implicit})
	return __tmp1
}

var Operators_StructNewDefault = Operators_StructNewDefault_1

func Operators_StructGet_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructGet_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
		F2 *OPack_Extension
	}{_x, _y, _None})
	return __tmp1
}

func StructGet_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_StructGet_2(_x, _y)
	}
}

var Operators_StructGet = Operators_StructGet_2

func Operators_StructGetU_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructGet_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
		F2 *OPack_Extension
	}{_x, _y, Operators_Some_1(_ZX)})
	return __tmp1
}

func StructGetU_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_StructGetU_2(_x, _y)
	}
}

var Operators_StructGetU = Operators_StructGetU_2

func Operators_StructGetS_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructGet_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
		F2 *OPack_Extension
	}{_x, _y, Operators_Some_1(_SX)})
	return __tmp1
}

func StructGetS_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_StructGetS_2(_x, _y)
	}
}

var Operators_StructGetS = Operators_StructGetS_2

func Operators_StructSet_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_StructSet_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func StructSet_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_StructSet_2(_x, _y)
	}
}

var Operators_StructSet = Operators_StructSet_2

func Operators_ArrayNew_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayNew_1(struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}{_x, _Explicit})
	return __tmp1
}

var Operators_ArrayNew = Operators_ArrayNew_1

func Operators_ArrayNewDefault_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayNew_1(struct {
		F0 OAst_Idx
		F1 OAst_Initop
	}{_x, _Implicit})
	return __tmp1
}

var Operators_ArrayNewDefault = Operators_ArrayNewDefault_1

func Operators_ArrayNewFixed_2(_x OAst_Idx, _n OTypes_TypeIdx) OAst_Instr_ {
	__tmp1 := Operators_ArrayNewFixed_1(struct {
		F0 OAst_Idx
		F1 OTypes_TypeIdx
	}{_x, _n})
	return __tmp1
}

func ArrayNewFixed_1(_x OAst_Idx) func(_n OTypes_TypeIdx) OAst_Instr_ {
	return func(_n OTypes_TypeIdx) OAst_Instr_ {
		return Operators_ArrayNewFixed_2(_x, _n)
	}
}

var Operators_ArrayNewFixed = Operators_ArrayNewFixed_2

func Operators_ArrayNewElem_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayNewElem_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ArrayNewElem_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ArrayNewElem_2(_x, _y)
	}
}

var Operators_ArrayNewElem = Operators_ArrayNewElem_2

func Operators_ArrayNewData_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayNewData_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ArrayNewData_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ArrayNewData_2(_x, _y)
	}
}

var Operators_ArrayNewData = Operators_ArrayNewData_2

func Operators_ArrayGet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayGet_1(struct {
		F0 OAst_Idx
		F1 *OPack_Extension
	}{_x, _None})
	return __tmp1
}

var Operators_ArrayGet = Operators_ArrayGet_1

func Operators_ArrayGetU_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayGet_1(struct {
		F0 OAst_Idx
		F1 *OPack_Extension
	}{_x, Operators_Some_1(_ZX)})
	return __tmp1
}

var Operators_ArrayGetU = Operators_ArrayGetU_1

func Operators_ArrayGetS_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayGet_1(struct {
		F0 OAst_Idx
		F1 *OPack_Extension
	}{_x, Operators_Some_1(_SX)})
	return __tmp1
}

var Operators_ArrayGetS = Operators_ArrayGetS_1

func Operators_ArraySet_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArraySet_1(_x)
	return __tmp1
}

var Operators_ArraySet = Operators_ArraySet_1

var _array_len = _ArrayLen

func Operators_ArrayCopy_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayCopy_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ArrayCopy_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ArrayCopy_2(_x, _y)
	}
}

var Operators_ArrayCopy = Operators_ArrayCopy_2

func Operators_ArrayFill_1(_x OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayFill_1(_x)
	return __tmp1
}

var Operators_ArrayFill = Operators_ArrayFill_1

func Operators_ArrayInitData_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayInitData_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ArrayInitData_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ArrayInitData_2(_x, _y)
	}
}

var Operators_ArrayInitData = Operators_ArrayInitData_2

func Operators_ArrayInitElem_2(_x OAst_Idx, _y OAst_Idx) OAst_Instr_ {
	__tmp1 := Operators_ArrayInitElem_1(struct {
		F0 OAst_Idx
		F1 OAst_Idx
	}{_x, _y})
	return __tmp1
}

func ArrayInitElem_1(_x OAst_Idx) func(_y OAst_Idx) OAst_Instr_ {
	return func(_y OAst_Idx) OAst_Instr_ {
		return Operators_ArrayInitElem_2(_x, _y)
	}
}

var Operators_ArrayInitElem = Operators_ArrayInitElem_2

var _any_convert_extern = Operators_ExternConvert_1(_Internalize)
var _extern_convert_any = Operators_ExternConvert_1(_Externalize)
var _i32_clz = Operators_Unary_1(Operators_I32_1( /*I32Op.*/ _Clz))
var _i32_ctz = Operators_Unary_1(Operators_I32_1( /*I32Op.*/ _Ctz))
var _i32_popcnt = Operators_Unary_1(Operators_I32_1( /*I32Op.*/ _Popcnt))
var _i64_clz = Operators_Unary_1(Operators_I64_1( /*I64Op.*/ _Clz))
var _i64_ctz = Operators_Unary_1(Operators_I64_1( /*I64Op.*/ _Ctz))
var _i64_popcnt = Operators_Unary_1(Operators_I64_1( /*I64Op.*/ _Popcnt))
var _f32_neg = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Neg))
var _f32_abs = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Abs))
var _f32_sqrt = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Sqrt))
var _f32_ceil = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Ceil))
var _f32_floor = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Floor))
var _f32_trunc = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Trunc))
var _f32_nearest = Operators_Unary_1(Operators_F32_1( /*F32Op.*/ _Nearest))
var _f64_neg = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Neg))
var _f64_abs = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Abs))
var _f64_sqrt = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Sqrt))
var _f64_ceil = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Ceil))
var _f64_floor = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Floor))
var _f64_trunc = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Trunc))
var _f64_nearest = Operators_Unary_1(Operators_F64_1( /*F64Op.*/ _Nearest))
var _i32_add = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Add))
var _i32_sub = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Sub))
var _i32_mul = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Mul))
var _i32_div_s = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _DivS))
var _i32_div_u = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _DivU))
var _i32_rem_s = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _RemS))
var _i32_rem_u = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _RemU))
var _i32_and = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _And))
var _i32_or = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Or))
var _i32_xor = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Xor))
var _i32_shl = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Shl))
var _i32_shr_s = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _ShrS))
var _i32_shr_u = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _ShrU))
var _i32_rotl = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Rotl))
var _i32_rotr = Operators_Binary_1(Operators_I32_1( /*I32Op.*/ _Rotr))
var _i64_add = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Add))
var _i64_sub = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Sub))
var _i64_mul = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Mul))
var _i64_div_s = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _DivS))
var _i64_div_u = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _DivU))
var _i64_rem_s = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _RemS))
var _i64_rem_u = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _RemU))
var _i64_and = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _And))
var _i64_or = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Or))
var _i64_xor = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Xor))
var _i64_shl = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Shl))
var _i64_shr_s = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _ShrS))
var _i64_shr_u = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _ShrU))
var _i64_rotl = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Rotl))
var _i64_rotr = Operators_Binary_1(Operators_I64_1( /*I64Op.*/ _Rotr))
var _f32_add = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Add))
var _f32_sub = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Sub))
var _f32_mul = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Mul))
var _f32_div = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Div))
var _f32_min = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Min))
var _f32_max = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _Max))
var _f32_copysign = Operators_Binary_1(Operators_F32_1( /*F32Op.*/ _CopySign))
var _f64_add = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Add))
var _f64_sub = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Sub))
var _f64_mul = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Mul))
var _f64_div = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Div))
var _f64_min = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Min))
var _f64_max = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _Max))
var _f64_copysign = Operators_Binary_1(Operators_F64_1( /*F64Op.*/ _CopySign))
var _i32_eqz = Operators_Test_1(Operators_I32_1( /*I32Op.*/ _Eqz))
var _i64_eqz = Operators_Test_1(Operators_I64_1( /*I64Op.*/ _Eqz))
var _i32_eq = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _Eq))
var _i32_ne = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _Ne))
var _i32_lt_s = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _LtS))
var _i32_lt_u = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _LtU))
var _i32_le_s = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _LeS))
var _i32_le_u = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _LeU))
var _i32_gt_s = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _GtS))
var _i32_gt_u = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _GtU))
var _i32_ge_s = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _GeS))
var _i32_ge_u = Operators_Compare_1(Operators_I32_1( /*I32Op.*/ _GeU))
var _i64_eq = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _Eq))
var _i64_ne = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _Ne))
var _i64_lt_s = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _LtS))
var _i64_lt_u = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _LtU))
var _i64_le_s = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _LeS))
var _i64_le_u = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _LeU))
var _i64_gt_s = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _GtS))
var _i64_gt_u = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _GtU))
var _i64_ge_s = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _GeS))
var _i64_ge_u = Operators_Compare_1(Operators_I64_1( /*I64Op.*/ _GeU))
var _f32_eq = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Eq))
var _f32_ne = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Ne))
var _f32_lt = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Lt))
var _f32_le = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Le))
var _f32_gt = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Gt))
var _f32_ge = Operators_Compare_1(Operators_F32_1( /*F32Op.*/ _Ge))
var _f64_eq = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Eq))
var _f64_ne = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Ne))
var _f64_lt = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Lt))
var _f64_le = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Le))
var _f64_gt = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Gt))
var _f64_ge = Operators_Compare_1(Operators_F64_1( /*F64Op.*/ _Ge))
var _i32_extend8_s = Operators_Unary_1(Operators_I32_1(Operators_I32Op_ExtendS_1(_Pack8)))
var _i32_extend16_s = Operators_Unary_1(Operators_I32_1(Operators_I32Op_ExtendS_1(_Pack16)))
var _i64_extend8_s = Operators_Unary_1(Operators_I64_1(Operators_I64Op_ExtendS_1(_Pack8)))
var _i64_extend16_s = Operators_Unary_1(Operators_I64_1(Operators_I64Op_ExtendS_1(_Pack16)))
var _i64_extend32_s = Operators_Unary_1(Operators_I64_1(Operators_I64Op_ExtendS_1(_Pack32)))
var _i32_wrap_i64 = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _WrapI64))
var _i32_trunc_f32_s = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSF32))
var _i32_trunc_f32_u = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncUF32))
var _i32_trunc_f64_s = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSF64))
var _i32_trunc_f64_u = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncUF64))
var _i32_trunc_sat_f32_s = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSatSF32))
var _i32_trunc_sat_f32_u = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSatUF32))
var _i32_trunc_sat_f64_s = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSatSF64))
var _i32_trunc_sat_f64_u = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _TruncSatUF64))
var _i64_extend_i32_s = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _ExtendSI32))
var _i64_extend_i32_u = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _ExtendUI32))
var _i64_trunc_f32_s = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSF32))
var _i64_trunc_f32_u = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncUF32))
var _i64_trunc_f64_s = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSF64))
var _i64_trunc_f64_u = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncUF64))
var _f32_convert_i32_s = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _ConvertSI32))
var _f32_convert_i32_u = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _ConvertUI32))
var _f32_convert_i64_s = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _ConvertSI64))
var _f32_convert_i64_u = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _ConvertUI64))
var _i64_trunc_sat_f32_s = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSatSF32))
var _i64_trunc_sat_f32_u = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSatUF32))
var _i64_trunc_sat_f64_s = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSatSF64))
var _i64_trunc_sat_f64_u = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _TruncSatUF64))
var _f32_demote_f64 = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _DemoteF64))
var _f64_convert_i32_s = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _ConvertSI32))
var _f64_convert_i32_u = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _ConvertUI32))
var _f64_convert_i64_s = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _ConvertSI64))
var _f64_convert_i64_u = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _ConvertUI64))
var _f64_promote_f32 = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _PromoteF32))
var _i32_reinterpret_f32 = Operators_Convert_1(Operators_I32_1( /*I32Op.*/ _ReinterpretFloat))
var _i64_reinterpret_f64 = Operators_Convert_1(Operators_I64_1( /*I64Op.*/ _ReinterpretFloat))
var _f32_reinterpret_i32 = Operators_Convert_1(Operators_F32_1( /*F32Op.*/ _ReinterpretInt))
var _f64_reinterpret_i64 = Operators_Convert_1(Operators_F64_1( /*F64Op.*/ _ReinterpretInt))
var _v128_not = Operators_VecUnaryBits_1(Operators_V128_1( /*V128Op.*/ _Not))
var _v128_and = Operators_VecBinaryBits_1(Operators_V128_1( /*V128Op.*/ _And))
var _v128_andnot = Operators_VecBinaryBits_1(Operators_V128_1( /*V128Op.*/ _AndNot))
var _v128_or = Operators_VecBinaryBits_1(Operators_V128_1( /*V128Op.*/ _Or))
var _v128_xor = Operators_VecBinaryBits_1(Operators_V128_1( /*V128Op.*/ _Xor))
var _v128_bitselect = Operators_VecTernaryBits_1(Operators_V128_1( /*V128Op.*/ _Bitselect))
var _v128_any_true = Operators_VecTestBits_1(Operators_V128_1( /*V128Op.*/ _AnyTrue))
var _i8x16_swizzle = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Swizzle)))

func Operators_I8x16Shuffle_1(_is []OInt) OAst_Instr_ {
	__tmp1 := Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1(Operators_V128Op_Shuffle_1(_is))))
	return __tmp1
}

var Operators_I8x16Shuffle = Operators_I8x16Shuffle_1

var _i8x16_splat = Operators_VecSplat_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Splat)))

func Operators_I8x16ExtractLaneS_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I8x16_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, _SX}))))
	return __tmp1
}

var Operators_I8x16ExtractLaneS = Operators_I8x16ExtractLaneS_1

func Operators_I8x16ExtractLaneU_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I8x16_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, _ZX}))))
	return __tmp1
}

var Operators_I8x16ExtractLaneU = Operators_I8x16ExtractLaneU_1

func Operators_I8x16ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_I8x16_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_I8x16ReplaceLane = Operators_I8x16ReplaceLane_1

var _i8x16_eq = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Eq)))
var _i8x16_ne = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Ne)))
var _i8x16_lt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _LtS)))
var _i8x16_lt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _LtU)))
var _i8x16_le_s = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _LeS)))
var _i8x16_le_u = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _LeU)))
var _i8x16_gt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _GtS)))
var _i8x16_gt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _GtU)))
var _i8x16_ge_s = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _GeS)))
var _i8x16_ge_u = Operators_VecCompare_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _GeU)))
var _i8x16_neg = Operators_VecUnary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Neg)))
var _i8x16_bitmask = Operators_VecBitmask_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Bitmask)))
var _i8x16_all_true = Operators_VecTest_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _AllTrue)))
var _i8x16_narrow_i16x8_s = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _NarrowS)))
var _i8x16_narrow_i16x8_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _NarrowU)))
var _i16x8_extend_low_i8x16_s = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtendLowS)))
var _i16x8_extend_high_i8x16_s = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtendHighS)))
var _i16x8_extend_low_i8x16_u = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtendLowU)))
var _i16x8_extend_high_i8x16_u = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtendHighU)))
var _i8x16_shl = Operators_VecShift_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Shl)))
var _i8x16_shr_s = Operators_VecShift_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _ShrS)))
var _i8x16_shr_u = Operators_VecShift_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _ShrU)))
var _i8x16_add = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Add)))
var _i8x16_add_sat_s = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _AddSatS)))
var _i8x16_add_sat_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _AddSatU)))
var _i8x16_sub = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Sub)))
var _i8x16_sub_sat_s = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _SubSatS)))
var _i8x16_sub_sat_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _SubSatU)))
var _i8x16_abs = Operators_VecUnary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Abs)))
var _i8x16_popcnt = Operators_VecUnary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _Popcnt)))
var _i8x16_min_s = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _MinS)))
var _i8x16_min_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _MinU)))
var _i8x16_max_s = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _MaxS)))
var _i8x16_max_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _MaxU)))
var _i8x16_avgr_u = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _AvgrU)))
var _i16x8_splat = Operators_VecSplat_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Splat)))

func Operators_I16x8ExtractLaneS_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I16x8_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, _SX}))))
	return __tmp1
}

var Operators_I16x8ExtractLaneS = Operators_I16x8ExtractLaneS_1

func Operators_I16x8ExtractLaneU_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I16x8_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, _ZX}))))
	return __tmp1
}

var Operators_I16x8ExtractLaneU = Operators_I16x8ExtractLaneU_1

func Operators_I16x8ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_I16x8_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_I16x8ReplaceLane = Operators_I16x8ReplaceLane_1

var _i16x8_eq = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Eq)))
var _i16x8_ne = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Ne)))
var _i16x8_lt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _LtS)))
var _i16x8_lt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _LtU)))
var _i16x8_le_s = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _LeS)))
var _i16x8_le_u = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _LeU)))
var _i16x8_gt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _GtS)))
var _i16x8_gt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _GtU)))
var _i16x8_ge_s = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _GeS)))
var _i16x8_ge_u = Operators_VecCompare_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _GeU)))
var _i16x8_neg = Operators_VecUnary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Neg)))
var _i16x8_bitmask = Operators_VecBitmask_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Bitmask)))
var _i16x8_all_true = Operators_VecTest_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _AllTrue)))
var _i16x8_narrow_i32x4_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _NarrowS)))
var _i16x8_narrow_i32x4_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _NarrowU)))
var _i16x8_shl = Operators_VecShift_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Shl)))
var _i16x8_shr_s = Operators_VecShift_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ShrS)))
var _i16x8_shr_u = Operators_VecShift_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ShrU)))
var _i16x8_add = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Add)))
var _i16x8_add_sat_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _AddSatS)))
var _i16x8_add_sat_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _AddSatU)))
var _i16x8_sub = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Sub)))
var _i16x8_sub_sat_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _SubSatS)))
var _i16x8_sub_sat_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _SubSatU)))
var _i16x8_mul = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Mul)))
var _i16x8_abs = Operators_VecUnary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Abs)))
var _i16x8_min_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _MinS)))
var _i16x8_min_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _MinU)))
var _i16x8_max_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _MaxS)))
var _i16x8_max_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _MaxU)))
var _i16x8_avgr_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _AvgrU)))
var _i16x8_extmul_low_i8x16_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtMulLowS)))
var _i16x8_extmul_high_i8x16_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtMulHighS)))
var _i16x8_extmul_low_i8x16_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtMulLowU)))
var _i16x8_extmul_high_i8x16_u = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtMulHighU)))
var _i16x8_q15mulr_sat_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _Q15MulRSatS)))
var _i16x8_extadd_pairwise_i8x16_s = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtAddPairwiseS)))
var _i16x8_extadd_pairwise_i8x16_u = Operators_VecConvert_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _ExtAddPairwiseU)))
var _i32x4_splat = Operators_VecSplat_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Splat)))

func Operators_I32x4ExtractLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I32x4_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_I32x4ExtractLane = Operators_I32x4ExtractLane_1

func Operators_I32x4ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_I32x4_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_I32x4ReplaceLane = Operators_I32x4ReplaceLane_1

var _i32x4_eq = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Eq)))
var _i32x4_ne = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Ne)))
var _i32x4_lt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _LtS)))
var _i32x4_lt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _LtU)))
var _i32x4_le_s = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _LeS)))
var _i32x4_le_u = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _LeU)))
var _i32x4_gt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _GtS)))
var _i32x4_gt_u = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _GtU)))
var _i32x4_ge_s = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _GeS)))
var _i32x4_ge_u = Operators_VecCompare_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _GeU)))
var _i32x4_abs = Operators_VecUnary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Abs)))
var _i32x4_neg = Operators_VecUnary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Neg)))
var _i32x4_bitmask = Operators_VecBitmask_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Bitmask)))
var _i32x4_all_true = Operators_VecTest_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _AllTrue)))
var _i32x4_extend_low_i16x8_s = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtendLowS)))
var _i32x4_extend_high_i16x8_s = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtendHighS)))
var _i32x4_extend_low_i16x8_u = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtendLowU)))
var _i32x4_extend_high_i16x8_u = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtendHighU)))
var _i32x4_shl = Operators_VecShift_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Shl)))
var _i32x4_shr_s = Operators_VecShift_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ShrS)))
var _i32x4_shr_u = Operators_VecShift_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ShrU)))
var _i32x4_add = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Add)))
var _i32x4_sub = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Sub)))
var _i32x4_min_s = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _MinS)))
var _i32x4_min_u = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _MinU)))
var _i32x4_max_s = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _MaxS)))
var _i32x4_max_u = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _MaxU)))
var _i32x4_mul = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _Mul)))
var _i32x4_dot_i16x8_s = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _DotS)))
var _i32x4_trunc_sat_f32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _TruncSatSF32x4)))
var _i32x4_trunc_sat_f32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _TruncSatUF32x4)))
var _i32x4_trunc_sat_f64x2_s_zero = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _TruncSatSZeroF64x2)))
var _i32x4_trunc_sat_f64x2_u_zero = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _TruncSatUZeroF64x2)))
var _i32x4_extmul_low_i16x8_s = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtMulLowS)))
var _i32x4_extmul_high_i16x8_s = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtMulHighS)))
var _i32x4_extmul_low_i16x8_u = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtMulLowU)))
var _i32x4_extmul_high_i16x8_u = Operators_VecBinary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtMulHighU)))
var _i32x4_extadd_pairwise_i16x8_s = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtAddPairwiseS)))
var _i32x4_extadd_pairwise_i16x8_u = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _ExtAddPairwiseU)))
var _i64x2_splat = Operators_VecSplat_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Splat)))

func Operators_I64x2ExtractLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_I64x2_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_I64x2ExtractLane = Operators_I64x2ExtractLane_1

func Operators_I64x2ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_I64x2_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_I64x2ReplaceLane = Operators_I64x2ReplaceLane_1

var _i64x2_extend_low_i32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtendLowS)))
var _i64x2_extend_high_i32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtendHighS)))
var _i64x2_extend_low_i32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtendLowU)))
var _i64x2_extend_high_i32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtendHighU)))
var _i64x2_eq = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Eq)))
var _i64x2_ne = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Ne)))
var _i64x2_lt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _LtS)))
var _i64x2_le_s = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _LeS)))
var _i64x2_gt_s = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _GtS)))
var _i64x2_ge_s = Operators_VecCompare_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _GeS)))
var _i64x2_abs = Operators_VecUnary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Abs)))
var _i64x2_neg = Operators_VecUnary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Neg)))
var _i64x2_bitmask = Operators_VecBitmask_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Bitmask)))
var _i64x2_all_true = Operators_VecTest_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _AllTrue)))
var _i64x2_add = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Add)))
var _i64x2_sub = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Sub)))
var _i64x2_mul = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Mul)))
var _i64x2_shl = Operators_VecShift_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _Shl)))
var _i64x2_shr_s = Operators_VecShift_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ShrS)))
var _i64x2_shr_u = Operators_VecShift_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ShrU)))
var _i64x2_extmul_low_i32x4_s = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtMulLowS)))
var _i64x2_extmul_high_i32x4_s = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtMulHighS)))
var _i64x2_extmul_low_i32x4_u = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtMulLowU)))
var _i64x2_extmul_high_i32x4_u = Operators_VecBinary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _ExtMulHighU)))
var _f32x4_splat = Operators_VecSplat_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Splat)))

func Operators_F32x4ExtractLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_F32x4_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_F32x4ExtractLane = Operators_F32x4ExtractLane_1

func Operators_F32x4ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_F32x4_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_F32x4ReplaceLane = Operators_F32x4ReplaceLane_1

var _f32x4_eq = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Eq)))
var _f32x4_ne = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Ne)))
var _f32x4_lt = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Lt)))
var _f32x4_le = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Le)))
var _f32x4_gt = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Gt)))
var _f32x4_ge = Operators_VecCompare_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Ge)))
var _f32x4_abs = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Abs)))
var _f32x4_neg = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Neg)))
var _f32x4_sqrt = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Sqrt)))
var _f32x4_ceil = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Ceil)))
var _f32x4_floor = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Floor)))
var _f32x4_trunc = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Trunc)))
var _f32x4_nearest = Operators_VecUnary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Nearest)))
var _f32x4_add = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Add)))
var _f32x4_sub = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Sub)))
var _f32x4_mul = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Mul)))
var _f32x4_div = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Div)))
var _f32x4_min = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Min)))
var _f32x4_max = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Max)))
var _f32x4_pmin = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Pmin)))
var _f32x4_pmax = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _Pmax)))
var _f32x4_demote_f64x2_zero = Operators_VecConvert_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _DemoteZeroF64x2)))
var _f32x4_convert_i32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _ConvertSI32x4)))
var _f32x4_convert_i32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _ConvertUI32x4)))
var _f64x2_splat = Operators_VecSplat_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Splat)))

func Operators_F64x2ExtractLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecExtract_1(Operators_V128_1(Operators_F64x2_1(Operators_V128Op_Extract_1(struct {
		F0 OInt
		F1 OOperators__a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_F64x2ExtractLane = Operators_F64x2ExtractLane_1

func Operators_F64x2ReplaceLane_1(_i OInt) OAst_Instr_ {
	__tmp1 := Operators_VecReplace_1(Operators_V128_1(Operators_F64x2_1(Operators_V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_F64x2ReplaceLane = Operators_F64x2ReplaceLane_1

var _f64x2_eq = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Eq)))
var _f64x2_ne = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Ne)))
var _f64x2_lt = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Lt)))
var _f64x2_le = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Le)))
var _f64x2_gt = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Gt)))
var _f64x2_ge = Operators_VecCompare_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Ge)))
var _f64x2_neg = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Neg)))
var _f64x2_sqrt = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Sqrt)))
var _f64x2_ceil = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Ceil)))
var _f64x2_floor = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Floor)))
var _f64x2_trunc = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Trunc)))
var _f64x2_nearest = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Nearest)))
var _f64x2_add = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Add)))
var _f64x2_sub = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Sub)))
var _f64x2_mul = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Mul)))
var _f64x2_div = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Div)))
var _f64x2_min = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Min)))
var _f64x2_max = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Max)))
var _f64x2_abs = Operators_VecUnary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Abs)))
var _f64x2_pmin = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Pmin)))
var _f64x2_pmax = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _Pmax)))
var _f64x2_promote_low_f32x4 = Operators_VecConvert_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _PromoteLowF32x4)))
var _f64x2_convert_low_i32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _ConvertSI32x4)))
var _f64x2_convert_low_i32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _ConvertUI32x4)))
var _i8x16_relaxed_swizzle = Operators_VecBinary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _RelaxedSwizzle)))
var _i8x16_relaxed_laneselect = Operators_VecTernary_1(Operators_V128_1(Operators_I8x16_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i16x8_relaxed_q15mulr_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _RelaxedQ15MulRS)))
var _i16x8_relaxed_laneselect = Operators_VecTernary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i32x4_relaxed_trunc_f32x4_s = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedTruncSF32x4)))
var _i32x4_relaxed_trunc_f32x4_u = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedTruncUF32x4)))
var _i32x4_relaxed_trunc_f64x2_s_zero = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedTruncSZeroF64x2)))
var _i32x4_relaxed_trunc_f64x2_u_zero = Operators_VecConvert_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedTruncUZeroF64x2)))
var _i32x4_relaxed_laneselect = Operators_VecTernary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i64x2_relaxed_laneselect = Operators_VecTernary_1(Operators_V128_1(Operators_I64x2_1( /*V128Op.*/ _RelaxedLaneselect)))
var _f32x4_relaxed_madd = Operators_VecTernary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _RelaxedMadd)))
var _f32x4_relaxed_nmadd = Operators_VecTernary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _RelaxedNmadd)))
var _f32x4_relaxed_min = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _RelaxedMin)))
var _f32x4_relaxed_max = Operators_VecBinary_1(Operators_V128_1(Operators_F32x4_1( /*V128Op.*/ _RelaxedMax)))
var _f64x2_relaxed_madd = Operators_VecTernary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _RelaxedMadd)))
var _f64x2_relaxed_nmadd = Operators_VecTernary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _RelaxedNmadd)))
var _f64x2_relaxed_min = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _RelaxedMin)))
var _f64x2_relaxed_max = Operators_VecBinary_1(Operators_V128_1(Operators_F64x2_1( /*V128Op.*/ _RelaxedMax)))
var _i16x8_relaxed_dot_i8x16_i7x16_s = Operators_VecBinary_1(Operators_V128_1(Operators_I16x8_1( /*V128Op.*/ _RelaxedDot)))
var _i32x4_relaxed_dot_i8x16_i7x16_add_s = Operators_VecTernary_1(Operators_V128_1(Operators_I32x4_1( /*V128Op.*/ _RelaxedDotAccum)))

type ODecode_Stream struct {
	Name  string
	Bytes string
	Pos   TODO /* OInt Decode.ref (kind 3) */
}

func Decode_Bit_2(_i OInt, _n OInt) bool {
	__tmp1 := _operatorNotEq_2(_operatorland_2(_n, _operatorlsl_2(1, _i)), 0)
	return __tmp1
}

func Bit_1(_i OInt) func(_n OInt) bool {
	return func(_n OInt) bool {
		return Decode_Bit_2(_i, _n)
	}
}

var Decode_Bit = Decode_Bit_2

func Decode_Byte_1(_s ODecode_Stream) OInt {
	__tmp1 := Decode_Get_1(_s)
	return __tmp1
}

var Decode_Byte = Decode_Byte_1

func Decode_Word16_1(_s ODecode_Stream) OInt {
	__tmp1 := Decode_Byte_1(_s)
	_lo := __tmp1
	__tmp4 := Decode_Byte_1(_s)
	_hi := __tmp4
	__tmp7 := _operatorPlus_2(_operatorlsl_2(_hi, 8), _lo)
	return __tmp7
}

var Decode_Word16 = Decode_Word16_1

func Decode_Word32_1(_s ODecode_Stream) OInt32 {
	__tmp1 := Decode_Int32_ofInt_1(Decode_Word16_1(_s))
	_lo := __tmp1
	__tmp5 := Decode_Int32_ofInt_1(Decode_Word16_1(_s))
	_hi := __tmp5
	__tmp9 := Int32_Add_2(_lo, Int32_ShiftLeft_2(_hi, 16))
	return __tmp9
}

var Decode_Word32 = Decode_Word32_1

func Decode_Word64_1(_s ODecode_Stream) OInt64 {
	__tmp1 := Decode_I64Convert_extendI32U_1(Decode_Word32_1(_s))
	_lo := __tmp1
	__tmp5 := Decode_I64Convert_extendI32U_1(Decode_Word32_1(_s))
	_hi := __tmp5
	__tmp9 := Int64_Add_2(_lo, Int64_ShiftLeft_2(_hi, 32))
	return __tmp9
}

var Decode_Word64 = Decode_Word64_1

func Decode_UN_2(_n OInt, _s ODecode_Stream) OInt64 {
	__tmp1 := Decode_Require_4(_operatorGt_2(_n, 0), _s, Decode_Pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := Decode_Byte_1(_s)
	_b := __tmp7
	__tmp10 := Decode_Require_4(_operatorOr_2(_operatorGte_2(_n, 7), _operatorLt_2(_operatorland_2(_b, 0x7f), _operatorlsl_2(1, _n))), _s, _operatorMinus_2(Decode_Pos_1(_s), 1), "integer too large")
	_ = __tmp10
	__tmp23 := Decode_Int64_ofInt_1(_operatorland_2(_b, 0x7f))
	_x := __tmp23
	var __tmp27 OInt64
	if _operatorEq_2(_operatorland_2(_b, 0x80), 0) {
		__tmp31 := _x
		__tmp27 = __tmp31
	} else {
		__tmp32 := Int64_Logor_2(_x, Int64_ShiftLeft_2(Int64_UN_2(_operatorMinus_2(_n, 7), _s), 7))
		__tmp27 = __tmp32
	}
	return __tmp27

}

func UN_1(_n OInt) func(_s ODecode_Stream) OInt64 {
	return func(_s ODecode_Stream) OInt64 {
		return Decode_UN_2(_n, _s)
	}
}

var Decode_UN = Decode_UN_2

func Decode_SN_2(_n OInt, _s ODecode_Stream) OInt64 {
	__tmp1 := Decode_Require_4(_operatorGt_2(_n, 0), _s, Decode_Pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := Decode_Byte_1(_s)
	_b := __tmp7
	__tmp10 := _operatorland_2(_operatorlsl_2(-(1), _operatorMinus_2(_n, 1)), 0x7f)
	_mask := __tmp10
	__tmp15 := Decode_Require_4(_operatorOr_2(_operatorGte_2(_n, 7), _operatorOr_2(_operatorEq_2(_operatorland_2(_b, _mask), 0), _operatorEq_2(_operatorland_2(_b, _mask), _mask))), _s, _operatorMinus_2(Decode_Pos_1(_s), 1), "integer too large")
	_ = __tmp15
	__tmp33 := Decode_Int64_ofInt_1(_operatorland_2(_b, 0x7f))
	_x := __tmp33
	var __tmp37 OInt64
	if _operatorEq_2(_operatorland_2(_b, 0x80), 0) {
		var __tmp41 OInt64
		if _operatorEq_2(_operatorland_2(_b, 0x40), 0) {
			__tmp45 := _x
			__tmp41 = __tmp45
		} else {
			__tmp46 := Int64_Logor_2(_x, Int64_Logxor_2(-(1), 0x7f))
			__tmp41 = __tmp46
		}
		__tmp37 = __tmp41
	} else {
		__tmp49 := Int64_Logor_2(_x, Int64_ShiftLeft_2(Int64_SN_2(_operatorMinus_2(_n, 7), _s), 7))
		__tmp37 = __tmp49
	}
	return __tmp37

}

func SN_1(_n OInt) func(_s ODecode_Stream) OInt64 {
	return func(_s ODecode_Stream) OInt64 {
		return Decode_SN_2(_n, _s)
	}
}

var Decode_SN = Decode_SN_2

func Decode_U32_1(_s ODecode_Stream) OInt32 {
	__tmp1 := Decode_Int64_toInt32_1(Decode_UN_2(32, _s))
	return __tmp1
}

var Decode_U32 = Decode_U32_1

func Decode_U64_1(_s ODecode_Stream) OInt64 {
	__tmp1 := Decode_UN_2(64, _s)
	return __tmp1
}

var Decode_U64 = Decode_U64_1

func Decode_S7_1(_s ODecode_Stream) OInt {
	__tmp1 := Decode_Int64_toInt_1(Decode_SN_2(7, _s))
	return __tmp1
}

var Decode_S7 = Decode_S7_1

func Decode_S32_1(_s ODecode_Stream) OInt32 {
	__tmp1 := Decode_Int64_toInt32_1(Decode_SN_2(32, _s))
	return __tmp1
}

var Decode_S32 = Decode_S32_1

func Decode_S33_1(_s ODecode_Stream) OInt32 {
	__tmp1 := Decode_I32Convert_wrapI64_1(Decode_SN_2(33, _s))
	return __tmp1
}

var Decode_S33 = Decode_S33_1

func Decode_S64_1(_s ODecode_Stream) OInt64 {
	__tmp1 := Decode_SN_2(64, _s)
	return __tmp1
}

var Decode_S64 = Decode_S64_1

func Decode_F32_1(_s ODecode_Stream) ODecode_F32_T {
	__tmp1 := Decode_F32_ofBits_1(Decode_Word32_1(_s))
	return __tmp1
}

var Decode_F32 = Decode_F32_1

func Decode_F64_1(_s ODecode_Stream) ODecode_F64_T {
	__tmp1 := Decode_F64_ofBits_1(Decode_Word64_1(_s))
	return __tmp1
}

var Decode_F64 = Decode_F64_1

func Decode_V128_1(_s ODecode_Stream) ODecode_V128_T {
	__tmp1 := Decode_V128_ofBits_1(Decode_GetString_2(16, _s))
	return __tmp1
}

var Decode_V128 = Decode_V128_1

func Decode_Len32_1(_s ODecode_Stream) OInt {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	__tmp4 := Decode_U32_1(_s)
	_n := __tmp4
	var __tmp7 OInt
	if Decode_I32_leU_2(_n, Decode_Int32_ofInt_1(_operatorMinus_2(Decode_Len_1(_s), _pos))) {
		__tmp15 := Decode_Int32_toInt_1(_n)
		__tmp7 = __tmp15
	} else {
		__tmp17 := Decode_Error_3(_s, _pos, "length out of bounds")
		__tmp7 = __tmp17
	}
	return __tmp7
}

var Decode_Len32 = Decode_Len32_1

func Decode_String_1(_s ODecode_Stream) string {
	__tmp1 := Decode_Len32_1(_s)
	_n := __tmp1
	__tmp4 := Decode_GetString_2(_n, _s)
	return __tmp4
}

var Decode_String = Decode_String_1

func Decode_Zero_1(_s ODecode_Stream) ODecode_Unit {
	__tmp1 := Decode_Expect_3(0x00, _s, "zero byte expected")
	return __tmp1
}

var Decode_Zero = Decode_Zero_1

func Decode_Var_1(_s ODecode_Stream) OTypes_LocalIdx {
	__tmp1 := Decode_U32_1(_s)
	return __tmp1
}

var Decode_Var = Decode_Var_1

func Decode_Mutability_1(_s ODecode_Stream) OTypes_Mut {
	var __tmp1 OTypes_Mut
	__tmp2 := Decode_Byte_1(_s)
	if __tmp2 == 0 {
		__tmp5 := _Cons
		__tmp1 = __tmp5
	} else if __tmp2 == 1 {
		__tmp7 := _Var
		__tmp1 = __tmp7
	} else if __ := __tmp2; true {
		_ = __
		__tmp11 := Decode_Error_3(_s, _operatorMinus_2(Decode_Pos_1(_s), 1), "malformed mutability")
		__tmp1 = __tmp11
	}
	return __tmp1
}

var Decode_Mutability = Decode_Mutability_1

func Decode_VarType_2(_var func(ODecode_Stream) OTypes_LocalIdx, _s ODecode_Stream) OTypes_Var {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	var __tmp4 OTypes_Var
	__tmp5 := Decode_Var_1(_s)
	if _i := __tmp5; _operatorGte_2(_i, 0) {
		_ = _i
		__tmp12 := Decode_StatX_1(_i)
		__tmp4 = __tmp12
	} else if __ := __tmp5; true {
		_ = __
		__tmp16 := Decode_Error_3(_s, _pos, "malformed type index")
		__tmp4 = __tmp16
	}
	return __tmp4
}

func VarType_1(_var func(ODecode_Stream) OTypes_LocalIdx) func(_s ODecode_Stream) OTypes_Var {
	return func(_s ODecode_Stream) OTypes_Var {
		return Decode_VarType_2(_var, _s)
	}
}

var Decode_VarType = Decode_VarType_2

func Decode_NumType_1(_s ODecode_Stream) OTypes_NumType {
	var __tmp1 OTypes_NumType
	__tmp2 := Decode_S7_1(_s)
	if __tmp2 == -0x01 {
		__tmp5 := _I32T
		__tmp1 = __tmp5
	} else if __tmp2 == -0x02 {
		__tmp7 := _I64T
		__tmp1 = __tmp7
	} else if __tmp2 == -0x03 {
		__tmp9 := _F32T
		__tmp1 = __tmp9
	} else if __tmp2 == -0x04 {
		__tmp11 := _F64T
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp15 := Decode_Error_3(_s, _operatorMinus_2(Decode_Pos_1(_s), 1), "malformed number type")
		__tmp1 = __tmp15
	}
	return __tmp1
}

var Decode_NumType = Decode_NumType_1

func Decode_VecType_1(_s ODecode_Stream) OTypes_VecType {
	var __tmp1 OTypes_VecType
	__tmp2 := Decode_S7_1(_s)
	if __tmp2 == -0x05 {
		__tmp5 := _V128T
		__tmp1 = __tmp5
	} else if __ := __tmp2; true {
		_ = __
		__tmp9 := Decode_Error_3(_s, _operatorMinus_2(Decode_Pos_1(_s), 1), "malformed vector type")
		__tmp1 = __tmp9
	}
	return __tmp1
}

var Decode_VecType = Decode_VecType_1

func Decode_HeapType_1(_s ODecode_Stream) OTypes_HeapType {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	__tmp4 := Decode_Either_2([]func(ODecode_Stream) OTypes_HeapType{func(_s ODecode_Stream) OTypes_HeapType {
		__tmp5 := Decode_VarHT_1(Decode_VarType_2(_s33, _s))
		return __tmp5
	}, func(_s ODecode_Stream) OTypes_HeapType {
		var __tmp9 OTypes_HeapType
		__tmp10 := Decode_S7_1(_s)
		if __tmp10 == -0x0c {
			__tmp13 := _NoExnHT
			__tmp9 = __tmp13
		} else if __tmp10 == -0x0d {
			__tmp15 := _NoFuncHT
			__tmp9 = __tmp15
		} else if __tmp10 == -0x0e {
			__tmp17 := _NoExternHT
			__tmp9 = __tmp17
		} else if __tmp10 == -0x0f {
			__tmp19 := _NoneHT
			__tmp9 = __tmp19
		} else if __tmp10 == -0x10 {
			__tmp21 := _FuncHT
			__tmp9 = __tmp21
		} else if __tmp10 == -0x11 {
			__tmp23 := _ExternHT
			__tmp9 = __tmp23
		} else if __tmp10 == -0x12 {
			__tmp25 := _AnyHT
			__tmp9 = __tmp25
		} else if __tmp10 == -0x13 {
			__tmp27 := _EqHT
			__tmp9 = __tmp27
		} else if __tmp10 == -0x14 {
			__tmp29 := _I31HT
			__tmp9 = __tmp29
		} else if __tmp10 == -0x15 {
			__tmp31 := _StructHT
			__tmp9 = __tmp31
		} else if __tmp10 == -0x16 {
			__tmp33 := _ArrayHT
			__tmp9 = __tmp33
		} else if __tmp10 == -0x17 {
			__tmp35 := _ExnHT
			__tmp9 = __tmp35
		} else if __ := __tmp10; true {
			_ = __
			__tmp39 := Decode_Error_3(_s, _pos, "malformed heap type")
			__tmp9 = __tmp39
		}
		return __tmp9
	}}, _s)
	return __tmp4
}

var Decode_HeapType = Decode_HeapType_1

func Decode_RefType_1(_s ODecode_Stream) struct {
	F0 OTypes_Null
	F1 OTypes_HeapType
} {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	var __tmp4 struct {
		F0 OTypes_Null
		F1 OTypes_HeapType
	}
	__tmp5 := Decode_S7_1(_s)
	if __tmp5 == -0x0c {
		__tmp8 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _NoExnHT}
		__tmp4 = __tmp8
	} else if __tmp5 == -0x0d {
		__tmp13 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _NoFuncHT}
		__tmp4 = __tmp13
	} else if __tmp5 == -0x0e {
		__tmp18 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _NoExternHT}
		__tmp4 = __tmp18
	} else if __tmp5 == -0x0f {
		__tmp23 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _NoneHT}
		__tmp4 = __tmp23
	} else if __tmp5 == -0x10 {
		__tmp28 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _FuncHT}
		__tmp4 = __tmp28
	} else if __tmp5 == -0x11 {
		__tmp33 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _ExternHT}
		__tmp4 = __tmp33
	} else if __tmp5 == -0x12 {
		__tmp38 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _AnyHT}
		__tmp4 = __tmp38
	} else if __tmp5 == -0x13 {
		__tmp43 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _EqHT}
		__tmp4 = __tmp43
	} else if __tmp5 == -0x14 {
		__tmp48 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _I31HT}
		__tmp4 = __tmp48
	} else if __tmp5 == -0x15 {
		__tmp53 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _StructHT}
		__tmp4 = __tmp53
	} else if __tmp5 == -0x16 {
		__tmp58 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _ArrayHT}
		__tmp4 = __tmp58
	} else if __tmp5 == -0x17 {
		__tmp63 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, _ExnHT}
		__tmp4 = __tmp63
	} else if __tmp5 == -0x1c {
		__tmp68 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_NoNull, Decode_HeapType_1(_s)}
		__tmp4 = __tmp68
	} else if __tmp5 == -0x1d {
		__tmp73 := struct {
			F0 OTypes_Null
			F1 OTypes_HeapType
		}{_Null, Decode_HeapType_1(_s)}
		__tmp4 = __tmp73
	} else if __ := __tmp5; true {
		_ = __
		__tmp80 := Decode_Error_3(_s, _pos, "malformed reference type")
		__tmp4 = __tmp80
	}
	return __tmp4
}

var Decode_RefType = Decode_RefType_1

func Decode_ValType_1(_s ODecode_Stream) OTypes_ValType {
	__tmp1 := Decode_Either_2([]func(ODecode_Stream) OTypes_ValType{func(_s ODecode_Stream) OTypes_ValType {
		__tmp2 := Decode_NumT_1(Decode_NumType_1(_s))
		return __tmp2
	}, func(_s ODecode_Stream) OTypes_ValType {
		__tmp5 := Decode_VecT_1(Decode_VecType_1(_s))
		return __tmp5
	}, func(_s ODecode_Stream) OTypes_ValType {
		__tmp8 := Decode_RefT_1(Decode_RefType_1(_s))
		return __tmp8
	}}, _s)
	return __tmp1
}

var Decode_ValType = Decode_ValType_1

func Decode_ResultType_1(_s ODecode_Stream) []OTypes_ValType {
	__tmp1 := Decode_Vec_2(_val_type, _s)
	return __tmp1
}

var Decode_ResultType = Decode_ResultType_1

func Decode_PackType_1(_s ODecode_Stream) ODecode_Pack_PackSize {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	var __tmp4 ODecode_Pack_PackSize
	__tmp5 := Decode_S7_1(_s)
	if __tmp5 == -0x08 {
		__tmp8 := /*Pack.*/ _Pack8
		__tmp4 = __tmp8
	} else if __tmp5 == -0x09 {
		__tmp10 := /*Pack.*/ _Pack16
		__tmp4 = __tmp10
	} else if __ := __tmp5; true {
		_ = __
		__tmp14 := Decode_Error_3(_s, _pos, "malformed storage type")
		__tmp4 = __tmp14
	}
	return __tmp4
}

var Decode_PackType = Decode_PackType_1

func Decode_StorageType_1(_s ODecode_Stream) OTypes_StorageType {
	__tmp1 := Decode_Either_2([]func(ODecode_Stream) OTypes_StorageType{func(_s ODecode_Stream) OTypes_StorageType {
		__tmp2 := Decode_ValStorageT_1(Decode_ValType_1(_s))
		return __tmp2
	}, func(_s ODecode_Stream) OTypes_StorageType {
		__tmp5 := Decode_PackStorageT_1(Decode_PackType_1(_s))
		return __tmp5
	}}, _s)
	return __tmp1
}

var Decode_StorageType = Decode_StorageType_1

func Decode_FieldType_1(_s ODecode_Stream) OTypes_FieldType {
	__tmp1 := Decode_StorageType_1(_s)
	_t := __tmp1
	__tmp4 := Decode_Mutability_1(_s)
	_mut := __tmp4
	__tmp7 := Decode_FieldT_1(struct {
		F0 OTypes_Mut
		F1 OTypes_StorageType
	}{_mut, _t})
	return __tmp7
}

var Decode_FieldType = Decode_FieldType_1

func Decode_StructType_1(_s ODecode_Stream) OTypes_StructType {
	__tmp1 := Decode_StructT_1(Decode_Vec_2(_field_type, _s))
	return __tmp1
}

var Decode_StructType = Decode_StructType_1

func Decode_ArrayType_1(_s ODecode_Stream) OTypes_ArrayType {
	__tmp1 := Decode_ArrayT_1(Decode_FieldType_1(_s))
	return __tmp1
}

var Decode_ArrayType = Decode_ArrayType_1

func Decode_FuncType_1(_s ODecode_Stream) OTypes_FuncType {
	__tmp1 := Decode_ResultType_1(_s)
	_ts1 := __tmp1
	__tmp4 := Decode_ResultType_1(_s)
	_ts2 := __tmp4
	__tmp7 := Decode_FuncT_1(struct {
		F0 OTypes_ResultType
		F1 OTypes_ResultType
	}{_ts1, _ts2})
	return __tmp7
}

var Decode_FuncType = Decode_FuncType_1

func Decode_StrType_1(_s ODecode_Stream) OTypes_StrType {
	var __tmp1 OTypes_StrType
	__tmp2 := Decode_S7_1(_s)
	if __tmp2 == -0x20 {
		__tmp5 := Decode_DefFuncT_1(Decode_FuncType_1(_s))
		__tmp1 = __tmp5
	} else if __tmp2 == -0x21 {
		__tmp8 := Decode_DefStructT_1(Decode_StructType_1(_s))
		__tmp1 = __tmp8
	} else if __tmp2 == -0x22 {
		__tmp11 := Decode_DefArrayT_1(Decode_ArrayType_1(_s))
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp16 := Decode_Error_3(_s, _operatorMinus_2(Decode_Pos_1(_s), 1), "malformed definition type")
		__tmp1 = __tmp16
	}
	return __tmp1
}

var Decode_StrType = Decode_StrType_1

func Decode_SubType_1(_s ODecode_Stream) OTypes_SubType {
	var __tmp1 OTypes_SubType
	__tmp2 := Decode_Peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x30), 0x7f))) {
		__tmp9 := Decode_Skip_2(1, _s)
		_ = __tmp9
		__tmp11 := Decode_Vec_2(Decode_VarType_1(_u32), _s)
		_xs := __tmp11
		__tmp16 := Decode_SubT_1(struct {
			F0 OTypes_Final
			F1 []OTypes_HeapType
			F2 OTypes_StrType
		}{_NoFinal, Decode_List_map_2(func(_x OTypes_Var) OTypes_HeapType {
			__tmp21 := Decode_VarHT_1(_x)
			return __tmp21
		}, _xs), Decode_StrType_1(_s)})

		__tmp1 = __tmp16
	} else if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x31), 0x7f))) {
		__tmp30 := Decode_Skip_2(1, _s)
		_ = __tmp30
		__tmp32 := Decode_Vec_2(Decode_VarType_1(_u32), _s)
		_xs := __tmp32
		__tmp37 := Decode_SubT_1(struct {
			F0 OTypes_Final
			F1 []OTypes_HeapType
			F2 OTypes_StrType
		}{_Final, Decode_List_map_2(func(_x OTypes_Var) OTypes_HeapType {
			__tmp42 := Decode_VarHT_1(_x)
			return __tmp42
		}, _xs), Decode_StrType_1(_s)})

		__tmp1 = __tmp37
	} else if __ := __tmp2; true {
		_ = __
		__tmp49 := Decode_SubT_1(struct {
			F0 OTypes_Final
			F1 []OTypes_HeapType
			F2 OTypes_StrType
		}{_Final, []OTypes_HeapType{}, Decode_StrType_1(_s)})
		__tmp1 = __tmp49
	}
	return __tmp1
}

var Decode_SubType = Decode_SubType_1

func Decode_RecType_1(_s ODecode_Stream) OTypes_RecType {
	var __tmp1 OTypes_RecType
	__tmp2 := Decode_Peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x32), 0x7f))) {
		__tmp9 := Decode_Skip_2(1, _s)
		_ = __tmp9
		__tmp11 := Decode_RecT_1(Decode_Vec_2(_sub_type, _s))

		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp17 := Decode_RecT_1([]OTypes_SubType{Decode_SubType_1(_s)})
		__tmp1 = __tmp17
	}
	return __tmp1
}

var Decode_RecType = Decode_RecType_1

func Decode_Limits_2(_uN func(ODecode_Stream) OInt64, _s ODecode_Stream) struct {
	F0 OTypes_AddrType
	F1 OTypes_Limits
} {
	__tmp1 := Decode_Byte_1(_s)
	_flags := __tmp1
	__tmp4 := Decode_Require_4(_operatorEq_2(_operatorland_2(_flags, 0xfa), 0), _s, _operatorMinus_2(Decode_Pos_1(_s), 1), "malformed limits flags")
	_ = __tmp4
	__tmp12 := _operatorEq_2(_operatorland_2(_flags, 1), 1)
	_has_max := __tmp12
	var __tmp16 OTypes_AddrType
	if _operatorEq_2(_operatorland_2(_flags, 4), 4) {
		__tmp20 := _I64AT
		__tmp16 = __tmp20
	} else {
		__tmp22 := _I32AT
		__tmp16 = __tmp22
	}
	_at := __tmp16
	__tmp25 := Decode_UN_1(_s)
	_min := __tmp25
	__tmp28 := Decode_Opt_3(_uN, _has_max, _s)
	_max := __tmp28
	return struct {
		F0 OTypes_AddrType
		F1 OTypes_Limits
	}{_at, nil /* TODO: record_expression */}

}

func Limits_1(_uN func(ODecode_Stream) OInt64) func(_s ODecode_Stream) struct {
	F0 OTypes_AddrType
	F1 OTypes_Limits
} {
	return func(_s ODecode_Stream) struct {
		F0 OTypes_AddrType
		F1 OTypes_Limits
	} { return Decode_Limits_2(_uN, _s) }
}

var Decode_Limits = Decode_Limits_2

func Decode_TableType_1(_s ODecode_Stream) OTypes_TableType {
	__tmp1 := Decode_RefType_1(_s)
	_t := __tmp1
	__tmp4 := Decode_Limits_2(_u64, _s)
	_at, _lim := __unpack_Types_addr_type___Types_limits(__tmp4)
	__tmp9 := Decode_TableT_1(struct {
		F0 OTypes_AddrType
		F1 OTypes_Limits
		F2 OTypes_RefType
	}{_at, _lim, _t})
	return __tmp9
}

var Decode_TableType = Decode_TableType_1

func Decode_GlobalType_1(_s ODecode_Stream) OTypes_GlobalType {
	__tmp1 := Decode_ValType_1(_s)
	_t := __tmp1
	__tmp4 := Decode_Mutability_1(_s)
	_mut := __tmp4
	__tmp7 := Decode_GlobalT_1(struct {
		F0 OTypes_Mut
		F1 OTypes_ValType
	}{_mut, _t})
	return __tmp7
}

var Decode_GlobalType = Decode_GlobalType_1

func Decode_TagType_1(_s ODecode_Stream) TODO /* Types.local_idx Decode.phrase (kind 3) */ {
	__tmp1 := Decode_Zero_1(_s)
	_ = __tmp1
	__tmp3 := Decode_At_2(_var, _s)
	return __tmp3

}

var Decode_TagType = Decode_TagType_1

func Decode_Op_1(_s ODecode_Stream) OInt {
	__tmp1 := Decode_Byte_1(_s)
	return __tmp1
}

var Decode_Op = Decode_Op_1

func Decode_End_1(_s ODecode_Stream) ODecode_Unit {
	__tmp1 := Decode_Expect_3(0x0b, _s, "END opcode expected")
	return __tmp1
}

var Decode_End = Decode_End_1

func Decode_Memop_1(_s ODecode_Stream) struct {
	F0 TODO /* Types.local_idx Decode.phrase (kind 3) */
	F1 OInt
	F2 OInt64
} {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	__tmp4 := Decode_U32_1(_s)
	_flags := __tmp4
	__tmp7 := Decode_Require_4(Decode_I32_ltU_2(_flags, 0x80), _s, _pos, "malformed memop flags")
	_ = __tmp7
	__tmp12 := _operatorNotEq_2(Decode_Int32_logand_2(_flags, 0x40), 0)
	_has_var := __tmp12
	var __tmp16 TODO /* Types.local_idx Decode.phrase (kind 3) */
	if _has_var {
		__tmp18 := Decode_At_2(_var, _s)
		__tmp16 = __tmp18
	} else {
		__tmp21 := _operatorAtAt_2(0, _no_region)
		__tmp16 = __tmp21
	}
	_x := __tmp16
	__tmp24 := Int32_ToInt_1(Int32_Logand_2(_flags, 0x3f))
	_align := __tmp24
	__tmp28 := Decode_U64_1(_s)
	_offset := __tmp28
	return struct {
		F0 TODO /* Types.local_idx Decode.phrase (kind 3) */
		F1 OInt
		F2 OInt64
	}{_x, _align, _offset}

}

var Decode_Memop = Decode_Memop_1

func Decode_BlockType_1(_s ODecode_Stream) OAst_BlockType {
	__tmp1 := Decode_Either_2([]func(ODecode_Stream) OAst_BlockType{func(_s ODecode_Stream) OAst_BlockType {
		__tmp2 := Decode_VarBlockType_1(Decode_At_2(func(_s ODecode_Stream) OTypes_LocalIdx {
			__tmp4 := Decode_AsStatVar_1(Decode_VarType_2(_s33, _s))
			return __tmp4
		}, _s))
		return __tmp2
	}, func(_s ODecode_Stream) OAst_BlockType {
		__tmp9 := Decode_Expect_3(0x40, _s, "")
		_ = __tmp9
		__tmp11 := Decode_ValBlockType_1(_None)
		return __tmp11

	}, func(_s ODecode_Stream) OAst_BlockType {
		__tmp14 := Decode_ValBlockType_1(Decode_Some_1(Decode_ValType_1(_s)))
		return __tmp14
	}}, _s)
	return __tmp1
}

var Decode_BlockType = Decode_BlockType_1

func Decode_Local_1(_s ODecode_Stream) struct {
	F0 OTypes_LocalIdx
	F1 TODO /* Ast.local' Decode.phrase (kind 3) */
} {
	__tmp1 := Decode_U32_1(_s)
	_n := __tmp1
	__tmp4 := Decode_At_2(_val_type, _s)
	_t := __tmp4
	return struct {
		F0 OTypes_LocalIdx
		F1 TODO /* Ast.local' Decode.phrase (kind 3) */
	}{_n, _operatorAtAt_2(nil /* TODO: record_expression */, nil /* TODO: field_get_expression */)}
}

var Decode_Local = Decode_Local_1

func Decode_Instr_1(_s ODecode_Stream) OAst_Instr_ {
	__tmp1 := Decode_Pos_1(_s)
	_pos := __tmp1
	var __tmp4 OAst_Instr_
	__tmp5 := Decode_Op_1(_s)
	if __tmp5 == 0x00 {
		__tmp8 := _unreachable
		__tmp4 = __tmp8
	} else if __tmp5 == 0x01 {
		__tmp9 := _nop
		__tmp4 = __tmp9
	} else if __tmp5 == 0x02 {
		__tmp10 := Decode_BlockType_1(_s)
		_bt := __tmp10
		__tmp13 := Decode_InstrBlock_1(_s)
		_es_ := __tmp13
		__tmp16 := Decode_End_1(_s)
		_ = __tmp16
		__tmp18 := Decode_Block_2(_bt, _es_)

		__tmp4 = __tmp18
	} else if __tmp5 == 0x03 {
		__tmp21 := Decode_BlockType_1(_s)
		_bt := __tmp21
		__tmp24 := Decode_InstrBlock_1(_s)
		_es_ := __tmp24
		__tmp27 := Decode_End_1(_s)
		_ = __tmp27
		__tmp29 := Decode_Loop_2(_bt, _es_)

		__tmp4 = __tmp29
	} else if __tmp5 == 0x04 {
		__tmp32 := Decode_BlockType_1(_s)
		_bt := __tmp32
		__tmp35 := Decode_InstrBlock_1(_s)
		_es1 := __tmp35
		var __tmp38 OAst_Instr_
		if _operatorEq_2(Decode_Peek_1(_s), Decode_Some_1(0x05)) {
			__tmp43 := Decode_Expect_3(0x05, _s, "ELSE or END opcode expected")
			_ = __tmp43
			__tmp45 := Decode_InstrBlock_1(_s)
			_es2 := __tmp45
			__tmp48 := Decode_End_1(_s)
			_ = __tmp48
			__tmp50 := Decode_If_3(_bt, _es1, _es2)

			__tmp38 = __tmp50
		} else {
			__tmp54 := Decode_End_1(_s)
			_ = __tmp54
			__tmp56 := Decode_If_3(_bt, _es1, []OAst_Instr{})

			__tmp38 = __tmp56
		}
		__tmp4 = __tmp38
	} else if __tmp5 == 0x05 {
		__tmp59 := Decode_Error_3(_s, _pos, "misplaced ELSE opcode")
		__tmp4 = __tmp59
	} else if __tmp5 == 0x06 || __tmp5 == 0x07 {
		_b := __tmp5
		__tmp63 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp63
	} else if __tmp5 == 0x08 {
		__tmp67 := Decode_Throw_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp67
	} else if __tmp5 == 0x09 {
		_b := __tmp5
		__tmp72 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp72
	} else if __tmp5 == 0x0a {
		__tmp76 := _throw_ref
		__tmp4 = __tmp76
	} else if __tmp5 == 0x0b {
		__tmp77 := Decode_Error_3(_s, _pos, "misplaced END opcode")
		__tmp4 = __tmp77
	} else if __tmp5 == 0x0c {
		__tmp80 := Decode_Br_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp80
	} else if __tmp5 == 0x0d {
		__tmp84 := Decode_BrIf_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp84
	} else if __tmp5 == 0x0e {
		__tmp88 := Decode_Vec_2(Decode_At_1(_var), _s)
		_xs := __tmp88
		__tmp93 := Decode_At_2(_var, _s)
		_x := __tmp93
		__tmp97 := Decode_BrTable_2(_xs, _x)
		__tmp4 = __tmp97
	} else if __tmp5 == 0x0f {
		__tmp100 := _return
		__tmp4 = __tmp100
	} else if __tmp5 == 0x10 {
		__tmp101 := Decode_Call_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp101
	} else if __tmp5 == 0x11 {
		__tmp105 := Decode_At_2(_var, _s)
		_y := __tmp105
		__tmp109 := Decode_At_2(_var, _s)
		_x := __tmp109
		__tmp113 := Decode_CallIndirect_2(_x, _y)
		__tmp4 = __tmp113
	} else if __tmp5 == 0x12 {
		__tmp116 := Decode_ReturnCall_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp116
	} else if __tmp5 == 0x13 {
		__tmp120 := Decode_At_2(_var, _s)
		_y := __tmp120
		__tmp124 := Decode_At_2(_var, _s)
		_x := __tmp124
		__tmp128 := Decode_ReturnCallIndirect_2(_x, _y)
		__tmp4 = __tmp128
	} else if __tmp5 == 0x14 {
		__tmp131 := Decode_CallRef_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp131
	} else if __tmp5 == 0x15 {
		__tmp135 := Decode_ReturnCallRef_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp135
	} else if __tmp5 == 0x16 || __tmp5 == 0x17 || __tmp5 == 0x18 || __tmp5 == 0x19 {
		_b := __tmp5
		__tmp140 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp140
	} else if __tmp5 == 0x1a {
		__tmp144 := _drop
		__tmp4 = __tmp144
	} else if __tmp5 == 0x1b {
		__tmp145 := Decode_Select_1(_None)
		__tmp4 = __tmp145
	} else if __tmp5 == 0x1c {
		__tmp148 := Decode_Select_1(Decode_Some_1(Decode_Vec_2(_val_type, _s)))
		__tmp4 = __tmp148
	} else if __tmp5 == 0x1d || __tmp5 == 0x1e {
		_b := __tmp5
		__tmp154 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp154
	} else if __tmp5 == 0x1f {
		__tmp158 := Decode_BlockType_1(_s)
		_bt := __tmp158
		__tmp161 := Decode_Vec_2(Decode_At_1(_catch), _s)
		_cs := __tmp161
		__tmp166 := Decode_InstrBlock_1(_s)
		_es := __tmp166
		__tmp169 := Decode_End_1(_s)
		_ = __tmp169
		__tmp171 := Decode_TryTable_3(_bt, _cs, _es)

		__tmp4 = __tmp171
	} else if __tmp5 == 0x20 {
		__tmp175 := Decode_LocalGet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp175
	} else if __tmp5 == 0x21 {
		__tmp179 := Decode_LocalSet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp179
	} else if __tmp5 == 0x22 {
		__tmp183 := Decode_LocalTee_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp183
	} else if __tmp5 == 0x23 {
		__tmp187 := Decode_GlobalGet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp187
	} else if __tmp5 == 0x24 {
		__tmp191 := Decode_GlobalSet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp191
	} else if __tmp5 == 0x25 {
		__tmp195 := Decode_TableGet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp195
	} else if __tmp5 == 0x26 {
		__tmp199 := Decode_TableSet_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp199
	} else if __tmp5 == 0x27 {
		_b := __tmp5
		__tmp204 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp204
	} else if __tmp5 == 0x28 {
		__tmp208 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp208)
		__tmp213 := Decode_I32Load_3(_x, _a, _o)
		__tmp4 = __tmp213
	} else if __tmp5 == 0x29 {
		__tmp217 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp217)
		__tmp222 := Decode_I64Load_3(_x, _a, _o)
		__tmp4 = __tmp222
	} else if __tmp5 == 0x2a {
		__tmp226 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp226)
		__tmp231 := Decode_F32Load_3(_x, _a, _o)
		__tmp4 = __tmp231
	} else if __tmp5 == 0x2b {
		__tmp235 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp235)
		__tmp240 := Decode_F64Load_3(_x, _a, _o)
		__tmp4 = __tmp240
	} else if __tmp5 == 0x2c {
		__tmp244 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp244)
		__tmp249 := Decode_I32Load8S_3(_x, _a, _o)
		__tmp4 = __tmp249
	} else if __tmp5 == 0x2d {
		__tmp253 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp253)
		__tmp258 := Decode_I32Load8U_3(_x, _a, _o)
		__tmp4 = __tmp258
	} else if __tmp5 == 0x2e {
		__tmp262 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp262)
		__tmp267 := Decode_I32Load16S_3(_x, _a, _o)
		__tmp4 = __tmp267
	} else if __tmp5 == 0x2f {
		__tmp271 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp271)
		__tmp276 := Decode_I32Load16U_3(_x, _a, _o)
		__tmp4 = __tmp276
	} else if __tmp5 == 0x30 {
		__tmp280 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp280)
		__tmp285 := Decode_I64Load8S_3(_x, _a, _o)
		__tmp4 = __tmp285
	} else if __tmp5 == 0x31 {
		__tmp289 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp289)
		__tmp294 := Decode_I64Load8U_3(_x, _a, _o)
		__tmp4 = __tmp294
	} else if __tmp5 == 0x32 {
		__tmp298 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp298)
		__tmp303 := Decode_I64Load16S_3(_x, _a, _o)
		__tmp4 = __tmp303
	} else if __tmp5 == 0x33 {
		__tmp307 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp307)
		__tmp312 := Decode_I64Load16U_3(_x, _a, _o)
		__tmp4 = __tmp312
	} else if __tmp5 == 0x34 {
		__tmp316 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp316)
		__tmp321 := Decode_I64Load32S_3(_x, _a, _o)
		__tmp4 = __tmp321
	} else if __tmp5 == 0x35 {
		__tmp325 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp325)
		__tmp330 := Decode_I64Load32U_3(_x, _a, _o)
		__tmp4 = __tmp330
	} else if __tmp5 == 0x36 {
		__tmp334 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp334)
		__tmp339 := Decode_I32Store_3(_x, _a, _o)
		__tmp4 = __tmp339
	} else if __tmp5 == 0x37 {
		__tmp343 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp343)
		__tmp348 := Decode_I64Store_3(_x, _a, _o)
		__tmp4 = __tmp348
	} else if __tmp5 == 0x38 {
		__tmp352 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp352)
		__tmp357 := Decode_F32Store_3(_x, _a, _o)
		__tmp4 = __tmp357
	} else if __tmp5 == 0x39 {
		__tmp361 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp361)
		__tmp366 := Decode_F64Store_3(_x, _a, _o)
		__tmp4 = __tmp366
	} else if __tmp5 == 0x3a {
		__tmp370 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp370)
		__tmp375 := Decode_I32Store8_3(_x, _a, _o)
		__tmp4 = __tmp375
	} else if __tmp5 == 0x3b {
		__tmp379 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp379)
		__tmp384 := Decode_I32Store16_3(_x, _a, _o)
		__tmp4 = __tmp384
	} else if __tmp5 == 0x3c {
		__tmp388 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp388)
		__tmp393 := Decode_I64Store8_3(_x, _a, _o)
		__tmp4 = __tmp393
	} else if __tmp5 == 0x3d {
		__tmp397 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp397)
		__tmp402 := Decode_I64Store16_3(_x, _a, _o)
		__tmp4 = __tmp402
	} else if __tmp5 == 0x3e {
		__tmp406 := Decode_Memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp406)
		__tmp411 := Decode_I64Store32_3(_x, _a, _o)
		__tmp4 = __tmp411
	} else if __tmp5 == 0x3f {
		__tmp415 := Decode_MemorySize_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp415
	} else if __tmp5 == 0x40 {
		__tmp419 := Decode_MemoryGrow_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp419
	} else if __tmp5 == 0x41 {
		__tmp423 := Decode_I32Const_1(Decode_At_2(_s32, _s))
		__tmp4 = __tmp423
	} else if __tmp5 == 0x42 {
		__tmp427 := Decode_I64Const_1(Decode_At_2(_s64, _s))
		__tmp4 = __tmp427
	} else if __tmp5 == 0x43 {
		__tmp431 := Decode_F32Const_1(Decode_At_2(_f32, _s))
		__tmp4 = __tmp431
	} else if __tmp5 == 0x44 {
		__tmp435 := Decode_F64Const_1(Decode_At_2(_f64, _s))
		__tmp4 = __tmp435
	} else if __tmp5 == 0x45 {
		__tmp439 := _i32_eqz
		__tmp4 = __tmp439
	} else if __tmp5 == 0x46 {
		__tmp440 := _i32_eq
		__tmp4 = __tmp440
	} else if __tmp5 == 0x47 {
		__tmp441 := _i32_ne
		__tmp4 = __tmp441
	} else if __tmp5 == 0x48 {
		__tmp442 := _i32_lt_s
		__tmp4 = __tmp442
	} else if __tmp5 == 0x49 {
		__tmp443 := _i32_lt_u
		__tmp4 = __tmp443
	} else if __tmp5 == 0x4a {
		__tmp444 := _i32_gt_s
		__tmp4 = __tmp444
	} else if __tmp5 == 0x4b {
		__tmp445 := _i32_gt_u
		__tmp4 = __tmp445
	} else if __tmp5 == 0x4c {
		__tmp446 := _i32_le_s
		__tmp4 = __tmp446
	} else if __tmp5 == 0x4d {
		__tmp447 := _i32_le_u
		__tmp4 = __tmp447
	} else if __tmp5 == 0x4e {
		__tmp448 := _i32_ge_s
		__tmp4 = __tmp448
	} else if __tmp5 == 0x4f {
		__tmp449 := _i32_ge_u
		__tmp4 = __tmp449
	} else if __tmp5 == 0x50 {
		__tmp450 := _i64_eqz
		__tmp4 = __tmp450
	} else if __tmp5 == 0x51 {
		__tmp451 := _i64_eq
		__tmp4 = __tmp451
	} else if __tmp5 == 0x52 {
		__tmp452 := _i64_ne
		__tmp4 = __tmp452
	} else if __tmp5 == 0x53 {
		__tmp453 := _i64_lt_s
		__tmp4 = __tmp453
	} else if __tmp5 == 0x54 {
		__tmp454 := _i64_lt_u
		__tmp4 = __tmp454
	} else if __tmp5 == 0x55 {
		__tmp455 := _i64_gt_s
		__tmp4 = __tmp455
	} else if __tmp5 == 0x56 {
		__tmp456 := _i64_gt_u
		__tmp4 = __tmp456
	} else if __tmp5 == 0x57 {
		__tmp457 := _i64_le_s
		__tmp4 = __tmp457
	} else if __tmp5 == 0x58 {
		__tmp458 := _i64_le_u
		__tmp4 = __tmp458
	} else if __tmp5 == 0x59 {
		__tmp459 := _i64_ge_s
		__tmp4 = __tmp459
	} else if __tmp5 == 0x5a {
		__tmp460 := _i64_ge_u
		__tmp4 = __tmp460
	} else if __tmp5 == 0x5b {
		__tmp461 := _f32_eq
		__tmp4 = __tmp461
	} else if __tmp5 == 0x5c {
		__tmp462 := _f32_ne
		__tmp4 = __tmp462
	} else if __tmp5 == 0x5d {
		__tmp463 := _f32_lt
		__tmp4 = __tmp463
	} else if __tmp5 == 0x5e {
		__tmp464 := _f32_gt
		__tmp4 = __tmp464
	} else if __tmp5 == 0x5f {
		__tmp465 := _f32_le
		__tmp4 = __tmp465
	} else if __tmp5 == 0x60 {
		__tmp466 := _f32_ge
		__tmp4 = __tmp466
	} else if __tmp5 == 0x61 {
		__tmp467 := _f64_eq
		__tmp4 = __tmp467
	} else if __tmp5 == 0x62 {
		__tmp468 := _f64_ne
		__tmp4 = __tmp468
	} else if __tmp5 == 0x63 {
		__tmp469 := _f64_lt
		__tmp4 = __tmp469
	} else if __tmp5 == 0x64 {
		__tmp470 := _f64_gt
		__tmp4 = __tmp470
	} else if __tmp5 == 0x65 {
		__tmp471 := _f64_le
		__tmp4 = __tmp471
	} else if __tmp5 == 0x66 {
		__tmp472 := _f64_ge
		__tmp4 = __tmp472
	} else if __tmp5 == 0x67 {
		__tmp473 := _i32_clz
		__tmp4 = __tmp473
	} else if __tmp5 == 0x68 {
		__tmp474 := _i32_ctz
		__tmp4 = __tmp474
	} else if __tmp5 == 0x69 {
		__tmp475 := _i32_popcnt
		__tmp4 = __tmp475
	} else if __tmp5 == 0x6a {
		__tmp476 := _i32_add
		__tmp4 = __tmp476
	} else if __tmp5 == 0x6b {
		__tmp477 := _i32_sub
		__tmp4 = __tmp477
	} else if __tmp5 == 0x6c {
		__tmp478 := _i32_mul
		__tmp4 = __tmp478
	} else if __tmp5 == 0x6d {
		__tmp479 := _i32_div_s
		__tmp4 = __tmp479
	} else if __tmp5 == 0x6e {
		__tmp480 := _i32_div_u
		__tmp4 = __tmp480
	} else if __tmp5 == 0x6f {
		__tmp481 := _i32_rem_s
		__tmp4 = __tmp481
	} else if __tmp5 == 0x70 {
		__tmp482 := _i32_rem_u
		__tmp4 = __tmp482
	} else if __tmp5 == 0x71 {
		__tmp483 := _i32_and
		__tmp4 = __tmp483
	} else if __tmp5 == 0x72 {
		__tmp484 := _i32_or
		__tmp4 = __tmp484
	} else if __tmp5 == 0x73 {
		__tmp485 := _i32_xor
		__tmp4 = __tmp485
	} else if __tmp5 == 0x74 {
		__tmp486 := _i32_shl
		__tmp4 = __tmp486
	} else if __tmp5 == 0x75 {
		__tmp487 := _i32_shr_s
		__tmp4 = __tmp487
	} else if __tmp5 == 0x76 {
		__tmp488 := _i32_shr_u
		__tmp4 = __tmp488
	} else if __tmp5 == 0x77 {
		__tmp489 := _i32_rotl
		__tmp4 = __tmp489
	} else if __tmp5 == 0x78 {
		__tmp490 := _i32_rotr
		__tmp4 = __tmp490
	} else if __tmp5 == 0x79 {
		__tmp491 := _i64_clz
		__tmp4 = __tmp491
	} else if __tmp5 == 0x7a {
		__tmp492 := _i64_ctz
		__tmp4 = __tmp492
	} else if __tmp5 == 0x7b {
		__tmp493 := _i64_popcnt
		__tmp4 = __tmp493
	} else if __tmp5 == 0x7c {
		__tmp494 := _i64_add
		__tmp4 = __tmp494
	} else if __tmp5 == 0x7d {
		__tmp495 := _i64_sub
		__tmp4 = __tmp495
	} else if __tmp5 == 0x7e {
		__tmp496 := _i64_mul
		__tmp4 = __tmp496
	} else if __tmp5 == 0x7f {
		__tmp497 := _i64_div_s
		__tmp4 = __tmp497
	} else if __tmp5 == 0x80 {
		__tmp498 := _i64_div_u
		__tmp4 = __tmp498
	} else if __tmp5 == 0x81 {
		__tmp499 := _i64_rem_s
		__tmp4 = __tmp499
	} else if __tmp5 == 0x82 {
		__tmp500 := _i64_rem_u
		__tmp4 = __tmp500
	} else if __tmp5 == 0x83 {
		__tmp501 := _i64_and
		__tmp4 = __tmp501
	} else if __tmp5 == 0x84 {
		__tmp502 := _i64_or
		__tmp4 = __tmp502
	} else if __tmp5 == 0x85 {
		__tmp503 := _i64_xor
		__tmp4 = __tmp503
	} else if __tmp5 == 0x86 {
		__tmp504 := _i64_shl
		__tmp4 = __tmp504
	} else if __tmp5 == 0x87 {
		__tmp505 := _i64_shr_s
		__tmp4 = __tmp505
	} else if __tmp5 == 0x88 {
		__tmp506 := _i64_shr_u
		__tmp4 = __tmp506
	} else if __tmp5 == 0x89 {
		__tmp507 := _i64_rotl
		__tmp4 = __tmp507
	} else if __tmp5 == 0x8a {
		__tmp508 := _i64_rotr
		__tmp4 = __tmp508
	} else if __tmp5 == 0x8b {
		__tmp509 := _f32_abs
		__tmp4 = __tmp509
	} else if __tmp5 == 0x8c {
		__tmp510 := _f32_neg
		__tmp4 = __tmp510
	} else if __tmp5 == 0x8d {
		__tmp511 := _f32_ceil
		__tmp4 = __tmp511
	} else if __tmp5 == 0x8e {
		__tmp512 := _f32_floor
		__tmp4 = __tmp512
	} else if __tmp5 == 0x8f {
		__tmp513 := _f32_trunc
		__tmp4 = __tmp513
	} else if __tmp5 == 0x90 {
		__tmp514 := _f32_nearest
		__tmp4 = __tmp514
	} else if __tmp5 == 0x91 {
		__tmp515 := _f32_sqrt
		__tmp4 = __tmp515
	} else if __tmp5 == 0x92 {
		__tmp516 := _f32_add
		__tmp4 = __tmp516
	} else if __tmp5 == 0x93 {
		__tmp517 := _f32_sub
		__tmp4 = __tmp517
	} else if __tmp5 == 0x94 {
		__tmp518 := _f32_mul
		__tmp4 = __tmp518
	} else if __tmp5 == 0x95 {
		__tmp519 := _f32_div
		__tmp4 = __tmp519
	} else if __tmp5 == 0x96 {
		__tmp520 := _f32_min
		__tmp4 = __tmp520
	} else if __tmp5 == 0x97 {
		__tmp521 := _f32_max
		__tmp4 = __tmp521
	} else if __tmp5 == 0x98 {
		__tmp522 := _f32_copysign
		__tmp4 = __tmp522
	} else if __tmp5 == 0x99 {
		__tmp523 := _f64_abs
		__tmp4 = __tmp523
	} else if __tmp5 == 0x9a {
		__tmp524 := _f64_neg
		__tmp4 = __tmp524
	} else if __tmp5 == 0x9b {
		__tmp525 := _f64_ceil
		__tmp4 = __tmp525
	} else if __tmp5 == 0x9c {
		__tmp526 := _f64_floor
		__tmp4 = __tmp526
	} else if __tmp5 == 0x9d {
		__tmp527 := _f64_trunc
		__tmp4 = __tmp527
	} else if __tmp5 == 0x9e {
		__tmp528 := _f64_nearest
		__tmp4 = __tmp528
	} else if __tmp5 == 0x9f {
		__tmp529 := _f64_sqrt
		__tmp4 = __tmp529
	} else if __tmp5 == 0xa0 {
		__tmp530 := _f64_add
		__tmp4 = __tmp530
	} else if __tmp5 == 0xa1 {
		__tmp531 := _f64_sub
		__tmp4 = __tmp531
	} else if __tmp5 == 0xa2 {
		__tmp532 := _f64_mul
		__tmp4 = __tmp532
	} else if __tmp5 == 0xa3 {
		__tmp533 := _f64_div
		__tmp4 = __tmp533
	} else if __tmp5 == 0xa4 {
		__tmp534 := _f64_min
		__tmp4 = __tmp534
	} else if __tmp5 == 0xa5 {
		__tmp535 := _f64_max
		__tmp4 = __tmp535
	} else if __tmp5 == 0xa6 {
		__tmp536 := _f64_copysign
		__tmp4 = __tmp536
	} else if __tmp5 == 0xa7 {
		__tmp537 := _i32_wrap_i64
		__tmp4 = __tmp537
	} else if __tmp5 == 0xa8 {
		__tmp538 := _i32_trunc_f32_s
		__tmp4 = __tmp538
	} else if __tmp5 == 0xa9 {
		__tmp539 := _i32_trunc_f32_u
		__tmp4 = __tmp539
	} else if __tmp5 == 0xaa {
		__tmp540 := _i32_trunc_f64_s
		__tmp4 = __tmp540
	} else if __tmp5 == 0xab {
		__tmp541 := _i32_trunc_f64_u
		__tmp4 = __tmp541
	} else if __tmp5 == 0xac {
		__tmp542 := _i64_extend_i32_s
		__tmp4 = __tmp542
	} else if __tmp5 == 0xad {
		__tmp543 := _i64_extend_i32_u
		__tmp4 = __tmp543
	} else if __tmp5 == 0xae {
		__tmp544 := _i64_trunc_f32_s
		__tmp4 = __tmp544
	} else if __tmp5 == 0xaf {
		__tmp545 := _i64_trunc_f32_u
		__tmp4 = __tmp545
	} else if __tmp5 == 0xb0 {
		__tmp546 := _i64_trunc_f64_s
		__tmp4 = __tmp546
	} else if __tmp5 == 0xb1 {
		__tmp547 := _i64_trunc_f64_u
		__tmp4 = __tmp547
	} else if __tmp5 == 0xb2 {
		__tmp548 := _f32_convert_i32_s
		__tmp4 = __tmp548
	} else if __tmp5 == 0xb3 {
		__tmp549 := _f32_convert_i32_u
		__tmp4 = __tmp549
	} else if __tmp5 == 0xb4 {
		__tmp550 := _f32_convert_i64_s
		__tmp4 = __tmp550
	} else if __tmp5 == 0xb5 {
		__tmp551 := _f32_convert_i64_u
		__tmp4 = __tmp551
	} else if __tmp5 == 0xb6 {
		__tmp552 := _f32_demote_f64
		__tmp4 = __tmp552
	} else if __tmp5 == 0xb7 {
		__tmp553 := _f64_convert_i32_s
		__tmp4 = __tmp553
	} else if __tmp5 == 0xb8 {
		__tmp554 := _f64_convert_i32_u
		__tmp4 = __tmp554
	} else if __tmp5 == 0xb9 {
		__tmp555 := _f64_convert_i64_s
		__tmp4 = __tmp555
	} else if __tmp5 == 0xba {
		__tmp556 := _f64_convert_i64_u
		__tmp4 = __tmp556
	} else if __tmp5 == 0xbb {
		__tmp557 := _f64_promote_f32
		__tmp4 = __tmp557
	} else if __tmp5 == 0xbc {
		__tmp558 := _i32_reinterpret_f32
		__tmp4 = __tmp558
	} else if __tmp5 == 0xbd {
		__tmp559 := _i64_reinterpret_f64
		__tmp4 = __tmp559
	} else if __tmp5 == 0xbe {
		__tmp560 := _f32_reinterpret_i32
		__tmp4 = __tmp560
	} else if __tmp5 == 0xbf {
		__tmp561 := _f64_reinterpret_i64
		__tmp4 = __tmp561
	} else if __tmp5 == 0xc0 {
		__tmp562 := _i32_extend8_s
		__tmp4 = __tmp562
	} else if __tmp5 == 0xc1 {
		__tmp563 := _i32_extend16_s
		__tmp4 = __tmp563
	} else if __tmp5 == 0xc2 {
		__tmp564 := _i64_extend8_s
		__tmp4 = __tmp564
	} else if __tmp5 == 0xc3 {
		__tmp565 := _i64_extend16_s
		__tmp4 = __tmp565
	} else if __tmp5 == 0xc4 {
		__tmp566 := _i64_extend32_s
		__tmp4 = __tmp566
	} else if __tmp5 == 0xc5 || __tmp5 == 0xc6 || __tmp5 == 0xc7 || __tmp5 == 0xc8 || __tmp5 == 0xc9 || __tmp5 == 0xca || __tmp5 == 0xcb || __tmp5 == 0xcc || __tmp5 == 0xcd || __tmp5 == 0xce || __tmp5 == 0xcf {
		_b := __tmp5
		__tmp568 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp568
	} else if __tmp5 == 0xd0 {
		__tmp572 := Decode_RefNull_1(Decode_HeapType_1(_s))
		__tmp4 = __tmp572
	} else if __tmp5 == 0xd1 {
		__tmp575 := _ref_is_null
		__tmp4 = __tmp575
	} else if __tmp5 == 0xd2 {
		__tmp576 := Decode_RefFunc_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp576
	} else if __tmp5 == 0xd3 {
		__tmp580 := _ref_eq
		__tmp4 = __tmp580
	} else if __tmp5 == 0xd4 {
		__tmp581 := _ref_as_non_null
		__tmp4 = __tmp581
	} else if __tmp5 == 0xd5 {
		__tmp582 := Decode_BrOnNull_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp582
	} else if __tmp5 == 0xd6 {
		__tmp586 := Decode_BrOnNonNull_1(Decode_At_2(_var, _s))
		__tmp4 = __tmp586
	} else if __tmp5 == 0xfb {
		_b := __tmp5
		var __tmp591 OAst_Instr_
		__tmp592 := Decode_U32_1(_s)
		if __tmp592 == 0x00 {
			__tmp595 := Decode_StructNew_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp595
		} else if __tmp592 == 0x01 {
			__tmp599 := Decode_StructNewDefault_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp599
		} else if __tmp592 == 0x02 {
			__tmp603 := Decode_At_2(_var, _s)
			_x := __tmp603
			__tmp607 := Decode_At_2(_var, _s)
			_y := __tmp607
			__tmp611 := Decode_StructGet_2(_x, _y)
			__tmp591 = __tmp611
		} else if __tmp592 == 0x03 {
			__tmp614 := Decode_At_2(_var, _s)
			_x := __tmp614
			__tmp618 := Decode_At_2(_var, _s)
			_y := __tmp618
			__tmp622 := Decode_StructGetS_2(_x, _y)
			__tmp591 = __tmp622
		} else if __tmp592 == 0x04 {
			__tmp625 := Decode_At_2(_var, _s)
			_x := __tmp625
			__tmp629 := Decode_At_2(_var, _s)
			_y := __tmp629
			__tmp633 := Decode_StructGetU_2(_x, _y)
			__tmp591 = __tmp633
		} else if __tmp592 == 0x05 {
			__tmp636 := Decode_At_2(_var, _s)
			_x := __tmp636
			__tmp640 := Decode_At_2(_var, _s)
			_y := __tmp640
			__tmp644 := Decode_StructSet_2(_x, _y)
			__tmp591 = __tmp644
		} else if __tmp592 == 0x06 {
			__tmp647 := Decode_ArrayNew_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp647
		} else if __tmp592 == 0x07 {
			__tmp651 := Decode_ArrayNewDefault_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp651
		} else if __tmp592 == 0x08 {
			__tmp655 := Decode_At_2(_var, _s)
			_x := __tmp655
			__tmp659 := Decode_U32_1(_s)
			_n := __tmp659
			__tmp662 := Decode_ArrayNewFixed_2(_x, _n)
			__tmp591 = __tmp662
		} else if __tmp592 == 0x09 {
			__tmp665 := Decode_At_2(_var, _s)
			_x := __tmp665
			__tmp669 := Decode_At_2(_var, _s)
			_y := __tmp669
			__tmp673 := Decode_ArrayNewData_2(_x, _y)
			__tmp591 = __tmp673
		} else if __tmp592 == 0x0a {
			__tmp676 := Decode_At_2(_var, _s)
			_x := __tmp676
			__tmp680 := Decode_At_2(_var, _s)
			_y := __tmp680
			__tmp684 := Decode_ArrayNewElem_2(_x, _y)
			__tmp591 = __tmp684
		} else if __tmp592 == 0x0b {
			__tmp687 := Decode_ArrayGet_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp687
		} else if __tmp592 == 0x0c {
			__tmp691 := Decode_ArrayGetS_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp691
		} else if __tmp592 == 0x0d {
			__tmp695 := Decode_ArrayGetU_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp695
		} else if __tmp592 == 0x0e {
			__tmp699 := Decode_ArraySet_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp699
		} else if __tmp592 == 0x0f {
			__tmp703 := _array_len
			__tmp591 = __tmp703
		} else if __tmp592 == 0x10 {
			__tmp704 := Decode_ArrayFill_1(Decode_At_2(_var, _s))
			__tmp591 = __tmp704
		} else if __tmp592 == 0x11 {
			__tmp708 := Decode_At_2(_var, _s)
			_x := __tmp708
			__tmp712 := Decode_At_2(_var, _s)
			_y := __tmp712
			__tmp716 := Decode_ArrayCopy_2(_x, _y)
			__tmp591 = __tmp716
		} else if __tmp592 == 0x12 {
			__tmp719 := Decode_At_2(_var, _s)
			_x := __tmp719
			__tmp723 := Decode_At_2(_var, _s)
			_y := __tmp723
			__tmp727 := Decode_ArrayInitData_2(_x, _y)
			__tmp591 = __tmp727
		} else if __tmp592 == 0x13 {
			__tmp730 := Decode_At_2(_var, _s)
			_x := __tmp730
			__tmp734 := Decode_At_2(_var, _s)
			_y := __tmp734
			__tmp738 := Decode_ArrayInitElem_2(_x, _y)
			__tmp591 = __tmp738
		} else if __tmp592 == 0x14 {
			__tmp741 := Decode_RefTest_1(struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{_NoNull, Decode_HeapType_1(_s)})
			__tmp591 = __tmp741
		} else if __tmp592 == 0x15 {
			__tmp747 := Decode_RefTest_1(struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{_Null, Decode_HeapType_1(_s)})
			__tmp591 = __tmp747
		} else if __tmp592 == 0x16 {
			__tmp753 := Decode_RefCast_1(struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{_NoNull, Decode_HeapType_1(_s)})
			__tmp591 = __tmp753
		} else if __tmp592 == 0x17 {
			__tmp759 := Decode_RefCast_1(struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{_Null, Decode_HeapType_1(_s)})
			__tmp591 = __tmp759
		} else if __tmp592 == 0x18 || __tmp592 == 0x19 {
			_opcode := __tmp592
			__tmp766 := Decode_Byte_1(_s)
			_flags := __tmp766
			__tmp769 := Decode_Require_4(_operatorEq_2(_operatorland_2(_flags, 0xfc), 0), _s, _operatorPlus_2(_pos, 2), "malformed br_on_cast flags")
			_ = __tmp769
			__tmp776 := Decode_At_2(_var, _s)
			_x := __tmp776
			__tmp780 := struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{func() OTypes_Null {
				var __tmp781 OTypes_Null
				if Decode_Bit_2(0, _flags) {
					__tmp784 := _Null
					__tmp781 = __tmp784
				} else {
					__tmp786 := _NoNull
					__tmp781 = __tmp786
				}
				return __tmp781
			}(), Decode_HeapType_1(_s)}
			_rt1 := __tmp780
			__tmp791 := struct {
				F0 OTypes_Null
				F1 OTypes_HeapType
			}{func() OTypes_Null {
				var __tmp792 OTypes_Null
				if Decode_Bit_2(1, _flags) {
					__tmp795 := _Null
					__tmp792 = __tmp795
				} else {
					__tmp797 := _NoNull
					__tmp792 = __tmp797
				}
				return __tmp792
			}(), Decode_HeapType_1(_s)}
			_rt2 := __tmp791
			__tmp802 := Decode__if_opcode___0x18l_then_brOnCast_else_brOnCastFail__3(_x, _rt1, _rt2)

			__tmp591 = __tmp802
		} else if __tmp592 == 0x1a {
			__tmp806 := _any_convert_extern
			__tmp591 = __tmp806
		} else if __tmp592 == 0x1b {
			__tmp807 := _extern_convert_any
			__tmp591 = __tmp807
		} else if __tmp592 == 0x1c {
			__tmp808 := _ref_i31
			__tmp591 = __tmp808
		} else if __tmp592 == 0x1d {
			__tmp809 := _i31_get_s
			__tmp591 = __tmp809
		} else if __tmp592 == 0x1e {
			__tmp810 := _i31_get_u
			__tmp591 = __tmp810
		} else if _n := __tmp592; true {
			_ = _n
			__tmp813 := Decode_Illegal2_4(_s, _pos, _b, _n)
			__tmp591 = __tmp813
		}
		__tmp4 = __tmp591
	} else if __tmp5 == 0xfc {
		_b := __tmp5
		var __tmp819 OAst_Instr_
		__tmp820 := Decode_U32_1(_s)
		if __tmp820 == 0x00 {
			__tmp823 := _i32_trunc_sat_f32_s
			__tmp819 = __tmp823
		} else if __tmp820 == 0x01 {
			__tmp824 := _i32_trunc_sat_f32_u
			__tmp819 = __tmp824
		} else if __tmp820 == 0x02 {
			__tmp825 := _i32_trunc_sat_f64_s
			__tmp819 = __tmp825
		} else if __tmp820 == 0x03 {
			__tmp826 := _i32_trunc_sat_f64_u
			__tmp819 = __tmp826
		} else if __tmp820 == 0x04 {
			__tmp827 := _i64_trunc_sat_f32_s
			__tmp819 = __tmp827
		} else if __tmp820 == 0x05 {
			__tmp828 := _i64_trunc_sat_f32_u
			__tmp819 = __tmp828
		} else if __tmp820 == 0x06 {
			__tmp829 := _i64_trunc_sat_f64_s
			__tmp819 = __tmp829
		} else if __tmp820 == 0x07 {
			__tmp830 := _i64_trunc_sat_f64_u
			__tmp819 = __tmp830
		} else if __tmp820 == 0x08 {
			__tmp831 := Decode_At_2(_var, _s)
			_y := __tmp831
			__tmp835 := Decode_At_2(_var, _s)
			_x := __tmp835
			__tmp839 := Decode_MemoryInit_2(_x, _y)
			__tmp819 = __tmp839
		} else if __tmp820 == 0x09 {
			__tmp842 := Decode_DataDrop_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp842
		} else if __tmp820 == 0x0a {
			__tmp846 := Decode_At_2(_var, _s)
			_x := __tmp846
			__tmp850 := Decode_At_2(_var, _s)
			_y := __tmp850
			__tmp854 := Decode_MemoryCopy_2(_x, _y)
			__tmp819 = __tmp854
		} else if __tmp820 == 0x0b {
			__tmp857 := Decode_MemoryFill_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp857
		} else if __tmp820 == 0x0c {
			__tmp861 := Decode_At_2(_var, _s)
			_y := __tmp861
			__tmp865 := Decode_At_2(_var, _s)
			_x := __tmp865
			__tmp869 := Decode_TableInit_2(_x, _y)
			__tmp819 = __tmp869
		} else if __tmp820 == 0x0d {
			__tmp872 := Decode_ElemDrop_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp872
		} else if __tmp820 == 0x0e {
			__tmp876 := Decode_At_2(_var, _s)
			_x := __tmp876
			__tmp880 := Decode_At_2(_var, _s)
			_y := __tmp880
			__tmp884 := Decode_TableCopy_2(_x, _y)
			__tmp819 = __tmp884
		} else if __tmp820 == 0x0f {
			__tmp887 := Decode_TableGrow_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp887
		} else if __tmp820 == 0x10 {
			__tmp891 := Decode_TableSize_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp891
		} else if __tmp820 == 0x11 {
			__tmp895 := Decode_TableFill_1(Decode_At_2(_var, _s))
			__tmp819 = __tmp895
		} else if _n := __tmp820; true {
			_ = _n
			__tmp901 := Decode_Illegal2_4(_s, _pos, _b, _n)
			__tmp819 = __tmp901
		}
		__tmp4 = __tmp819
	} else if __tmp5 == 0xfd {
		var __tmp906 OAst_Instr_
		__tmp907 := Decode_U32_1(_s)
		if __tmp907 == 0x00 {
			__tmp910 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp910)
			__tmp915 := Decode_V128Load_3(_x, _a, _o)
			__tmp906 = __tmp915
		} else if __tmp907 == 0x01 {
			__tmp919 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp919)
			__tmp924 := Decode_V128Load8x8S_3(_x, _a, _o)
			__tmp906 = __tmp924
		} else if __tmp907 == 0x02 {
			__tmp928 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp928)
			__tmp933 := Decode_V128Load8x8U_3(_x, _a, _o)
			__tmp906 = __tmp933
		} else if __tmp907 == 0x03 {
			__tmp937 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp937)
			__tmp942 := Decode_V128Load16x4S_3(_x, _a, _o)
			__tmp906 = __tmp942
		} else if __tmp907 == 0x04 {
			__tmp946 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp946)
			__tmp951 := Decode_V128Load16x4U_3(_x, _a, _o)
			__tmp906 = __tmp951
		} else if __tmp907 == 0x05 {
			__tmp955 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp955)
			__tmp960 := Decode_V128Load32x2S_3(_x, _a, _o)
			__tmp906 = __tmp960
		} else if __tmp907 == 0x06 {
			__tmp964 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp964)
			__tmp969 := Decode_V128Load32x2U_3(_x, _a, _o)
			__tmp906 = __tmp969
		} else if __tmp907 == 0x07 {
			__tmp973 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp973)
			__tmp978 := Decode_V128Load8Splat_3(_x, _a, _o)
			__tmp906 = __tmp978
		} else if __tmp907 == 0x08 {
			__tmp982 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp982)
			__tmp987 := Decode_V128Load16Splat_3(_x, _a, _o)
			__tmp906 = __tmp987
		} else if __tmp907 == 0x09 {
			__tmp991 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp991)
			__tmp996 := Decode_V128Load32Splat_3(_x, _a, _o)
			__tmp906 = __tmp996
		} else if __tmp907 == 0x0a {
			__tmp1000 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1000)
			__tmp1005 := Decode_V128Load64Splat_3(_x, _a, _o)
			__tmp906 = __tmp1005
		} else if __tmp907 == 0x0b {
			__tmp1009 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1009)
			__tmp1014 := Decode_V128Store_3(_x, _a, _o)
			__tmp906 = __tmp1014
		} else if __tmp907 == 0x0c {
			__tmp1018 := Decode_V128Const_1(Decode_At_2(_v128, _s))
			__tmp906 = __tmp1018
		} else if __tmp907 == 0x0d {
			__tmp1022 := Decode_I8x16Shuffle_1(Decode_List_init_2(16, func(__ OInt) OInt {
				__tmp1024 := Decode_Byte_1(_s)
				return __tmp1024
			}))
			__tmp906 = __tmp1022
		} else if __tmp907 == 0x0e {
			__tmp1026 := _i8x16_swizzle
			__tmp906 = __tmp1026
		} else if __tmp907 == 0x0f {
			__tmp1027 := _i8x16_splat
			__tmp906 = __tmp1027
		} else if __tmp907 == 0x10 {
			__tmp1028 := _i16x8_splat
			__tmp906 = __tmp1028
		} else if __tmp907 == 0x11 {
			__tmp1029 := _i32x4_splat
			__tmp906 = __tmp1029
		} else if __tmp907 == 0x12 {
			__tmp1030 := _i64x2_splat
			__tmp906 = __tmp1030
		} else if __tmp907 == 0x13 {
			__tmp1031 := _f32x4_splat
			__tmp906 = __tmp1031
		} else if __tmp907 == 0x14 {
			__tmp1032 := _f64x2_splat
			__tmp906 = __tmp1032
		} else if __tmp907 == 0x15 {
			__tmp1033 := Decode_Byte_1(_s)
			_i := __tmp1033
			__tmp1036 := Decode_I8x16ExtractLaneS_1(_i)
			__tmp906 = __tmp1036
		} else if __tmp907 == 0x16 {
			__tmp1038 := Decode_Byte_1(_s)
			_i := __tmp1038
			__tmp1041 := Decode_I8x16ExtractLaneU_1(_i)
			__tmp906 = __tmp1041
		} else if __tmp907 == 0x17 {
			__tmp1043 := Decode_Byte_1(_s)
			_i := __tmp1043
			__tmp1046 := Decode_I8x16ReplaceLane_1(_i)
			__tmp906 = __tmp1046
		} else if __tmp907 == 0x18 {
			__tmp1048 := Decode_Byte_1(_s)
			_i := __tmp1048
			__tmp1051 := Decode_I16x8ExtractLaneS_1(_i)
			__tmp906 = __tmp1051
		} else if __tmp907 == 0x19 {
			__tmp1053 := Decode_Byte_1(_s)
			_i := __tmp1053
			__tmp1056 := Decode_I16x8ExtractLaneU_1(_i)
			__tmp906 = __tmp1056
		} else if __tmp907 == 0x1a {
			__tmp1058 := Decode_Byte_1(_s)
			_i := __tmp1058
			__tmp1061 := Decode_I16x8ReplaceLane_1(_i)
			__tmp906 = __tmp1061
		} else if __tmp907 == 0x1b {
			__tmp1063 := Decode_Byte_1(_s)
			_i := __tmp1063
			__tmp1066 := Decode_I32x4ExtractLane_1(_i)
			__tmp906 = __tmp1066
		} else if __tmp907 == 0x1c {
			__tmp1068 := Decode_Byte_1(_s)
			_i := __tmp1068
			__tmp1071 := Decode_I32x4ReplaceLane_1(_i)
			__tmp906 = __tmp1071
		} else if __tmp907 == 0x1d {
			__tmp1073 := Decode_Byte_1(_s)
			_i := __tmp1073
			__tmp1076 := Decode_I64x2ExtractLane_1(_i)
			__tmp906 = __tmp1076
		} else if __tmp907 == 0x1e {
			__tmp1078 := Decode_Byte_1(_s)
			_i := __tmp1078
			__tmp1081 := Decode_I64x2ReplaceLane_1(_i)
			__tmp906 = __tmp1081
		} else if __tmp907 == 0x1f {
			__tmp1083 := Decode_Byte_1(_s)
			_i := __tmp1083
			__tmp1086 := Decode_F32x4ExtractLane_1(_i)
			__tmp906 = __tmp1086
		} else if __tmp907 == 0x20 {
			__tmp1088 := Decode_Byte_1(_s)
			_i := __tmp1088
			__tmp1091 := Decode_F32x4ReplaceLane_1(_i)
			__tmp906 = __tmp1091
		} else if __tmp907 == 0x21 {
			__tmp1093 := Decode_Byte_1(_s)
			_i := __tmp1093
			__tmp1096 := Decode_F64x2ExtractLane_1(_i)
			__tmp906 = __tmp1096
		} else if __tmp907 == 0x22 {
			__tmp1098 := Decode_Byte_1(_s)
			_i := __tmp1098
			__tmp1101 := Decode_F64x2ReplaceLane_1(_i)
			__tmp906 = __tmp1101
		} else if __tmp907 == 0x23 {
			__tmp1103 := _i8x16_eq
			__tmp906 = __tmp1103
		} else if __tmp907 == 0x24 {
			__tmp1104 := _i8x16_ne
			__tmp906 = __tmp1104
		} else if __tmp907 == 0x25 {
			__tmp1105 := _i8x16_lt_s
			__tmp906 = __tmp1105
		} else if __tmp907 == 0x26 {
			__tmp1106 := _i8x16_lt_u
			__tmp906 = __tmp1106
		} else if __tmp907 == 0x27 {
			__tmp1107 := _i8x16_gt_s
			__tmp906 = __tmp1107
		} else if __tmp907 == 0x28 {
			__tmp1108 := _i8x16_gt_u
			__tmp906 = __tmp1108
		} else if __tmp907 == 0x29 {
			__tmp1109 := _i8x16_le_s
			__tmp906 = __tmp1109
		} else if __tmp907 == 0x2a {
			__tmp1110 := _i8x16_le_u
			__tmp906 = __tmp1110
		} else if __tmp907 == 0x2b {
			__tmp1111 := _i8x16_ge_s
			__tmp906 = __tmp1111
		} else if __tmp907 == 0x2c {
			__tmp1112 := _i8x16_ge_u
			__tmp906 = __tmp1112
		} else if __tmp907 == 0x2d {
			__tmp1113 := _i16x8_eq
			__tmp906 = __tmp1113
		} else if __tmp907 == 0x2e {
			__tmp1114 := _i16x8_ne
			__tmp906 = __tmp1114
		} else if __tmp907 == 0x2f {
			__tmp1115 := _i16x8_lt_s
			__tmp906 = __tmp1115
		} else if __tmp907 == 0x30 {
			__tmp1116 := _i16x8_lt_u
			__tmp906 = __tmp1116
		} else if __tmp907 == 0x31 {
			__tmp1117 := _i16x8_gt_s
			__tmp906 = __tmp1117
		} else if __tmp907 == 0x32 {
			__tmp1118 := _i16x8_gt_u
			__tmp906 = __tmp1118
		} else if __tmp907 == 0x33 {
			__tmp1119 := _i16x8_le_s
			__tmp906 = __tmp1119
		} else if __tmp907 == 0x34 {
			__tmp1120 := _i16x8_le_u
			__tmp906 = __tmp1120
		} else if __tmp907 == 0x35 {
			__tmp1121 := _i16x8_ge_s
			__tmp906 = __tmp1121
		} else if __tmp907 == 0x36 {
			__tmp1122 := _i16x8_ge_u
			__tmp906 = __tmp1122
		} else if __tmp907 == 0x37 {
			__tmp1123 := _i32x4_eq
			__tmp906 = __tmp1123
		} else if __tmp907 == 0x38 {
			__tmp1124 := _i32x4_ne
			__tmp906 = __tmp1124
		} else if __tmp907 == 0x39 {
			__tmp1125 := _i32x4_lt_s
			__tmp906 = __tmp1125
		} else if __tmp907 == 0x3a {
			__tmp1126 := _i32x4_lt_u
			__tmp906 = __tmp1126
		} else if __tmp907 == 0x3b {
			__tmp1127 := _i32x4_gt_s
			__tmp906 = __tmp1127
		} else if __tmp907 == 0x3c {
			__tmp1128 := _i32x4_gt_u
			__tmp906 = __tmp1128
		} else if __tmp907 == 0x3d {
			__tmp1129 := _i32x4_le_s
			__tmp906 = __tmp1129
		} else if __tmp907 == 0x3e {
			__tmp1130 := _i32x4_le_u
			__tmp906 = __tmp1130
		} else if __tmp907 == 0x3f {
			__tmp1131 := _i32x4_ge_s
			__tmp906 = __tmp1131
		} else if __tmp907 == 0x40 {
			__tmp1132 := _i32x4_ge_u
			__tmp906 = __tmp1132
		} else if __tmp907 == 0x41 {
			__tmp1133 := _f32x4_eq
			__tmp906 = __tmp1133
		} else if __tmp907 == 0x42 {
			__tmp1134 := _f32x4_ne
			__tmp906 = __tmp1134
		} else if __tmp907 == 0x43 {
			__tmp1135 := _f32x4_lt
			__tmp906 = __tmp1135
		} else if __tmp907 == 0x44 {
			__tmp1136 := _f32x4_gt
			__tmp906 = __tmp1136
		} else if __tmp907 == 0x45 {
			__tmp1137 := _f32x4_le
			__tmp906 = __tmp1137
		} else if __tmp907 == 0x46 {
			__tmp1138 := _f32x4_ge
			__tmp906 = __tmp1138
		} else if __tmp907 == 0x47 {
			__tmp1139 := _f64x2_eq
			__tmp906 = __tmp1139
		} else if __tmp907 == 0x48 {
			__tmp1140 := _f64x2_ne
			__tmp906 = __tmp1140
		} else if __tmp907 == 0x49 {
			__tmp1141 := _f64x2_lt
			__tmp906 = __tmp1141
		} else if __tmp907 == 0x4a {
			__tmp1142 := _f64x2_gt
			__tmp906 = __tmp1142
		} else if __tmp907 == 0x4b {
			__tmp1143 := _f64x2_le
			__tmp906 = __tmp1143
		} else if __tmp907 == 0x4c {
			__tmp1144 := _f64x2_ge
			__tmp906 = __tmp1144
		} else if __tmp907 == 0x4d {
			__tmp1145 := _v128_not
			__tmp906 = __tmp1145
		} else if __tmp907 == 0x4e {
			__tmp1146 := _v128_and
			__tmp906 = __tmp1146
		} else if __tmp907 == 0x4f {
			__tmp1147 := _v128_andnot
			__tmp906 = __tmp1147
		} else if __tmp907 == 0x50 {
			__tmp1148 := _v128_or
			__tmp906 = __tmp1148
		} else if __tmp907 == 0x51 {
			__tmp1149 := _v128_xor
			__tmp906 = __tmp1149
		} else if __tmp907 == 0x52 {
			__tmp1150 := _v128_bitselect
			__tmp906 = __tmp1150
		} else if __tmp907 == 0x53 {
			__tmp1151 := _v128_any_true
			__tmp906 = __tmp1151
		} else if __tmp907 == 0x54 {
			__tmp1152 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1152)
			__tmp1157 := Decode_Byte_1(_s)
			_lane := __tmp1157
			__tmp1160 := Decode_V128Load8Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1160
		} else if __tmp907 == 0x55 {
			__tmp1165 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1165)
			__tmp1170 := Decode_Byte_1(_s)
			_lane := __tmp1170
			__tmp1173 := Decode_V128Load16Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1173
		} else if __tmp907 == 0x56 {
			__tmp1178 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1178)
			__tmp1183 := Decode_Byte_1(_s)
			_lane := __tmp1183
			__tmp1186 := Decode_V128Load32Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1186
		} else if __tmp907 == 0x57 {
			__tmp1191 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1191)
			__tmp1196 := Decode_Byte_1(_s)
			_lane := __tmp1196
			__tmp1199 := Decode_V128Load64Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1199
		} else if __tmp907 == 0x58 {
			__tmp1204 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1204)
			__tmp1209 := Decode_Byte_1(_s)
			_lane := __tmp1209
			__tmp1212 := Decode_V128Store8Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1212
		} else if __tmp907 == 0x59 {
			__tmp1217 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1217)
			__tmp1222 := Decode_Byte_1(_s)
			_lane := __tmp1222
			__tmp1225 := Decode_V128Store16Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1225
		} else if __tmp907 == 0x5a {
			__tmp1230 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1230)
			__tmp1235 := Decode_Byte_1(_s)
			_lane := __tmp1235
			__tmp1238 := Decode_V128Store32Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1238
		} else if __tmp907 == 0x5b {
			__tmp1243 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1243)
			__tmp1248 := Decode_Byte_1(_s)
			_lane := __tmp1248
			__tmp1251 := Decode_V128Store64Lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1251
		} else if __tmp907 == 0x5c {
			__tmp1256 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1256)
			__tmp1261 := Decode_V128Load32Zero_3(_x, _a, _o)
			__tmp906 = __tmp1261
		} else if __tmp907 == 0x5d {
			__tmp1265 := Decode_Memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(__tmp1265)
			__tmp1270 := Decode_V128Load64Zero_3(_x, _a, _o)
			__tmp906 = __tmp1270
		} else if __tmp907 == 0x5e {
			__tmp1274 := _f32x4_demote_f64x2_zero
			__tmp906 = __tmp1274
		} else if __tmp907 == 0x5f {
			__tmp1275 := _f64x2_promote_low_f32x4
			__tmp906 = __tmp1275
		} else if __tmp907 == 0x60 {
			__tmp1276 := _i8x16_abs
			__tmp906 = __tmp1276
		} else if __tmp907 == 0x61 {
			__tmp1277 := _i8x16_neg
			__tmp906 = __tmp1277
		} else if __tmp907 == 0x62 {
			__tmp1278 := _i8x16_popcnt
			__tmp906 = __tmp1278
		} else if __tmp907 == 0x63 {
			__tmp1279 := _i8x16_all_true
			__tmp906 = __tmp1279
		} else if __tmp907 == 0x64 {
			__tmp1280 := _i8x16_bitmask
			__tmp906 = __tmp1280
		} else if __tmp907 == 0x65 {
			__tmp1281 := _i8x16_narrow_i16x8_s
			__tmp906 = __tmp1281
		} else if __tmp907 == 0x66 {
			__tmp1282 := _i8x16_narrow_i16x8_u
			__tmp906 = __tmp1282
		} else if __tmp907 == 0x67 {
			__tmp1283 := _f32x4_ceil
			__tmp906 = __tmp1283
		} else if __tmp907 == 0x68 {
			__tmp1284 := _f32x4_floor
			__tmp906 = __tmp1284
		} else if __tmp907 == 0x69 {
			__tmp1285 := _f32x4_trunc
			__tmp906 = __tmp1285
		} else if __tmp907 == 0x6a {
			__tmp1286 := _f32x4_nearest
			__tmp906 = __tmp1286
		} else if __tmp907 == 0x6b {
			__tmp1287 := _i8x16_shl
			__tmp906 = __tmp1287
		} else if __tmp907 == 0x6c {
			__tmp1288 := _i8x16_shr_s
			__tmp906 = __tmp1288
		} else if __tmp907 == 0x6d {
			__tmp1289 := _i8x16_shr_u
			__tmp906 = __tmp1289
		} else if __tmp907 == 0x6e {
			__tmp1290 := _i8x16_add
			__tmp906 = __tmp1290
		} else if __tmp907 == 0x6f {
			__tmp1291 := _i8x16_add_sat_s
			__tmp906 = __tmp1291
		} else if __tmp907 == 0x70 {
			__tmp1292 := _i8x16_add_sat_u
			__tmp906 = __tmp1292
		} else if __tmp907 == 0x71 {
			__tmp1293 := _i8x16_sub
			__tmp906 = __tmp1293
		} else if __tmp907 == 0x72 {
			__tmp1294 := _i8x16_sub_sat_s
			__tmp906 = __tmp1294
		} else if __tmp907 == 0x73 {
			__tmp1295 := _i8x16_sub_sat_u
			__tmp906 = __tmp1295
		} else if __tmp907 == 0x74 {
			__tmp1296 := _f64x2_ceil
			__tmp906 = __tmp1296
		} else if __tmp907 == 0x75 {
			__tmp1297 := _f64x2_floor
			__tmp906 = __tmp1297
		} else if __tmp907 == 0x76 {
			__tmp1298 := _i8x16_min_s
			__tmp906 = __tmp1298
		} else if __tmp907 == 0x77 {
			__tmp1299 := _i8x16_min_u
			__tmp906 = __tmp1299
		} else if __tmp907 == 0x78 {
			__tmp1300 := _i8x16_max_s
			__tmp906 = __tmp1300
		} else if __tmp907 == 0x79 {
			__tmp1301 := _i8x16_max_u
			__tmp906 = __tmp1301
		} else if __tmp907 == 0x7a {
			__tmp1302 := _f64x2_trunc
			__tmp906 = __tmp1302
		} else if __tmp907 == 0x7b {
			__tmp1303 := _i8x16_avgr_u
			__tmp906 = __tmp1303
		} else if __tmp907 == 0x7c {
			__tmp1304 := _i16x8_extadd_pairwise_i8x16_s
			__tmp906 = __tmp1304
		} else if __tmp907 == 0x7d {
			__tmp1305 := _i16x8_extadd_pairwise_i8x16_u
			__tmp906 = __tmp1305
		} else if __tmp907 == 0x7e {
			__tmp1306 := _i32x4_extadd_pairwise_i16x8_s
			__tmp906 = __tmp1306
		} else if __tmp907 == 0x7f {
			__tmp1307 := _i32x4_extadd_pairwise_i16x8_u
			__tmp906 = __tmp1307
		} else if __tmp907 == 0x80 {
			__tmp1308 := _i16x8_abs
			__tmp906 = __tmp1308
		} else if __tmp907 == 0x81 {
			__tmp1309 := _i16x8_neg
			__tmp906 = __tmp1309
		} else if __tmp907 == 0x82 {
			__tmp1310 := _i16x8_q15mulr_sat_s
			__tmp906 = __tmp1310
		} else if __tmp907 == 0x83 {
			__tmp1311 := _i16x8_all_true
			__tmp906 = __tmp1311
		} else if __tmp907 == 0x84 {
			__tmp1312 := _i16x8_bitmask
			__tmp906 = __tmp1312
		} else if __tmp907 == 0x85 {
			__tmp1313 := _i16x8_narrow_i32x4_s
			__tmp906 = __tmp1313
		} else if __tmp907 == 0x86 {
			__tmp1314 := _i16x8_narrow_i32x4_u
			__tmp906 = __tmp1314
		} else if __tmp907 == 0x87 {
			__tmp1315 := _i16x8_extend_low_i8x16_s
			__tmp906 = __tmp1315
		} else if __tmp907 == 0x88 {
			__tmp1316 := _i16x8_extend_high_i8x16_s
			__tmp906 = __tmp1316
		} else if __tmp907 == 0x89 {
			__tmp1317 := _i16x8_extend_low_i8x16_u
			__tmp906 = __tmp1317
		} else if __tmp907 == 0x8a {
			__tmp1318 := _i16x8_extend_high_i8x16_u
			__tmp906 = __tmp1318
		} else if __tmp907 == 0x8b {
			__tmp1319 := _i16x8_shl
			__tmp906 = __tmp1319
		} else if __tmp907 == 0x8c {
			__tmp1320 := _i16x8_shr_s
			__tmp906 = __tmp1320
		} else if __tmp907 == 0x8d {
			__tmp1321 := _i16x8_shr_u
			__tmp906 = __tmp1321
		} else if __tmp907 == 0x8e {
			__tmp1322 := _i16x8_add
			__tmp906 = __tmp1322
		} else if __tmp907 == 0x8f {
			__tmp1323 := _i16x8_add_sat_s
			__tmp906 = __tmp1323
		} else if __tmp907 == 0x90 {
			__tmp1324 := _i16x8_add_sat_u
			__tmp906 = __tmp1324
		} else if __tmp907 == 0x91 {
			__tmp1325 := _i16x8_sub
			__tmp906 = __tmp1325
		} else if __tmp907 == 0x92 {
			__tmp1326 := _i16x8_sub_sat_s
			__tmp906 = __tmp1326
		} else if __tmp907 == 0x93 {
			__tmp1327 := _i16x8_sub_sat_u
			__tmp906 = __tmp1327
		} else if __tmp907 == 0x94 {
			__tmp1328 := _f64x2_nearest
			__tmp906 = __tmp1328
		} else if __tmp907 == 0x95 {
			__tmp1329 := _i16x8_mul
			__tmp906 = __tmp1329
		} else if __tmp907 == 0x96 {
			__tmp1330 := _i16x8_min_s
			__tmp906 = __tmp1330
		} else if __tmp907 == 0x97 {
			__tmp1331 := _i16x8_min_u
			__tmp906 = __tmp1331
		} else if __tmp907 == 0x98 {
			__tmp1332 := _i16x8_max_s
			__tmp906 = __tmp1332
		} else if __tmp907 == 0x99 {
			__tmp1333 := _i16x8_max_u
			__tmp906 = __tmp1333
		} else if __tmp907 == 0x9a {
			_n := __tmp907
			__tmp1335 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1335
		} else if __tmp907 == 0x9b {
			__tmp1340 := _i16x8_avgr_u
			__tmp906 = __tmp1340
		} else if __tmp907 == 0x9c {
			__tmp1341 := _i16x8_extmul_low_i8x16_s
			__tmp906 = __tmp1341
		} else if __tmp907 == 0x9d {
			__tmp1342 := _i16x8_extmul_high_i8x16_s
			__tmp906 = __tmp1342
		} else if __tmp907 == 0x9e {
			__tmp1343 := _i16x8_extmul_low_i8x16_u
			__tmp906 = __tmp1343
		} else if __tmp907 == 0x9f {
			__tmp1344 := _i16x8_extmul_high_i8x16_u
			__tmp906 = __tmp1344
		} else if __tmp907 == 0xa0 {
			__tmp1345 := _i32x4_abs
			__tmp906 = __tmp1345
		} else if __tmp907 == 0xa1 {
			__tmp1346 := _i32x4_neg
			__tmp906 = __tmp1346
		} else if __tmp907 == 0xa2 {
			_n := __tmp907
			__tmp1348 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1348
		} else if __tmp907 == 0xa3 {
			__tmp1353 := _i32x4_all_true
			__tmp906 = __tmp1353
		} else if __tmp907 == 0xa4 {
			__tmp1354 := _i32x4_bitmask
			__tmp906 = __tmp1354
		} else if __tmp907 == 0xa5 || __tmp907 == 0xa6 {
			_n := __tmp907
			__tmp1356 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1356
		} else if __tmp907 == 0xa7 {
			__tmp1361 := _i32x4_extend_low_i16x8_s
			__tmp906 = __tmp1361
		} else if __tmp907 == 0xa8 {
			__tmp1362 := _i32x4_extend_high_i16x8_s
			__tmp906 = __tmp1362
		} else if __tmp907 == 0xa9 {
			__tmp1363 := _i32x4_extend_low_i16x8_u
			__tmp906 = __tmp1363
		} else if __tmp907 == 0xaa {
			__tmp1364 := _i32x4_extend_high_i16x8_u
			__tmp906 = __tmp1364
		} else if __tmp907 == 0xab {
			__tmp1365 := _i32x4_shl
			__tmp906 = __tmp1365
		} else if __tmp907 == 0xac {
			__tmp1366 := _i32x4_shr_s
			__tmp906 = __tmp1366
		} else if __tmp907 == 0xad {
			__tmp1367 := _i32x4_shr_u
			__tmp906 = __tmp1367
		} else if __tmp907 == 0xae {
			__tmp1368 := _i32x4_add
			__tmp906 = __tmp1368
		} else if __tmp907 == 0xaf || __tmp907 == 0xb0 {
			_n := __tmp907
			__tmp1370 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1370
		} else if __tmp907 == 0xb1 {
			__tmp1375 := _i32x4_sub
			__tmp906 = __tmp1375
		} else if __tmp907 == 0xb2 || __tmp907 == 0xb3 || __tmp907 == 0xb4 {
			_n := __tmp907
			__tmp1377 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1377
		} else if __tmp907 == 0xb5 {
			__tmp1382 := _i32x4_mul
			__tmp906 = __tmp1382
		} else if __tmp907 == 0xb6 {
			__tmp1383 := _i32x4_min_s
			__tmp906 = __tmp1383
		} else if __tmp907 == 0xb7 {
			__tmp1384 := _i32x4_min_u
			__tmp906 = __tmp1384
		} else if __tmp907 == 0xb8 {
			__tmp1385 := _i32x4_max_s
			__tmp906 = __tmp1385
		} else if __tmp907 == 0xb9 {
			__tmp1386 := _i32x4_max_u
			__tmp906 = __tmp1386
		} else if __tmp907 == 0xba {
			__tmp1387 := _i32x4_dot_i16x8_s
			__tmp906 = __tmp1387
		} else if __tmp907 == 0xbc {
			__tmp1388 := _i32x4_extmul_low_i16x8_s
			__tmp906 = __tmp1388
		} else if __tmp907 == 0xbd {
			__tmp1389 := _i32x4_extmul_high_i16x8_s
			__tmp906 = __tmp1389
		} else if __tmp907 == 0xbe {
			__tmp1390 := _i32x4_extmul_low_i16x8_u
			__tmp906 = __tmp1390
		} else if __tmp907 == 0xbf {
			__tmp1391 := _i32x4_extmul_high_i16x8_u
			__tmp906 = __tmp1391
		} else if __tmp907 == 0xc0 {
			__tmp1392 := _i64x2_abs
			__tmp906 = __tmp1392
		} else if __tmp907 == 0xc1 {
			__tmp1393 := _i64x2_neg
			__tmp906 = __tmp1393
		} else if __tmp907 == 0xc2 {
			_n := __tmp907
			__tmp1395 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1395
		} else if __tmp907 == 0xc3 {
			__tmp1400 := _i64x2_all_true
			__tmp906 = __tmp1400
		} else if __tmp907 == 0xc4 {
			__tmp1401 := _i64x2_bitmask
			__tmp906 = __tmp1401
		} else if __tmp907 == 0xc5 || __tmp907 == 0xc6 {
			_n := __tmp907
			__tmp1403 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1403
		} else if __tmp907 == 0xc7 {
			__tmp1408 := _i64x2_extend_low_i32x4_s
			__tmp906 = __tmp1408
		} else if __tmp907 == 0xc8 {
			__tmp1409 := _i64x2_extend_high_i32x4_s
			__tmp906 = __tmp1409
		} else if __tmp907 == 0xc9 {
			__tmp1410 := _i64x2_extend_low_i32x4_u
			__tmp906 = __tmp1410
		} else if __tmp907 == 0xca {
			__tmp1411 := _i64x2_extend_high_i32x4_u
			__tmp906 = __tmp1411
		} else if __tmp907 == 0xcb {
			__tmp1412 := _i64x2_shl
			__tmp906 = __tmp1412
		} else if __tmp907 == 0xcc {
			__tmp1413 := _i64x2_shr_s
			__tmp906 = __tmp1413
		} else if __tmp907 == 0xcd {
			__tmp1414 := _i64x2_shr_u
			__tmp906 = __tmp1414
		} else if __tmp907 == 0xce {
			__tmp1415 := _i64x2_add
			__tmp906 = __tmp1415
		} else if __tmp907 == 0xcf || __tmp907 == 0xd0 {
			_n := __tmp907
			__tmp1417 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1417
		} else if __tmp907 == 0xd1 {
			__tmp1422 := _i64x2_sub
			__tmp906 = __tmp1422
		} else if __tmp907 == 0xd2 || __tmp907 == 0xd3 || __tmp907 == 0xd4 {
			_n := __tmp907
			__tmp1424 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1424
		} else if __tmp907 == 0xd5 {
			__tmp1429 := _i64x2_mul
			__tmp906 = __tmp1429
		} else if __tmp907 == 0xd6 {
			__tmp1430 := _i64x2_eq
			__tmp906 = __tmp1430
		} else if __tmp907 == 0xd7 {
			__tmp1431 := _i64x2_ne
			__tmp906 = __tmp1431
		} else if __tmp907 == 0xd8 {
			__tmp1432 := _i64x2_lt_s
			__tmp906 = __tmp1432
		} else if __tmp907 == 0xd9 {
			__tmp1433 := _i64x2_gt_s
			__tmp906 = __tmp1433
		} else if __tmp907 == 0xda {
			__tmp1434 := _i64x2_le_s
			__tmp906 = __tmp1434
		} else if __tmp907 == 0xdb {
			__tmp1435 := _i64x2_ge_s
			__tmp906 = __tmp1435
		} else if __tmp907 == 0xdc {
			__tmp1436 := _i64x2_extmul_low_i32x4_s
			__tmp906 = __tmp1436
		} else if __tmp907 == 0xdd {
			__tmp1437 := _i64x2_extmul_high_i32x4_s
			__tmp906 = __tmp1437
		} else if __tmp907 == 0xde {
			__tmp1438 := _i64x2_extmul_low_i32x4_u
			__tmp906 = __tmp1438
		} else if __tmp907 == 0xdf {
			__tmp1439 := _i64x2_extmul_high_i32x4_u
			__tmp906 = __tmp1439
		} else if __tmp907 == 0xe0 {
			__tmp1440 := _f32x4_abs
			__tmp906 = __tmp1440
		} else if __tmp907 == 0xe1 {
			__tmp1441 := _f32x4_neg
			__tmp906 = __tmp1441
		} else if __tmp907 == 0xe2 {
			_n := __tmp907
			__tmp1443 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1443
		} else if __tmp907 == 0xe3 {
			__tmp1448 := _f32x4_sqrt
			__tmp906 = __tmp1448
		} else if __tmp907 == 0xe4 {
			__tmp1449 := _f32x4_add
			__tmp906 = __tmp1449
		} else if __tmp907 == 0xe5 {
			__tmp1450 := _f32x4_sub
			__tmp906 = __tmp1450
		} else if __tmp907 == 0xe6 {
			__tmp1451 := _f32x4_mul
			__tmp906 = __tmp1451
		} else if __tmp907 == 0xe7 {
			__tmp1452 := _f32x4_div
			__tmp906 = __tmp1452
		} else if __tmp907 == 0xe8 {
			__tmp1453 := _f32x4_min
			__tmp906 = __tmp1453
		} else if __tmp907 == 0xe9 {
			__tmp1454 := _f32x4_max
			__tmp906 = __tmp1454
		} else if __tmp907 == 0xea {
			__tmp1455 := _f32x4_pmin
			__tmp906 = __tmp1455
		} else if __tmp907 == 0xeb {
			__tmp1456 := _f32x4_pmax
			__tmp906 = __tmp1456
		} else if __tmp907 == 0xec {
			__tmp1457 := _f64x2_abs
			__tmp906 = __tmp1457
		} else if __tmp907 == 0xed {
			__tmp1458 := _f64x2_neg
			__tmp906 = __tmp1458
		} else if __tmp907 == 0xef {
			__tmp1459 := _f64x2_sqrt
			__tmp906 = __tmp1459
		} else if __tmp907 == 0xf0 {
			__tmp1460 := _f64x2_add
			__tmp906 = __tmp1460
		} else if __tmp907 == 0xf1 {
			__tmp1461 := _f64x2_sub
			__tmp906 = __tmp1461
		} else if __tmp907 == 0xf2 {
			__tmp1462 := _f64x2_mul
			__tmp906 = __tmp1462
		} else if __tmp907 == 0xf3 {
			__tmp1463 := _f64x2_div
			__tmp906 = __tmp1463
		} else if __tmp907 == 0xf4 {
			__tmp1464 := _f64x2_min
			__tmp906 = __tmp1464
		} else if __tmp907 == 0xf5 {
			__tmp1465 := _f64x2_max
			__tmp906 = __tmp1465
		} else if __tmp907 == 0xf6 {
			__tmp1466 := _f64x2_pmin
			__tmp906 = __tmp1466
		} else if __tmp907 == 0xf7 {
			__tmp1467 := _f64x2_pmax
			__tmp906 = __tmp1467
		} else if __tmp907 == 0xf8 {
			__tmp1468 := _i32x4_trunc_sat_f32x4_s
			__tmp906 = __tmp1468
		} else if __tmp907 == 0xf9 {
			__tmp1469 := _i32x4_trunc_sat_f32x4_u
			__tmp906 = __tmp1469
		} else if __tmp907 == 0xfa {
			__tmp1470 := _f32x4_convert_i32x4_s
			__tmp906 = __tmp1470
		} else if __tmp907 == 0xfb {
			__tmp1471 := _f32x4_convert_i32x4_u
			__tmp906 = __tmp1471
		} else if __tmp907 == 0xfc {
			__tmp1472 := _i32x4_trunc_sat_f64x2_s_zero
			__tmp906 = __tmp1472
		} else if __tmp907 == 0xfd {
			__tmp1473 := _i32x4_trunc_sat_f64x2_u_zero
			__tmp906 = __tmp1473
		} else if __tmp907 == 0xfe {
			__tmp1474 := _f64x2_convert_low_i32x4_s
			__tmp906 = __tmp1474
		} else if __tmp907 == 0xff {
			__tmp1475 := _f64x2_convert_low_i32x4_u
			__tmp906 = __tmp1475
		} else if __tmp907 == 0x100 {
			__tmp1476 := _i8x16_relaxed_swizzle
			__tmp906 = __tmp1476
		} else if __tmp907 == 0x101 {
			__tmp1477 := _i32x4_relaxed_trunc_f32x4_s
			__tmp906 = __tmp1477
		} else if __tmp907 == 0x102 {
			__tmp1478 := _i32x4_relaxed_trunc_f32x4_u
			__tmp906 = __tmp1478
		} else if __tmp907 == 0x103 {
			__tmp1479 := _i32x4_relaxed_trunc_f64x2_s_zero
			__tmp906 = __tmp1479
		} else if __tmp907 == 0x104 {
			__tmp1480 := _i32x4_relaxed_trunc_f64x2_u_zero
			__tmp906 = __tmp1480
		} else if __tmp907 == 0x105 {
			__tmp1481 := _f32x4_relaxed_madd
			__tmp906 = __tmp1481
		} else if __tmp907 == 0x106 {
			__tmp1482 := _f32x4_relaxed_nmadd
			__tmp906 = __tmp1482
		} else if __tmp907 == 0x107 {
			__tmp1483 := _f64x2_relaxed_madd
			__tmp906 = __tmp1483
		} else if __tmp907 == 0x108 {
			__tmp1484 := _f64x2_relaxed_nmadd
			__tmp906 = __tmp1484
		} else if __tmp907 == 0x109 {
			__tmp1485 := _i8x16_relaxed_laneselect
			__tmp906 = __tmp1485
		} else if __tmp907 == 0x10a {
			__tmp1486 := _i16x8_relaxed_laneselect
			__tmp906 = __tmp1486
		} else if __tmp907 == 0x10b {
			__tmp1487 := _i32x4_relaxed_laneselect
			__tmp906 = __tmp1487
		} else if __tmp907 == 0x10c {
			__tmp1488 := _i64x2_relaxed_laneselect
			__tmp906 = __tmp1488
		} else if __tmp907 == 0x10d {
			__tmp1489 := _f32x4_relaxed_min
			__tmp906 = __tmp1489
		} else if __tmp907 == 0x10e {
			__tmp1490 := _f32x4_relaxed_max
			__tmp906 = __tmp1490
		} else if __tmp907 == 0x10f {
			__tmp1491 := _f64x2_relaxed_min
			__tmp906 = __tmp1491
		} else if __tmp907 == 0x110 {
			__tmp1492 := _f64x2_relaxed_max
			__tmp906 = __tmp1492
		} else if __tmp907 == 0x111 {
			__tmp1493 := _i16x8_relaxed_q15mulr_s
			__tmp906 = __tmp1493
		} else if __tmp907 == 0x112 {
			__tmp1494 := _i16x8_relaxed_dot_i8x16_i7x16_s
			__tmp906 = __tmp1494
		} else if __tmp907 == 0x113 {
			__tmp1495 := _i32x4_relaxed_dot_i8x16_i7x16_add_s
			__tmp906 = __tmp1495
		} else if _n := __tmp907; true {
			_ = _n
			__tmp1498 := Decode_Illegal_3(_s, _pos, Decode_I32_toIntU_1(_n))
			__tmp906 = __tmp1498
		}
		__tmp4 = __tmp906
	} else if _b := __tmp5; true {
		_ = _b
		__tmp1505 := Decode_Illegal_3(_s, _pos, _b)
		__tmp4 = __tmp1505
	}
	return __tmp4
}

var Decode_Instr = Decode_Instr_1

var _magic = 0x6d736100

func __unpack_Types_addr_type___Types_limits(t struct {
	F0 OTypes_AddrType
	F1 OTypes_Limits
}) (OTypes_AddrType, OTypes_Limits) {
	return t.F0, t.F1
}

func __unpack_Types_local_idx_Decode_phrase___OInt___OInt64(t struct {
	F0 TODO /* Types.local_idx Decode.phrase (kind 3) */
	F1 OInt
	F2 OInt64
}) (TODO /* Types.local_idx Decode.phrase (kind 3) */, OInt, OInt64) {
	return t.F0, t.F1, t.F2
}
