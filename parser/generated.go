// This file is automatically generated. DO NOT EDIT.
package parser

func _memop(_s *Stream) (*Phrase[int], int, int) {
	__tmp1 := _pos(_s)
	_pos := __tmp1
	__tmp4 := _u32(_s)
	_flags := __tmp4
	__tmp7 := _require_4((_flags) < (0x80), _s, _pos, "malformed memop flags")
	_ = __tmp7
	/* phony */ __tmp12 := (_flags)&(0x40) != 0
	_has_var := __tmp12
	var __tmp16 phony
	if _has_var {
		__tmp18 := _at_2(_var, _s)
		__tmp16 = __tmp18
	} else {
		/* phony */ __tmp21 := _operatorAtAt_2(0, _no_region)
		__tmp16 = __tmp21
	}
	_x := __tmp16
	__tmp24 := _to_int(_logand_2(_flags, 0x3f))
	_align := __tmp24
	__tmp28 := _u64(_s)
	_offset := __tmp28
	return _x, _align, _offset
}

func _instr(_s *Stream) *Instr {
	__tmp1 := _pos(_s)
	_pos := __tmp1
	var __tmp4 *Instr
	switch __tmp5 := _op(_s); __tmp5 {
	case 0x00:
		__tmp8 := _unreachable
		__tmp4 = __tmp8
	case 0x01:
		__tmp9 := _nop
		__tmp4 = __tmp9
	case 0x02:
		__tmp10 := _block_type(_s)
		_bt := __tmp10
		__tmp13 := _instr_block(_s)
		_es_ := __tmp13
		__tmp16 := _end_(_s)
		_ = __tmp16
		__tmp18 := _block_2(_bt, _es_)

		__tmp4 = __tmp18
	case 0x03:
		__tmp21 := _block_type(_s)
		_bt := __tmp21
		__tmp24 := _instr_block(_s)
		_es_ := __tmp24
		__tmp27 := _end_(_s)
		_ = __tmp27
		__tmp29 := _loop_2(_bt, _es_)

		__tmp4 = __tmp29
	case 0x04:
		__tmp32 := _block_type(_s)
		_bt := __tmp32
		__tmp35 := _instr_block(_s)
		_es1 := __tmp35
		var __tmp38 *Instr
		if _peek(_s) == _Some(0x05) {
			__tmp43 := _expect_3(0x05, _s, "ELSE or END opcode expected")
			_ = __tmp43
			__tmp45 := _instr_block(_s)
			_es2 := __tmp45
			__tmp48 := _end_(_s)
			_ = __tmp48
			__tmp50 := _if__3(_bt, _es1, _es2)

			__tmp38 = __tmp50
		} else {
			__tmp54 := _end_(_s)
			_ = __tmp54
			__tmp56 := _if__3(_bt, _es1, nil /* TODO: list_expression */)

			__tmp38 = __tmp56
		}
		__tmp4 = __tmp38
	case 0x05:
		__tmp59 := _error_3(_s, _pos, "misplaced ELSE opcode")
		__tmp4 = __tmp59
	case 0x06, 0x07:
		_b := __tmp5
		__tmp63 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp63
	case 0x08:
		__tmp67 := _throw(_at_2(_var, _s))
		__tmp4 = __tmp67
	case 0x09:
		_b := __tmp5
		__tmp72 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp72
	case 0x0a:
		__tmp76 := _throw_ref
		__tmp4 = __tmp76
	case 0x0b:
		__tmp77 := _error_3(_s, _pos, "misplaced END opcode")
		__tmp4 = __tmp77
	case 0x0c:
		__tmp80 := _br(_at_2(_var, _s))
		__tmp4 = __tmp80
	case 0x0d:
		__tmp84 := _br_if(_at_2(_var, _s))
		__tmp4 = __tmp84
	case 0x0e:
		__tmp88 := _vec_2(_at(_var), _s)
		_xs := __tmp88
		__tmp93 := _at_2(_var, _s)
		_x := __tmp93
		__tmp97 := _br_table_2(_xs, _x)
		__tmp4 = __tmp97
	case 0x0f:
		__tmp100 := _return
		__tmp4 = __tmp100
	case 0x10:
		__tmp101 := _call(_at_2(_var, _s))
		__tmp4 = __tmp101
	case 0x11:
		__tmp105 := _at_2(_var, _s)
		_y := __tmp105
		__tmp109 := _at_2(_var, _s)
		_x := __tmp109
		__tmp113 := _call_indirect_2(_x, _y)
		__tmp4 = __tmp113
	case 0x12:
		__tmp116 := _return_call(_at_2(_var, _s))
		__tmp4 = __tmp116
	case 0x13:
		__tmp120 := _at_2(_var, _s)
		_y := __tmp120
		__tmp124 := _at_2(_var, _s)
		_x := __tmp124
		__tmp128 := _return_call_indirect_2(_x, _y)
		__tmp4 = __tmp128
	case 0x14:
		__tmp131 := _call_ref(_at_2(_var, _s))
		__tmp4 = __tmp131
	case 0x15:
		__tmp135 := _return_call_ref(_at_2(_var, _s))
		__tmp4 = __tmp135
	case 0x16, 0x17, 0x18, 0x19:
		_b := __tmp5
		__tmp140 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp140
	case 0x1a:
		__tmp144 := _drop
		__tmp4 = __tmp144
	case 0x1b:
		__tmp145 := _select(_None)
		__tmp4 = __tmp145
	case 0x1c:
		__tmp147 := _select(_Some(_vec_2(_val_type, _s)))
		__tmp4 = __tmp147
	case 0x1d, 0x1e:
		_b := __tmp5
		__tmp153 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp153
	case 0x1f:
		__tmp157 := _block_type(_s)
		_bt := __tmp157
		__tmp160 := _vec_2(_at(_catch), _s)
		_cs := __tmp160
		__tmp165 := _instr_block(_s)
		_es := __tmp165
		__tmp168 := _end_(_s)
		_ = __tmp168
		__tmp170 := _try_table_3(_bt, _cs, _es)

		__tmp4 = __tmp170
	case 0x20:
		__tmp174 := _local_get(_at_2(_var, _s))
		__tmp4 = __tmp174
	case 0x21:
		__tmp178 := _local_set(_at_2(_var, _s))
		__tmp4 = __tmp178
	case 0x22:
		__tmp182 := _local_tee(_at_2(_var, _s))
		__tmp4 = __tmp182
	case 0x23:
		__tmp186 := _global_get(_at_2(_var, _s))
		__tmp4 = __tmp186
	case 0x24:
		__tmp190 := _global_set(_at_2(_var, _s))
		__tmp4 = __tmp190
	case 0x25:
		__tmp194 := _table_get(_at_2(_var, _s))
		__tmp4 = __tmp194
	case 0x26:
		__tmp198 := _table_set(_at_2(_var, _s))
		__tmp4 = __tmp198
	case 0x27:
		_b := __tmp5
		__tmp203 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp203
	case 0x28:
		__tmp207, __tmp208, __tmp209 := _memop(_s)
		_x, _a, _o := __tmp207, __tmp208, __tmp209
		__tmp214 := _i32_load_3(_x, _a, _o)
		__tmp4 = __tmp214
	case 0x29:
		__tmp218, __tmp219, __tmp220 := _memop(_s)
		_x, _a, _o := __tmp218, __tmp219, __tmp220
		__tmp225 := _i64_load_3(_x, _a, _o)
		__tmp4 = __tmp225
	case 0x2a:
		__tmp229, __tmp230, __tmp231 := _memop(_s)
		_x, _a, _o := __tmp229, __tmp230, __tmp231
		__tmp236 := _f32_load_3(_x, _a, _o)
		__tmp4 = __tmp236
	case 0x2b:
		__tmp240, __tmp241, __tmp242 := _memop(_s)
		_x, _a, _o := __tmp240, __tmp241, __tmp242
		__tmp247 := _f64_load_3(_x, _a, _o)
		__tmp4 = __tmp247
	case 0x2c:
		__tmp251, __tmp252, __tmp253 := _memop(_s)
		_x, _a, _o := __tmp251, __tmp252, __tmp253
		__tmp258 := _i32_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp258
	case 0x2d:
		__tmp262, __tmp263, __tmp264 := _memop(_s)
		_x, _a, _o := __tmp262, __tmp263, __tmp264
		__tmp269 := _i32_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp269
	case 0x2e:
		__tmp273, __tmp274, __tmp275 := _memop(_s)
		_x, _a, _o := __tmp273, __tmp274, __tmp275
		__tmp280 := _i32_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp280
	case 0x2f:
		__tmp284, __tmp285, __tmp286 := _memop(_s)
		_x, _a, _o := __tmp284, __tmp285, __tmp286
		__tmp291 := _i32_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp291
	case 0x30:
		__tmp295, __tmp296, __tmp297 := _memop(_s)
		_x, _a, _o := __tmp295, __tmp296, __tmp297
		__tmp302 := _i64_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp302
	case 0x31:
		__tmp306, __tmp307, __tmp308 := _memop(_s)
		_x, _a, _o := __tmp306, __tmp307, __tmp308
		__tmp313 := _i64_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp313
	case 0x32:
		__tmp317, __tmp318, __tmp319 := _memop(_s)
		_x, _a, _o := __tmp317, __tmp318, __tmp319
		__tmp324 := _i64_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp324
	case 0x33:
		__tmp328, __tmp329, __tmp330 := _memop(_s)
		_x, _a, _o := __tmp328, __tmp329, __tmp330
		__tmp335 := _i64_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp335
	case 0x34:
		__tmp339, __tmp340, __tmp341 := _memop(_s)
		_x, _a, _o := __tmp339, __tmp340, __tmp341
		__tmp346 := _i64_load32_s_3(_x, _a, _o)
		__tmp4 = __tmp346
	case 0x35:
		__tmp350, __tmp351, __tmp352 := _memop(_s)
		_x, _a, _o := __tmp350, __tmp351, __tmp352
		__tmp357 := _i64_load32_u_3(_x, _a, _o)
		__tmp4 = __tmp357
	case 0x36:
		__tmp361, __tmp362, __tmp363 := _memop(_s)
		_x, _a, _o := __tmp361, __tmp362, __tmp363
		__tmp368 := _i32_store_3(_x, _a, _o)
		__tmp4 = __tmp368
	case 0x37:
		__tmp372, __tmp373, __tmp374 := _memop(_s)
		_x, _a, _o := __tmp372, __tmp373, __tmp374
		__tmp379 := _i64_store_3(_x, _a, _o)
		__tmp4 = __tmp379
	case 0x38:
		__tmp383, __tmp384, __tmp385 := _memop(_s)
		_x, _a, _o := __tmp383, __tmp384, __tmp385
		__tmp390 := _f32_store_3(_x, _a, _o)
		__tmp4 = __tmp390
	case 0x39:
		__tmp394, __tmp395, __tmp396 := _memop(_s)
		_x, _a, _o := __tmp394, __tmp395, __tmp396
		__tmp401 := _f64_store_3(_x, _a, _o)
		__tmp4 = __tmp401
	case 0x3a:
		__tmp405, __tmp406, __tmp407 := _memop(_s)
		_x, _a, _o := __tmp405, __tmp406, __tmp407
		__tmp412 := _i32_store8_3(_x, _a, _o)
		__tmp4 = __tmp412
	case 0x3b:
		__tmp416, __tmp417, __tmp418 := _memop(_s)
		_x, _a, _o := __tmp416, __tmp417, __tmp418
		__tmp423 := _i32_store16_3(_x, _a, _o)
		__tmp4 = __tmp423
	case 0x3c:
		__tmp427, __tmp428, __tmp429 := _memop(_s)
		_x, _a, _o := __tmp427, __tmp428, __tmp429
		__tmp434 := _i64_store8_3(_x, _a, _o)
		__tmp4 = __tmp434
	case 0x3d:
		__tmp438, __tmp439, __tmp440 := _memop(_s)
		_x, _a, _o := __tmp438, __tmp439, __tmp440
		__tmp445 := _i64_store16_3(_x, _a, _o)
		__tmp4 = __tmp445
	case 0x3e:
		__tmp449, __tmp450, __tmp451 := _memop(_s)
		_x, _a, _o := __tmp449, __tmp450, __tmp451
		__tmp456 := _i64_store32_3(_x, _a, _o)
		__tmp4 = __tmp456
	case 0x3f:
		__tmp460 := _memory_size(_at_2(_var, _s))
		__tmp4 = __tmp460
	case 0x40:
		__tmp464 := _memory_grow(_at_2(_var, _s))
		__tmp4 = __tmp464
	case 0x41:
		__tmp468 := _i32_const(_at_2(_s32, _s))
		__tmp4 = __tmp468
	case 0x42:
		__tmp472 := _i64_const(_at_2(_s64, _s))
		__tmp4 = __tmp472
	case 0x43:
		__tmp476 := _f32_const(_at_2(_f32, _s))
		__tmp4 = __tmp476
	case 0x44:
		__tmp480 := _f64_const(_at_2(_f64, _s))
		__tmp4 = __tmp480
	case 0x45:
		__tmp484 := _i32_eqz
		__tmp4 = __tmp484
	case 0x46:
		__tmp485 := _i32_eq
		__tmp4 = __tmp485
	case 0x47:
		__tmp486 := _i32_ne
		__tmp4 = __tmp486
	case 0x48:
		__tmp487 := _i32_lt_s
		__tmp4 = __tmp487
	case 0x49:
		__tmp488 := _i32_lt_u
		__tmp4 = __tmp488
	case 0x4a:
		__tmp489 := _i32_gt_s
		__tmp4 = __tmp489
	case 0x4b:
		__tmp490 := _i32_gt_u
		__tmp4 = __tmp490
	case 0x4c:
		__tmp491 := _i32_le_s
		__tmp4 = __tmp491
	case 0x4d:
		__tmp492 := _i32_le_u
		__tmp4 = __tmp492
	case 0x4e:
		__tmp493 := _i32_ge_s
		__tmp4 = __tmp493
	case 0x4f:
		__tmp494 := _i32_ge_u
		__tmp4 = __tmp494
	case 0x50:
		__tmp495 := _i64_eqz
		__tmp4 = __tmp495
	case 0x51:
		__tmp496 := _i64_eq
		__tmp4 = __tmp496
	case 0x52:
		__tmp497 := _i64_ne
		__tmp4 = __tmp497
	case 0x53:
		__tmp498 := _i64_lt_s
		__tmp4 = __tmp498
	case 0x54:
		__tmp499 := _i64_lt_u
		__tmp4 = __tmp499
	case 0x55:
		__tmp500 := _i64_gt_s
		__tmp4 = __tmp500
	case 0x56:
		__tmp501 := _i64_gt_u
		__tmp4 = __tmp501
	case 0x57:
		__tmp502 := _i64_le_s
		__tmp4 = __tmp502
	case 0x58:
		__tmp503 := _i64_le_u
		__tmp4 = __tmp503
	case 0x59:
		__tmp504 := _i64_ge_s
		__tmp4 = __tmp504
	case 0x5a:
		__tmp505 := _i64_ge_u
		__tmp4 = __tmp505
	case 0x5b:
		__tmp506 := _f32_eq
		__tmp4 = __tmp506
	case 0x5c:
		__tmp507 := _f32_ne
		__tmp4 = __tmp507
	case 0x5d:
		__tmp508 := _f32_lt
		__tmp4 = __tmp508
	case 0x5e:
		__tmp509 := _f32_gt
		__tmp4 = __tmp509
	case 0x5f:
		__tmp510 := _f32_le
		__tmp4 = __tmp510
	case 0x60:
		__tmp511 := _f32_ge
		__tmp4 = __tmp511
	case 0x61:
		__tmp512 := _f64_eq
		__tmp4 = __tmp512
	case 0x62:
		__tmp513 := _f64_ne
		__tmp4 = __tmp513
	case 0x63:
		__tmp514 := _f64_lt
		__tmp4 = __tmp514
	case 0x64:
		__tmp515 := _f64_gt
		__tmp4 = __tmp515
	case 0x65:
		__tmp516 := _f64_le
		__tmp4 = __tmp516
	case 0x66:
		__tmp517 := _f64_ge
		__tmp4 = __tmp517
	case 0x67:
		__tmp518 := _i32_clz
		__tmp4 = __tmp518
	case 0x68:
		__tmp519 := _i32_ctz
		__tmp4 = __tmp519
	case 0x69:
		__tmp520 := _i32_popcnt
		__tmp4 = __tmp520
	case 0x6a:
		__tmp521 := _i32_add
		__tmp4 = __tmp521
	case 0x6b:
		__tmp522 := _i32_sub
		__tmp4 = __tmp522
	case 0x6c:
		__tmp523 := _i32_mul
		__tmp4 = __tmp523
	case 0x6d:
		__tmp524 := _i32_div_s
		__tmp4 = __tmp524
	case 0x6e:
		__tmp525 := _i32_div_u
		__tmp4 = __tmp525
	case 0x6f:
		__tmp526 := _i32_rem_s
		__tmp4 = __tmp526
	case 0x70:
		__tmp527 := _i32_rem_u
		__tmp4 = __tmp527
	case 0x71:
		__tmp528 := _i32_and
		__tmp4 = __tmp528
	case 0x72:
		__tmp529 := _i32_or
		__tmp4 = __tmp529
	case 0x73:
		__tmp530 := _i32_xor
		__tmp4 = __tmp530
	case 0x74:
		__tmp531 := _i32_shl
		__tmp4 = __tmp531
	case 0x75:
		__tmp532 := _i32_shr_s
		__tmp4 = __tmp532
	case 0x76:
		__tmp533 := _i32_shr_u
		__tmp4 = __tmp533
	case 0x77:
		__tmp534 := _i32_rotl
		__tmp4 = __tmp534
	case 0x78:
		__tmp535 := _i32_rotr
		__tmp4 = __tmp535
	case 0x79:
		__tmp536 := _i64_clz
		__tmp4 = __tmp536
	case 0x7a:
		__tmp537 := _i64_ctz
		__tmp4 = __tmp537
	case 0x7b:
		__tmp538 := _i64_popcnt
		__tmp4 = __tmp538
	case 0x7c:
		__tmp539 := _i64_add
		__tmp4 = __tmp539
	case 0x7d:
		__tmp540 := _i64_sub
		__tmp4 = __tmp540
	case 0x7e:
		__tmp541 := _i64_mul
		__tmp4 = __tmp541
	case 0x7f:
		__tmp542 := _i64_div_s
		__tmp4 = __tmp542
	case 0x80:
		__tmp543 := _i64_div_u
		__tmp4 = __tmp543
	case 0x81:
		__tmp544 := _i64_rem_s
		__tmp4 = __tmp544
	case 0x82:
		__tmp545 := _i64_rem_u
		__tmp4 = __tmp545
	case 0x83:
		__tmp546 := _i64_and
		__tmp4 = __tmp546
	case 0x84:
		__tmp547 := _i64_or
		__tmp4 = __tmp547
	case 0x85:
		__tmp548 := _i64_xor
		__tmp4 = __tmp548
	case 0x86:
		__tmp549 := _i64_shl
		__tmp4 = __tmp549
	case 0x87:
		__tmp550 := _i64_shr_s
		__tmp4 = __tmp550
	case 0x88:
		__tmp551 := _i64_shr_u
		__tmp4 = __tmp551
	case 0x89:
		__tmp552 := _i64_rotl
		__tmp4 = __tmp552
	case 0x8a:
		__tmp553 := _i64_rotr
		__tmp4 = __tmp553
	case 0x8b:
		__tmp554 := _f32_abs
		__tmp4 = __tmp554
	case 0x8c:
		__tmp555 := _f32_neg
		__tmp4 = __tmp555
	case 0x8d:
		__tmp556 := _f32_ceil
		__tmp4 = __tmp556
	case 0x8e:
		__tmp557 := _f32_floor
		__tmp4 = __tmp557
	case 0x8f:
		__tmp558 := _f32_trunc
		__tmp4 = __tmp558
	case 0x90:
		__tmp559 := _f32_nearest
		__tmp4 = __tmp559
	case 0x91:
		__tmp560 := _f32_sqrt
		__tmp4 = __tmp560
	case 0x92:
		__tmp561 := _f32_add
		__tmp4 = __tmp561
	case 0x93:
		__tmp562 := _f32_sub
		__tmp4 = __tmp562
	case 0x94:
		__tmp563 := _f32_mul
		__tmp4 = __tmp563
	case 0x95:
		__tmp564 := _f32_div
		__tmp4 = __tmp564
	case 0x96:
		__tmp565 := _f32_min
		__tmp4 = __tmp565
	case 0x97:
		__tmp566 := _f32_max
		__tmp4 = __tmp566
	case 0x98:
		__tmp567 := _f32_copysign
		__tmp4 = __tmp567
	case 0x99:
		__tmp568 := _f64_abs
		__tmp4 = __tmp568
	case 0x9a:
		__tmp569 := _f64_neg
		__tmp4 = __tmp569
	case 0x9b:
		__tmp570 := _f64_ceil
		__tmp4 = __tmp570
	case 0x9c:
		__tmp571 := _f64_floor
		__tmp4 = __tmp571
	case 0x9d:
		__tmp572 := _f64_trunc
		__tmp4 = __tmp572
	case 0x9e:
		__tmp573 := _f64_nearest
		__tmp4 = __tmp573
	case 0x9f:
		__tmp574 := _f64_sqrt
		__tmp4 = __tmp574
	case 0xa0:
		__tmp575 := _f64_add
		__tmp4 = __tmp575
	case 0xa1:
		__tmp576 := _f64_sub
		__tmp4 = __tmp576
	case 0xa2:
		__tmp577 := _f64_mul
		__tmp4 = __tmp577
	case 0xa3:
		__tmp578 := _f64_div
		__tmp4 = __tmp578
	case 0xa4:
		__tmp579 := _f64_min
		__tmp4 = __tmp579
	case 0xa5:
		__tmp580 := _f64_max
		__tmp4 = __tmp580
	case 0xa6:
		__tmp581 := _f64_copysign
		__tmp4 = __tmp581
	case 0xa7:
		__tmp582 := _i32_wrap_i64
		__tmp4 = __tmp582
	case 0xa8:
		__tmp583 := _i32_trunc_f32_s
		__tmp4 = __tmp583
	case 0xa9:
		__tmp584 := _i32_trunc_f32_u
		__tmp4 = __tmp584
	case 0xaa:
		__tmp585 := _i32_trunc_f64_s
		__tmp4 = __tmp585
	case 0xab:
		__tmp586 := _i32_trunc_f64_u
		__tmp4 = __tmp586
	case 0xac:
		__tmp587 := _i64_extend_i32_s
		__tmp4 = __tmp587
	case 0xad:
		__tmp588 := _i64_extend_i32_u
		__tmp4 = __tmp588
	case 0xae:
		__tmp589 := _i64_trunc_f32_s
		__tmp4 = __tmp589
	case 0xaf:
		__tmp590 := _i64_trunc_f32_u
		__tmp4 = __tmp590
	case 0xb0:
		__tmp591 := _i64_trunc_f64_s
		__tmp4 = __tmp591
	case 0xb1:
		__tmp592 := _i64_trunc_f64_u
		__tmp4 = __tmp592
	case 0xb2:
		__tmp593 := _f32_convert_i32_s
		__tmp4 = __tmp593
	case 0xb3:
		__tmp594 := _f32_convert_i32_u
		__tmp4 = __tmp594
	case 0xb4:
		__tmp595 := _f32_convert_i64_s
		__tmp4 = __tmp595
	case 0xb5:
		__tmp596 := _f32_convert_i64_u
		__tmp4 = __tmp596
	case 0xb6:
		__tmp597 := _f32_demote_f64
		__tmp4 = __tmp597
	case 0xb7:
		__tmp598 := _f64_convert_i32_s
		__tmp4 = __tmp598
	case 0xb8:
		__tmp599 := _f64_convert_i32_u
		__tmp4 = __tmp599
	case 0xb9:
		__tmp600 := _f64_convert_i64_s
		__tmp4 = __tmp600
	case 0xba:
		__tmp601 := _f64_convert_i64_u
		__tmp4 = __tmp601
	case 0xbb:
		__tmp602 := _f64_promote_f32
		__tmp4 = __tmp602
	case 0xbc:
		__tmp603 := _i32_reinterpret_f32
		__tmp4 = __tmp603
	case 0xbd:
		__tmp604 := _i64_reinterpret_f64
		__tmp4 = __tmp604
	case 0xbe:
		__tmp605 := _f32_reinterpret_i32
		__tmp4 = __tmp605
	case 0xbf:
		__tmp606 := _f64_reinterpret_i64
		__tmp4 = __tmp606
	case 0xc0:
		__tmp607 := _i32_extend8_s
		__tmp4 = __tmp607
	case 0xc1:
		__tmp608 := _i32_extend16_s
		__tmp4 = __tmp608
	case 0xc2:
		__tmp609 := _i64_extend8_s
		__tmp4 = __tmp609
	case 0xc3:
		__tmp610 := _i64_extend16_s
		__tmp4 = __tmp610
	case 0xc4:
		__tmp611 := _i64_extend32_s
		__tmp4 = __tmp611
	case 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf:
		_b := __tmp5
		__tmp613 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp613
	case 0xd0:
		__tmp617 := _ref_null(_heap_type(_s))
		__tmp4 = __tmp617
	case 0xd1:
		__tmp620 := _ref_is_null
		__tmp4 = __tmp620
	case 0xd2:
		__tmp621 := _ref_func(_at_2(_var, _s))
		__tmp4 = __tmp621
	case 0xd3:
		__tmp625 := _ref_eq
		__tmp4 = __tmp625
	case 0xd4:
		__tmp626 := _ref_as_non_null
		__tmp4 = __tmp626
	case 0xd5:
		__tmp627 := _br_on_null(_at_2(_var, _s))
		__tmp4 = __tmp627
	case 0xd6:
		__tmp631 := _br_on_non_null(_at_2(_var, _s))
		__tmp4 = __tmp631
	default:
		b := __tmp5
		__tmp635 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp635
	}
	return __tmp4
}
