// This file is automatically generated. DO NOT EDIT.
package parser

type OTypeIdx = OInt32
type OLocalIdx = OInt32
type OName = string

type ONullKind int

const (
	KNoNull ONullKind = iota + 1
	KNull
)

type ONull interface {
	Kind() ONullKind
}

type SimpleONull struct {
	kind ONullKind
}

func (t SimpleONull) Kind() ONullKind {
	return t.kind
}

var _NoNull ONull = SimpleONull{KNoNull}
var _Null ONull = SimpleONull{KNull}

type OMutKind int

const (
	KCons OMutKind = iota + 1
	KVar
)

type OMut interface {
	Kind() OMutKind
}

type SimpleOMut struct {
	kind OMutKind
}

func (t SimpleOMut) Kind() OMutKind {
	return t.kind
}

var _Cons OMut = SimpleOMut{KCons}
var _Var OMut = SimpleOMut{KVar}

type OInitKind int

const (
	KSet OInitKind = iota + 1
	KUnset
)

type OInit interface {
	Kind() OInitKind
}

type SimpleOInit struct {
	kind OInitKind
}

func (t SimpleOInit) Kind() OInitKind {
	return t.kind
}

var _Set OInit = SimpleOInit{KSet}
var _Unset OInit = SimpleOInit{KUnset}

type OFinalKind int

const (
	KNoFinal OFinalKind = iota + 1
	KFinal
)

type OFinal interface {
	Kind() OFinalKind
}

type SimpleOFinal struct {
	kind OFinalKind
}

func (t SimpleOFinal) Kind() OFinalKind {
	return t.kind
}

var _NoFinal OFinal = SimpleOFinal{KNoFinal}
var _Final OFinal = SimpleOFinal{KFinal}

type OLimits struct {
	Min OInt64
	Max *OInt64
}

type OVarKind int

const (
	KStatX OVarKind = iota + 1
	KRecX
)

type OVar interface {
	Kind() OVarKind
}

type SimpleOVar struct {
	kind OVarKind
}

func (t SimpleOVar) Kind() OVarKind {
	return t.kind
}

type OVar_StatX struct {
	V OTypeIdx
}

func (t OVar_StatX) Kind() OVarKind {
	return KStatX
}
func _StatX_1(v OTypeIdx) OVar {
	return OVar_StatX{v}
}

type OVar_RecX struct {
	V OInt32
}

func (t OVar_RecX) Kind() OVarKind {
	return KRecX
}
func _RecX_1(v OInt32) OVar {
	return OVar_RecX{v}
}

type OAddrTypeKind int

const (
	KI32AT OAddrTypeKind = iota + 1
	KI64AT
)

type OAddrType interface {
	Kind() OAddrTypeKind
}

type SimpleOAddrType struct {
	kind OAddrTypeKind
}

func (t SimpleOAddrType) Kind() OAddrTypeKind {
	return t.kind
}

var _I32AT OAddrType = SimpleOAddrType{KI32AT}
var _I64AT OAddrType = SimpleOAddrType{KI64AT}

type ONumTypeKind int

const (
	KI32T ONumTypeKind = iota + 1
	KI64T
	KF32T
	KF64T
)

type ONumType interface {
	Kind() ONumTypeKind
}

type SimpleONumType struct {
	kind ONumTypeKind
}

func (t SimpleONumType) Kind() ONumTypeKind {
	return t.kind
}

var _I32T ONumType = SimpleONumType{KI32T}
var _I64T ONumType = SimpleONumType{KI64T}
var _F32T ONumType = SimpleONumType{KF32T}
var _F64T ONumType = SimpleONumType{KF64T}

type OVecTypeKind int

const (
	KV128T OVecTypeKind = iota + 1
)

type OVecType interface {
	Kind() OVecTypeKind
}

type SimpleOVecType struct {
	kind OVecTypeKind
}

func (t SimpleOVecType) Kind() OVecTypeKind {
	return t.kind
}

var _V128T OVecType = SimpleOVecType{KV128T}

type OHeapTypeKind int

const (
	KAnyHT OHeapTypeKind = iota + 1
	KNoneHT
	KEqHT
	KI31HT
	KStructHT
	KArrayHT
	KFuncHT
	KNoFuncHT
	KExnHT
	KNoExnHT
	KExternHT
	KNoExternHT
	KVarHT
	KDefHT
	KBotHT
)

type OHeapType interface {
	Kind() OHeapTypeKind
}

type SimpleOHeapType struct {
	kind OHeapTypeKind
}

func (t SimpleOHeapType) Kind() OHeapTypeKind {
	return t.kind
}

var _AnyHT OHeapType = SimpleOHeapType{KAnyHT}
var _NoneHT OHeapType = SimpleOHeapType{KNoneHT}
var _EqHT OHeapType = SimpleOHeapType{KEqHT}
var _I31HT OHeapType = SimpleOHeapType{KI31HT}
var _StructHT OHeapType = SimpleOHeapType{KStructHT}
var _ArrayHT OHeapType = SimpleOHeapType{KArrayHT}
var _FuncHT OHeapType = SimpleOHeapType{KFuncHT}
var _NoFuncHT OHeapType = SimpleOHeapType{KNoFuncHT}
var _ExnHT OHeapType = SimpleOHeapType{KExnHT}
var _NoExnHT OHeapType = SimpleOHeapType{KNoExnHT}
var _ExternHT OHeapType = SimpleOHeapType{KExternHT}
var _NoExternHT OHeapType = SimpleOHeapType{KNoExternHT}

type OHeapType_VarHT struct {
	V OVar
}

func (t OHeapType_VarHT) Kind() OHeapTypeKind {
	return KVarHT
}
func _VarHT_1(v OVar) OHeapType {
	return OHeapType_VarHT{v}
}

type OHeapType_DefHT struct {
	V ODefType
}

func (t OHeapType_DefHT) Kind() OHeapTypeKind {
	return KDefHT
}
func _DefHT_1(v ODefType) OHeapType {
	return OHeapType_DefHT{v}
}

var _BotHT OHeapType = SimpleOHeapType{KBotHT}

type ORefType = struct {
	F0 ONull
	F1 OHeapType
}

type OValTypeKind int

const (
	KNumT OValTypeKind = iota + 1
	KVecT
	KRefT
	KBotT
)

type OValType interface {
	Kind() OValTypeKind
}

type SimpleOValType struct {
	kind OValTypeKind
}

func (t SimpleOValType) Kind() OValTypeKind {
	return t.kind
}

type OValType_NumT struct {
	V ONumType
}

func (t OValType_NumT) Kind() OValTypeKind {
	return KNumT
}
func _NumT_1(v ONumType) OValType {
	return OValType_NumT{v}
}

type OValType_VecT struct {
	V OVecType
}

func (t OValType_VecT) Kind() OValTypeKind {
	return KVecT
}
func _VecT_1(v OVecType) OValType {
	return OValType_VecT{v}
}

type OValType_RefT struct {
	V ORefType
}

func (t OValType_RefT) Kind() OValTypeKind {
	return KRefT
}
func _RefT_1(v ORefType) OValType {
	return OValType_RefT{v}
}

var _BotT OValType = SimpleOValType{KBotT}

type OResultType = []OValType

type OInstrTypeKind int

const (
	KInstrT OInstrTypeKind = iota + 1
)

type OInstrType interface {
	Kind() OInstrTypeKind
}

type SimpleOInstrType struct {
	kind OInstrTypeKind
}

func (t SimpleOInstrType) Kind() OInstrTypeKind {
	return t.kind
}

type OInstrType_InstrT struct {
	V struct {
		F0 OResultType
		F1 OResultType
		F2 []OLocalIdx
	}
}

func (t OInstrType_InstrT) Kind() OInstrTypeKind {
	return KInstrT
}
func _InstrT_1(v struct {
	F0 OResultType
	F1 OResultType
	F2 []OLocalIdx
}) OInstrType {
	return OInstrType_InstrT{v}
}

type OStorageTypeKind int

const (
	KValStorageT OStorageTypeKind = iota + 1
	KPackStorageT
)

type OStorageType interface {
	Kind() OStorageTypeKind
}

type SimpleOStorageType struct {
	kind OStorageTypeKind
}

func (t SimpleOStorageType) Kind() OStorageTypeKind {
	return t.kind
}

type OStorageType_ValStorageT struct {
	V OValType
}

func (t OStorageType_ValStorageT) Kind() OStorageTypeKind {
	return KValStorageT
}
func _ValStorageT_1(v OValType) OStorageType {
	return OStorageType_ValStorageT{v}
}

type OStorageType_PackStorageT struct {
	V OPackSize
}

func (t OStorageType_PackStorageT) Kind() OStorageTypeKind {
	return KPackStorageT
}
func _PackStorageT_1(v OPackSize) OStorageType {
	return OStorageType_PackStorageT{v}
}

type OFieldTypeKind int

const (
	KFieldT OFieldTypeKind = iota + 1
)

type OFieldType interface {
	Kind() OFieldTypeKind
}

type SimpleOFieldType struct {
	kind OFieldTypeKind
}

func (t SimpleOFieldType) Kind() OFieldTypeKind {
	return t.kind
}

type OFieldType_FieldT struct {
	V struct {
		F0 OMut
		F1 OStorageType
	}
}

func (t OFieldType_FieldT) Kind() OFieldTypeKind {
	return KFieldT
}
func _FieldT_1(v struct {
	F0 OMut
	F1 OStorageType
}) OFieldType {
	return OFieldType_FieldT{v}
}

type OStructTypeKind int

const (
	KStructT OStructTypeKind = iota + 1
)

type OStructType interface {
	Kind() OStructTypeKind
}

type SimpleOStructType struct {
	kind OStructTypeKind
}

func (t SimpleOStructType) Kind() OStructTypeKind {
	return t.kind
}

type OStructType_StructT struct {
	V []OFieldType
}

func (t OStructType_StructT) Kind() OStructTypeKind {
	return KStructT
}
func _StructT_1(v []OFieldType) OStructType {
	return OStructType_StructT{v}
}

type OArrayTypeKind int

const (
	KArrayT OArrayTypeKind = iota + 1
)

type OArrayType interface {
	Kind() OArrayTypeKind
}

type SimpleOArrayType struct {
	kind OArrayTypeKind
}

func (t SimpleOArrayType) Kind() OArrayTypeKind {
	return t.kind
}

type OArrayType_ArrayT struct {
	V OFieldType
}

func (t OArrayType_ArrayT) Kind() OArrayTypeKind {
	return KArrayT
}
func _ArrayT_1(v OFieldType) OArrayType {
	return OArrayType_ArrayT{v}
}

type OFuncTypeKind int

const (
	KFuncT OFuncTypeKind = iota + 1
)

type OFuncType interface {
	Kind() OFuncTypeKind
}

type SimpleOFuncType struct {
	kind OFuncTypeKind
}

func (t SimpleOFuncType) Kind() OFuncTypeKind {
	return t.kind
}

type OFuncType_FuncT struct {
	V struct {
		F0 OResultType
		F1 OResultType
	}
}

func (t OFuncType_FuncT) Kind() OFuncTypeKind {
	return KFuncT
}
func _FuncT_1(v struct {
	F0 OResultType
	F1 OResultType
}) OFuncType {
	return OFuncType_FuncT{v}
}

type OStrTypeKind int

const (
	KDefStructT OStrTypeKind = iota + 1
	KDefArrayT
	KDefFuncT
)

type OStrType interface {
	Kind() OStrTypeKind
}

type SimpleOStrType struct {
	kind OStrTypeKind
}

func (t SimpleOStrType) Kind() OStrTypeKind {
	return t.kind
}

type OStrType_DefStructT struct {
	V OStructType
}

func (t OStrType_DefStructT) Kind() OStrTypeKind {
	return KDefStructT
}
func _DefStructT_1(v OStructType) OStrType {
	return OStrType_DefStructT{v}
}

type OStrType_DefArrayT struct {
	V OArrayType
}

func (t OStrType_DefArrayT) Kind() OStrTypeKind {
	return KDefArrayT
}
func _DefArrayT_1(v OArrayType) OStrType {
	return OStrType_DefArrayT{v}
}

type OStrType_DefFuncT struct {
	V OFuncType
}

func (t OStrType_DefFuncT) Kind() OStrTypeKind {
	return KDefFuncT
}
func _DefFuncT_1(v OFuncType) OStrType {
	return OStrType_DefFuncT{v}
}

type OSubTypeKind int

const (
	KSubT OSubTypeKind = iota + 1
)

type OSubType interface {
	Kind() OSubTypeKind
}

type SimpleOSubType struct {
	kind OSubTypeKind
}

func (t SimpleOSubType) Kind() OSubTypeKind {
	return t.kind
}

type OSubType_SubT struct {
	V struct {
		F0 OFinal
		F1 []OHeapType
		F2 OStrType
	}
}

func (t OSubType_SubT) Kind() OSubTypeKind {
	return KSubT
}
func _SubT_1(v struct {
	F0 OFinal
	F1 []OHeapType
	F2 OStrType
}) OSubType {
	return OSubType_SubT{v}
}

type ORecTypeKind int

const (
	KRecT ORecTypeKind = iota + 1
)

type ORecType interface {
	Kind() ORecTypeKind
}

type SimpleORecType struct {
	kind ORecTypeKind
}

func (t SimpleORecType) Kind() ORecTypeKind {
	return t.kind
}

type ORecType_RecT struct {
	V []OSubType
}

func (t ORecType_RecT) Kind() ORecTypeKind {
	return KRecT
}
func _RecT_1(v []OSubType) ORecType {
	return ORecType_RecT{v}
}

type ODefTypeKind int

const (
	KDefT ODefTypeKind = iota + 1
)

type ODefType interface {
	Kind() ODefTypeKind
}

type SimpleODefType struct {
	kind ODefTypeKind
}

func (t SimpleODefType) Kind() ODefTypeKind {
	return t.kind
}

type ODefType_DefT struct {
	V struct {
		F0 ORecType
		F1 OInt32
	}
}

func (t ODefType_DefT) Kind() ODefTypeKind {
	return KDefT
}
func _DefT_1(v struct {
	F0 ORecType
	F1 OInt32
}) ODefType {
	return ODefType_DefT{v}
}

type OTableTypeKind int

const (
	KTableT OTableTypeKind = iota + 1
)

type OTableType interface {
	Kind() OTableTypeKind
}

type SimpleOTableType struct {
	kind OTableTypeKind
}

func (t SimpleOTableType) Kind() OTableTypeKind {
	return t.kind
}

type OTableType_TableT struct {
	V struct {
		F0 OAddrType
		F1 OLimits
		F2 ORefType
	}
}

func (t OTableType_TableT) Kind() OTableTypeKind {
	return KTableT
}
func _TableT_1(v struct {
	F0 OAddrType
	F1 OLimits
	F2 ORefType
}) OTableType {
	return OTableType_TableT{v}
}

type OMemoryTypeKind int

const (
	KMemoryT OMemoryTypeKind = iota + 1
)

type OMemoryType interface {
	Kind() OMemoryTypeKind
}

type SimpleOMemoryType struct {
	kind OMemoryTypeKind
}

func (t SimpleOMemoryType) Kind() OMemoryTypeKind {
	return t.kind
}

type OMemoryType_MemoryT struct {
	V struct {
		F0 OAddrType
		F1 OLimits
	}
}

func (t OMemoryType_MemoryT) Kind() OMemoryTypeKind {
	return KMemoryT
}
func _MemoryT_1(v struct {
	F0 OAddrType
	F1 OLimits
}) OMemoryType {
	return OMemoryType_MemoryT{v}
}

type OGlobalTypeKind int

const (
	KGlobalT OGlobalTypeKind = iota + 1
)

type OGlobalType interface {
	Kind() OGlobalTypeKind
}

type SimpleOGlobalType struct {
	kind OGlobalTypeKind
}

func (t SimpleOGlobalType) Kind() OGlobalTypeKind {
	return t.kind
}

type OGlobalType_GlobalT struct {
	V struct {
		F0 OMut
		F1 OValType
	}
}

func (t OGlobalType_GlobalT) Kind() OGlobalTypeKind {
	return KGlobalT
}
func _GlobalT_1(v struct {
	F0 OMut
	F1 OValType
}) OGlobalType {
	return OGlobalType_GlobalT{v}
}

type OTagTypeKind int

const (
	KTagT OTagTypeKind = iota + 1
)

type OTagType interface {
	Kind() OTagTypeKind
}

type SimpleOTagType struct {
	kind OTagTypeKind
}

func (t SimpleOTagType) Kind() OTagTypeKind {
	return t.kind
}

type OTagType_TagT struct {
	V ODefType
}

func (t OTagType_TagT) Kind() OTagTypeKind {
	return KTagT
}
func _TagT_1(v ODefType) OTagType {
	return OTagType_TagT{v}
}

type OLocalTypeKind int

const (
	KLocalT OLocalTypeKind = iota + 1
)

type OLocalType interface {
	Kind() OLocalTypeKind
}

type SimpleOLocalType struct {
	kind OLocalTypeKind
}

func (t SimpleOLocalType) Kind() OLocalTypeKind {
	return t.kind
}

type OLocalType_LocalT struct {
	V struct {
		F0 OInit
		F1 OValType
	}
}

func (t OLocalType_LocalT) Kind() OLocalTypeKind {
	return KLocalT
}
func _LocalT_1(v struct {
	F0 OInit
	F1 OValType
}) OLocalType {
	return OLocalType_LocalT{v}
}

type OExternTypeKind int

const (
	KExternFuncT OExternTypeKind = iota + 1
	KExternTableT
	KExternMemoryT
	KExternGlobalT
	KExternTagT
)

type OExternType interface {
	Kind() OExternTypeKind
}

type SimpleOExternType struct {
	kind OExternTypeKind
}

func (t SimpleOExternType) Kind() OExternTypeKind {
	return t.kind
}

type OExternType_ExternFuncT struct {
	V ODefType
}

func (t OExternType_ExternFuncT) Kind() OExternTypeKind {
	return KExternFuncT
}
func _ExternFuncT_1(v ODefType) OExternType {
	return OExternType_ExternFuncT{v}
}

type OExternType_ExternTableT struct {
	V OTableType
}

func (t OExternType_ExternTableT) Kind() OExternTypeKind {
	return KExternTableT
}
func _ExternTableT_1(v OTableType) OExternType {
	return OExternType_ExternTableT{v}
}

type OExternType_ExternMemoryT struct {
	V OMemoryType
}

func (t OExternType_ExternMemoryT) Kind() OExternTypeKind {
	return KExternMemoryT
}
func _ExternMemoryT_1(v OMemoryType) OExternType {
	return OExternType_ExternMemoryT{v}
}

type OExternType_ExternGlobalT struct {
	V OGlobalType
}

func (t OExternType_ExternGlobalT) Kind() OExternTypeKind {
	return KExternGlobalT
}
func _ExternGlobalT_1(v OGlobalType) OExternType {
	return OExternType_ExternGlobalT{v}
}

type OExternType_ExternTagT struct {
	V OTagType
}

func (t OExternType_ExternTagT) Kind() OExternTypeKind {
	return KExternTagT
}
func _ExternTagT_1(v OTagType) OExternType {
	return OExternType_ExternTagT{v}
}

type OExportTypeKind int

const (
	KExportT OExportTypeKind = iota + 1
)

type OExportType interface {
	Kind() OExportTypeKind
}

type SimpleOExportType struct {
	kind OExportTypeKind
}

func (t SimpleOExportType) Kind() OExportTypeKind {
	return t.kind
}

type OExportType_ExportT struct {
	V struct {
		F0 OExternType
		F1 OName
	}
}

func (t OExportType_ExportT) Kind() OExportTypeKind {
	return KExportT
}
func _ExportT_1(v struct {
	F0 OExternType
	F1 OName
}) OExportType {
	return OExportType_ExportT{v}
}

type OImportTypeKind int

const (
	KImportT OImportTypeKind = iota + 1
)

type OImportType interface {
	Kind() OImportTypeKind
}

type SimpleOImportType struct {
	kind OImportTypeKind
}

func (t SimpleOImportType) Kind() OImportTypeKind {
	return t.kind
}

type OImportType_ImportT struct {
	V struct {
		F0 OExternType
		F1 OName
		F2 OName
	}
}

func (t OImportType_ImportT) Kind() OImportTypeKind {
	return KImportT
}
func _ImportT_1(v struct {
	F0 OExternType
	F1 OName
	F2 OName
}) OImportType {
	return OImportType_ImportT{v}
}

type OModuleTypeKind int

const (
	KModuleT OModuleTypeKind = iota + 1
)

type OModuleType interface {
	Kind() OModuleTypeKind
}

type SimpleOModuleType struct {
	kind OModuleTypeKind
}

func (t SimpleOModuleType) Kind() OModuleTypeKind {
	return t.kind
}

type OModuleType_ModuleT struct {
	V struct {
		F0 []OImportType
		F1 []OExportType
	}
}

func (t OModuleType_ModuleT) Kind() OModuleTypeKind {
	return KModuleT
}
func _ModuleT_1(v struct {
	F0 []OImportType
	F1 []OExportType
}) OModuleType {
	return OModuleType_ModuleT{v}
}

type OSubst = func(OVar) OHeapType

type OPackSizeKind int

const (
	KPack8 OPackSizeKind = iota + 1
	KPack16
	KPack32
	KPack64
)

type OPackSize interface {
	Kind() OPackSizeKind
}

type SimpleOPackSize struct {
	kind OPackSizeKind
}

func (t SimpleOPackSize) Kind() OPackSizeKind {
	return t.kind
}

var _Pack8 OPackSize = SimpleOPackSize{KPack8}
var _Pack16 OPackSize = SimpleOPackSize{KPack16}
var _Pack32 OPackSize = SimpleOPackSize{KPack32}
var _Pack64 OPackSize = SimpleOPackSize{KPack64}

type OExtensionKind int

const (
	KSX OExtensionKind = iota + 1
	KZX
)

type OExtension interface {
	Kind() OExtensionKind
}

type SimpleOExtension struct {
	kind OExtensionKind
}

func (t SimpleOExtension) Kind() OExtensionKind {
	return t.kind
}

var _SX OExtension = SimpleOExtension{KSX}
var _ZX OExtension = SimpleOExtension{KZX}

type OPackShapeKind int

const (
	KPack8x8 OPackShapeKind = iota + 1
	KPack16x4
	KPack32x2
)

type OPackShape interface {
	Kind() OPackShapeKind
}

type SimpleOPackShape struct {
	kind OPackShapeKind
}

func (t SimpleOPackShape) Kind() OPackShapeKind {
	return t.kind
}

var _Pack8x8 OPackShape = SimpleOPackShape{KPack8x8}
var _Pack16x4 OPackShape = SimpleOPackShape{KPack16x4}
var _Pack32x2 OPackShape = SimpleOPackShape{KPack32x2}

type OVecExtensionKind int

const (
	KExtLane OVecExtensionKind = iota + 1
	KExtSplat
	KExtZero
)

type OVecExtension interface {
	Kind() OVecExtensionKind
}

type SimpleOVecExtension struct {
	kind OVecExtensionKind
}

func (t SimpleOVecExtension) Kind() OVecExtensionKind {
	return t.kind
}

type OVecExtension_ExtLane struct {
	V struct {
		F0 OPackShape
		F1 OExtension
	}
}

func (t OVecExtension_ExtLane) Kind() OVecExtensionKind {
	return KExtLane
}
func _ExtLane_1(v struct {
	F0 OPackShape
	F1 OExtension
}) OVecExtension {
	return OVecExtension_ExtLane{v}
}

var _ExtSplat OVecExtension = SimpleOVecExtension{KExtSplat}
var _ExtZero OVecExtension = SimpleOVecExtension{KExtZero}

type OVoid = OVoid
type OTestop = TODO       /* I32Op.testop I64Op.testop (kind 3) */
type OUnop = TODO         /* I32Op.unop I64Op.unop (kind 3) */
type OBinop = TODO        /* I32Op.binop I64Op.binop (kind 3) */
type ORelop = TODO        /* I32Op.relop I64Op.relop (kind 3) */
type OCvtop = TODO        /* I32Op.cvtop I64Op.cvtop (kind 3) */
type OVecTestop = TODO    /* V128Op.testop Value.vecop (kind 3) */
type OVecRelop = TODO     /* V128Op.relop Value.vecop (kind 3) */
type OVecUnop = TODO      /* V128Op.unop Value.vecop (kind 3) */
type OVecBinop = TODO     /* V128Op.binop Value.vecop (kind 3) */
type OVecTernop = TODO    /* V128Op.ternop Value.vecop (kind 3) */
type OVecCvtop = TODO     /* V128Op.cvtop Value.vecop (kind 3) */
type OVecShiftop = TODO   /* V128Op.shiftop Value.vecop (kind 3) */
type OVecBitmaskop = TODO /* V128Op.bitmaskop Value.vecop (kind 3) */
type OVecVtestop = TODO   /* V128Op.vtestop Value.vecop (kind 3) */
type OVecVunop = TODO     /* V128Op.vunop Value.vecop (kind 3) */
type OVecVbinop = TODO    /* V128Op.vbinop Value.vecop (kind 3) */
type OVecVternop = TODO   /* V128Op.vternop Value.vecop (kind 3) */
type OVecSplatop = TODO   /* V128Op.splatop Value.vecop (kind 3) */
type OVecExtractop = TODO /* V128Op.extractop Value.vecop (kind 3) */
type OVecReplaceop = TODO /* V128Op.replaceop Value.vecop (kind 3) */
type OMemop = OUnknownTypeVariableP
type OLoadop = TODO     /* num_type pack_size * extension option (kind 3) */
type OStoreop = TODO    /* num_type pack_size option (kind 3) */
type OVecLoadop = TODO  /* vec_type pack_size * vec_extension option (kind 3) */
type OVecStoreop = TODO /* vec_type unit (kind 3) */
type OVecLaneop = TODO  /* vec_type pack_size (kind 3) */

type OInitopKind int

const (
	KExplicit OInitopKind = iota + 1
	KImplicit
)

type OInitop interface {
	Kind() OInitopKind
}

type SimpleOInitop struct {
	kind OInitopKind
}

func (t SimpleOInitop) Kind() OInitopKind {
	return t.kind
}

var _Explicit OInitop = SimpleOInitop{KExplicit}
var _Implicit OInitop = SimpleOInitop{KImplicit}

type OExternopKind int

const (
	KInternalize OExternopKind = iota + 1
	KExternalize
)

type OExternop interface {
	Kind() OExternopKind
}

type SimpleOExternop struct {
	kind OExternopKind
}

func (t SimpleOExternop) Kind() OExternopKind {
	return t.kind
}

var _Internalize OExternop = SimpleOExternop{KInternalize}
var _Externalize OExternop = SimpleOExternop{KExternalize}

type OIdx = *Phrase[OInt32]
type ONum = *Phrase[ONum]
type OVec = *Phrase[OVec]
type OName = string

type OBlockTypeKind int

const (
	KVarBlockType OBlockTypeKind = iota + 1
	KValBlockType
)

type OBlockType interface {
	Kind() OBlockTypeKind
}

type SimpleOBlockType struct {
	kind OBlockTypeKind
}

func (t SimpleOBlockType) Kind() OBlockTypeKind {
	return t.kind
}

type OBlockType_VarBlockType struct {
	V OIdx
}

func (t OBlockType_VarBlockType) Kind() OBlockTypeKind {
	return KVarBlockType
}
func _VarBlockType_1(v OIdx) OBlockType {
	return OBlockType_VarBlockType{v}
}

type OBlockType_ValBlockType struct {
	V *OValType
}

func (t OBlockType_ValBlockType) Kind() OBlockTypeKind {
	return KValBlockType
}
func _ValBlockType_1(v *OValType) OBlockType {
	return OBlockType_ValBlockType{v}
}

type OInstr = *Phrase[OInstr_]

type OInstr_Kind int

const (
	KUnreachable OInstr_Kind = iota + 1
	KNop
	KDrop
	KSelect
	KBlock
	KLoop
	KIf
	KBr
	KBrIf
	KBrTable
	KBrOnNull
	KBrOnNonNull
	KBrOnCast
	KBrOnCastFail
	KReturn
	KCall
	KCallRef
	KCallIndirect
	KReturnCall
	KReturnCallRef
	KReturnCallIndirect
	KThrow
	KThrowRef
	KTryTable
	KLocalGet
	KLocalSet
	KLocalTee
	KGlobalGet
	KGlobalSet
	KTableGet
	KTableSet
	KTableSize
	KTableGrow
	KTableFill
	KTableCopy
	KTableInit
	KElemDrop
	KLoad
	KStore
	KVecLoad
	KVecStore
	KVecLoadLane
	KVecStoreLane
	KMemorySize
	KMemoryGrow
	KMemoryFill
	KMemoryCopy
	KMemoryInit
	KDataDrop
	KConst
	KTest
	KCompare
	KUnary
	KBinary
	KConvert
	KRefNull
	KRefFunc
	KRefIsNull
	KRefAsNonNull
	KRefTest
	KRefCast
	KRefEq
	KRefI31
	KI31Get
	KStructNew
	KStructGet
	KStructSet
	KArrayNew
	KArrayNewFixed
	KArrayNewElem
	KArrayNewData
	KArrayGet
	KArraySet
	KArrayLen
	KArrayCopy
	KArrayFill
	KArrayInitData
	KArrayInitElem
	KExternConvert
	KVecConst
	KVecTest
	KVecCompare
	KVecUnary
	KVecBinary
	KVecTernary
	KVecConvert
	KVecShift
	KVecBitmask
	KVecTestBits
	KVecUnaryBits
	KVecBinaryBits
	KVecTernaryBits
	KVecSplat
	KVecExtract
	KVecReplace
)

type OInstr_ interface {
	Kind() OInstr_Kind
}

type SimpleOInstr_ struct {
	kind OInstr_Kind
}

func (t SimpleOInstr_) Kind() OInstr_Kind {
	return t.kind
}

var _Unreachable OInstr_ = SimpleOInstr_{KUnreachable}
var _Nop OInstr_ = SimpleOInstr_{KNop}
var _Drop OInstr_ = SimpleOInstr_{KDrop}

type OInstr__Select struct {
	V *[]OValType
}

func (t OInstr__Select) Kind() OInstr_Kind {
	return KSelect
}
func _Select_1(v *[]OValType) OInstr_ {
	return OInstr__Select{v}
}

type OInstr__Block struct {
	V struct {
		F0 OBlockType
		F1 []OInstr
	}
}

func (t OInstr__Block) Kind() OInstr_Kind {
	return KBlock
}
func _Block_1(v struct {
	F0 OBlockType
	F1 []OInstr
}) OInstr_ {
	return OInstr__Block{v}
}

type OInstr__Loop struct {
	V struct {
		F0 OBlockType
		F1 []OInstr
	}
}

func (t OInstr__Loop) Kind() OInstr_Kind {
	return KLoop
}
func _Loop_1(v struct {
	F0 OBlockType
	F1 []OInstr
}) OInstr_ {
	return OInstr__Loop{v}
}

type OInstr__If struct {
	V struct {
		F0 OBlockType
		F1 []OInstr
		F2 []OInstr
	}
}

func (t OInstr__If) Kind() OInstr_Kind {
	return KIf
}
func _If_1(v struct {
	F0 OBlockType
	F1 []OInstr
	F2 []OInstr
}) OInstr_ {
	return OInstr__If{v}
}

type OInstr__Br struct {
	V OIdx
}

func (t OInstr__Br) Kind() OInstr_Kind {
	return KBr
}
func _Br_1(v OIdx) OInstr_ {
	return OInstr__Br{v}
}

type OInstr__BrIf struct {
	V OIdx
}

func (t OInstr__BrIf) Kind() OInstr_Kind {
	return KBrIf
}
func _BrIf_1(v OIdx) OInstr_ {
	return OInstr__BrIf{v}
}

type OInstr__BrTable struct {
	V struct {
		F0 []OIdx
		F1 OIdx
	}
}

func (t OInstr__BrTable) Kind() OInstr_Kind {
	return KBrTable
}
func _BrTable_1(v struct {
	F0 []OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__BrTable{v}
}

type OInstr__BrOnNull struct {
	V OIdx
}

func (t OInstr__BrOnNull) Kind() OInstr_Kind {
	return KBrOnNull
}
func _BrOnNull_1(v OIdx) OInstr_ {
	return OInstr__BrOnNull{v}
}

type OInstr__BrOnNonNull struct {
	V OIdx
}

func (t OInstr__BrOnNonNull) Kind() OInstr_Kind {
	return KBrOnNonNull
}
func _BrOnNonNull_1(v OIdx) OInstr_ {
	return OInstr__BrOnNonNull{v}
}

type OInstr__BrOnCast struct {
	V struct {
		F0 OIdx
		F1 ORefType
		F2 ORefType
	}
}

func (t OInstr__BrOnCast) Kind() OInstr_Kind {
	return KBrOnCast
}
func _BrOnCast_1(v struct {
	F0 OIdx
	F1 ORefType
	F2 ORefType
}) OInstr_ {
	return OInstr__BrOnCast{v}
}

type OInstr__BrOnCastFail struct {
	V struct {
		F0 OIdx
		F1 ORefType
		F2 ORefType
	}
}

func (t OInstr__BrOnCastFail) Kind() OInstr_Kind {
	return KBrOnCastFail
}
func _BrOnCastFail_1(v struct {
	F0 OIdx
	F1 ORefType
	F2 ORefType
}) OInstr_ {
	return OInstr__BrOnCastFail{v}
}

var _Return OInstr_ = SimpleOInstr_{KReturn}

type OInstr__Call struct {
	V OIdx
}

func (t OInstr__Call) Kind() OInstr_Kind {
	return KCall
}
func _Call_1(v OIdx) OInstr_ {
	return OInstr__Call{v}
}

type OInstr__CallRef struct {
	V OIdx
}

func (t OInstr__CallRef) Kind() OInstr_Kind {
	return KCallRef
}
func _CallRef_1(v OIdx) OInstr_ {
	return OInstr__CallRef{v}
}

type OInstr__CallIndirect struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__CallIndirect) Kind() OInstr_Kind {
	return KCallIndirect
}
func _CallIndirect_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__CallIndirect{v}
}

type OInstr__ReturnCall struct {
	V OIdx
}

func (t OInstr__ReturnCall) Kind() OInstr_Kind {
	return KReturnCall
}
func _ReturnCall_1(v OIdx) OInstr_ {
	return OInstr__ReturnCall{v}
}

type OInstr__ReturnCallRef struct {
	V OIdx
}

func (t OInstr__ReturnCallRef) Kind() OInstr_Kind {
	return KReturnCallRef
}
func _ReturnCallRef_1(v OIdx) OInstr_ {
	return OInstr__ReturnCallRef{v}
}

type OInstr__ReturnCallIndirect struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ReturnCallIndirect) Kind() OInstr_Kind {
	return KReturnCallIndirect
}
func _ReturnCallIndirect_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ReturnCallIndirect{v}
}

type OInstr__Throw struct {
	V OIdx
}

func (t OInstr__Throw) Kind() OInstr_Kind {
	return KThrow
}
func _Throw_1(v OIdx) OInstr_ {
	return OInstr__Throw{v}
}

var _ThrowRef OInstr_ = SimpleOInstr_{KThrowRef}

type OInstr__TryTable struct {
	V struct {
		F0 OBlockType
		F1 []OCatch
		F2 []OInstr
	}
}

func (t OInstr__TryTable) Kind() OInstr_Kind {
	return KTryTable
}
func _TryTable_1(v struct {
	F0 OBlockType
	F1 []OCatch
	F2 []OInstr
}) OInstr_ {
	return OInstr__TryTable{v}
}

type OInstr__LocalGet struct {
	V OIdx
}

func (t OInstr__LocalGet) Kind() OInstr_Kind {
	return KLocalGet
}
func _LocalGet_1(v OIdx) OInstr_ {
	return OInstr__LocalGet{v}
}

type OInstr__LocalSet struct {
	V OIdx
}

func (t OInstr__LocalSet) Kind() OInstr_Kind {
	return KLocalSet
}
func _LocalSet_1(v OIdx) OInstr_ {
	return OInstr__LocalSet{v}
}

type OInstr__LocalTee struct {
	V OIdx
}

func (t OInstr__LocalTee) Kind() OInstr_Kind {
	return KLocalTee
}
func _LocalTee_1(v OIdx) OInstr_ {
	return OInstr__LocalTee{v}
}

type OInstr__GlobalGet struct {
	V OIdx
}

func (t OInstr__GlobalGet) Kind() OInstr_Kind {
	return KGlobalGet
}
func _GlobalGet_1(v OIdx) OInstr_ {
	return OInstr__GlobalGet{v}
}

type OInstr__GlobalSet struct {
	V OIdx
}

func (t OInstr__GlobalSet) Kind() OInstr_Kind {
	return KGlobalSet
}
func _GlobalSet_1(v OIdx) OInstr_ {
	return OInstr__GlobalSet{v}
}

type OInstr__TableGet struct {
	V OIdx
}

func (t OInstr__TableGet) Kind() OInstr_Kind {
	return KTableGet
}
func _TableGet_1(v OIdx) OInstr_ {
	return OInstr__TableGet{v}
}

type OInstr__TableSet struct {
	V OIdx
}

func (t OInstr__TableSet) Kind() OInstr_Kind {
	return KTableSet
}
func _TableSet_1(v OIdx) OInstr_ {
	return OInstr__TableSet{v}
}

type OInstr__TableSize struct {
	V OIdx
}

func (t OInstr__TableSize) Kind() OInstr_Kind {
	return KTableSize
}
func _TableSize_1(v OIdx) OInstr_ {
	return OInstr__TableSize{v}
}

type OInstr__TableGrow struct {
	V OIdx
}

func (t OInstr__TableGrow) Kind() OInstr_Kind {
	return KTableGrow
}
func _TableGrow_1(v OIdx) OInstr_ {
	return OInstr__TableGrow{v}
}

type OInstr__TableFill struct {
	V OIdx
}

func (t OInstr__TableFill) Kind() OInstr_Kind {
	return KTableFill
}
func _TableFill_1(v OIdx) OInstr_ {
	return OInstr__TableFill{v}
}

type OInstr__TableCopy struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__TableCopy) Kind() OInstr_Kind {
	return KTableCopy
}
func _TableCopy_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__TableCopy{v}
}

type OInstr__TableInit struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__TableInit) Kind() OInstr_Kind {
	return KTableInit
}
func _TableInit_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__TableInit{v}
}

type OInstr__ElemDrop struct {
	V OIdx
}

func (t OInstr__ElemDrop) Kind() OInstr_Kind {
	return KElemDrop
}
func _ElemDrop_1(v OIdx) OInstr_ {
	return OInstr__ElemDrop{v}
}

type OInstr__Load struct {
	V struct {
		F0 OIdx
		F1 OLoadop
	}
}

func (t OInstr__Load) Kind() OInstr_Kind {
	return KLoad
}
func _Load_1(v struct {
	F0 OIdx
	F1 OLoadop
}) OInstr_ {
	return OInstr__Load{v}
}

type OInstr__Store struct {
	V struct {
		F0 OIdx
		F1 OStoreop
	}
}

func (t OInstr__Store) Kind() OInstr_Kind {
	return KStore
}
func _Store_1(v struct {
	F0 OIdx
	F1 OStoreop
}) OInstr_ {
	return OInstr__Store{v}
}

type OInstr__VecLoad struct {
	V struct {
		F0 OIdx
		F1 OVecLoadop
	}
}

func (t OInstr__VecLoad) Kind() OInstr_Kind {
	return KVecLoad
}
func _VecLoad_1(v struct {
	F0 OIdx
	F1 OVecLoadop
}) OInstr_ {
	return OInstr__VecLoad{v}
}

type OInstr__VecStore struct {
	V struct {
		F0 OIdx
		F1 OVecStoreop
	}
}

func (t OInstr__VecStore) Kind() OInstr_Kind {
	return KVecStore
}
func _VecStore_1(v struct {
	F0 OIdx
	F1 OVecStoreop
}) OInstr_ {
	return OInstr__VecStore{v}
}

type OInstr__VecLoadLane struct {
	V struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}
}

func (t OInstr__VecLoadLane) Kind() OInstr_Kind {
	return KVecLoadLane
}
func _VecLoadLane_1(v struct {
	F0 OIdx
	F1 OVecLaneop
	F2 OInt
}) OInstr_ {
	return OInstr__VecLoadLane{v}
}

type OInstr__VecStoreLane struct {
	V struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}
}

func (t OInstr__VecStoreLane) Kind() OInstr_Kind {
	return KVecStoreLane
}
func _VecStoreLane_1(v struct {
	F0 OIdx
	F1 OVecLaneop
	F2 OInt
}) OInstr_ {
	return OInstr__VecStoreLane{v}
}

type OInstr__MemorySize struct {
	V OIdx
}

func (t OInstr__MemorySize) Kind() OInstr_Kind {
	return KMemorySize
}
func _MemorySize_1(v OIdx) OInstr_ {
	return OInstr__MemorySize{v}
}

type OInstr__MemoryGrow struct {
	V OIdx
}

func (t OInstr__MemoryGrow) Kind() OInstr_Kind {
	return KMemoryGrow
}
func _MemoryGrow_1(v OIdx) OInstr_ {
	return OInstr__MemoryGrow{v}
}

type OInstr__MemoryFill struct {
	V OIdx
}

func (t OInstr__MemoryFill) Kind() OInstr_Kind {
	return KMemoryFill
}
func _MemoryFill_1(v OIdx) OInstr_ {
	return OInstr__MemoryFill{v}
}

type OInstr__MemoryCopy struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__MemoryCopy) Kind() OInstr_Kind {
	return KMemoryCopy
}
func _MemoryCopy_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__MemoryCopy{v}
}

type OInstr__MemoryInit struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__MemoryInit) Kind() OInstr_Kind {
	return KMemoryInit
}
func _MemoryInit_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__MemoryInit{v}
}

type OInstr__DataDrop struct {
	V OIdx
}

func (t OInstr__DataDrop) Kind() OInstr_Kind {
	return KDataDrop
}
func _DataDrop_1(v OIdx) OInstr_ {
	return OInstr__DataDrop{v}
}

type OInstr__Const struct {
	V ONum
}

func (t OInstr__Const) Kind() OInstr_Kind {
	return KConst
}
func _Const_1(v ONum) OInstr_ {
	return OInstr__Const{v}
}

type OInstr__Test struct {
	V OTestop
}

func (t OInstr__Test) Kind() OInstr_Kind {
	return KTest
}
func _Test_1(v OTestop) OInstr_ {
	return OInstr__Test{v}
}

type OInstr__Compare struct {
	V ORelop
}

func (t OInstr__Compare) Kind() OInstr_Kind {
	return KCompare
}
func _Compare_1(v ORelop) OInstr_ {
	return OInstr__Compare{v}
}

type OInstr__Unary struct {
	V OUnop
}

func (t OInstr__Unary) Kind() OInstr_Kind {
	return KUnary
}
func _Unary_1(v OUnop) OInstr_ {
	return OInstr__Unary{v}
}

type OInstr__Binary struct {
	V OBinop
}

func (t OInstr__Binary) Kind() OInstr_Kind {
	return KBinary
}
func _Binary_1(v OBinop) OInstr_ {
	return OInstr__Binary{v}
}

type OInstr__Convert struct {
	V OCvtop
}

func (t OInstr__Convert) Kind() OInstr_Kind {
	return KConvert
}
func _Convert_1(v OCvtop) OInstr_ {
	return OInstr__Convert{v}
}

type OInstr__RefNull struct {
	V OHeapType
}

func (t OInstr__RefNull) Kind() OInstr_Kind {
	return KRefNull
}
func _RefNull_1(v OHeapType) OInstr_ {
	return OInstr__RefNull{v}
}

type OInstr__RefFunc struct {
	V OIdx
}

func (t OInstr__RefFunc) Kind() OInstr_Kind {
	return KRefFunc
}
func _RefFunc_1(v OIdx) OInstr_ {
	return OInstr__RefFunc{v}
}

var _RefIsNull OInstr_ = SimpleOInstr_{KRefIsNull}
var _RefAsNonNull OInstr_ = SimpleOInstr_{KRefAsNonNull}

type OInstr__RefTest struct {
	V ORefType
}

func (t OInstr__RefTest) Kind() OInstr_Kind {
	return KRefTest
}
func _RefTest_1(v ORefType) OInstr_ {
	return OInstr__RefTest{v}
}

type OInstr__RefCast struct {
	V ORefType
}

func (t OInstr__RefCast) Kind() OInstr_Kind {
	return KRefCast
}
func _RefCast_1(v ORefType) OInstr_ {
	return OInstr__RefCast{v}
}

var _RefEq OInstr_ = SimpleOInstr_{KRefEq}
var _RefI31 OInstr_ = SimpleOInstr_{KRefI31}

type OInstr__I31Get struct {
	V OExtension
}

func (t OInstr__I31Get) Kind() OInstr_Kind {
	return KI31Get
}
func _I31Get_1(v OExtension) OInstr_ {
	return OInstr__I31Get{v}
}

type OInstr__StructNew struct {
	V struct {
		F0 OIdx
		F1 OInitop
	}
}

func (t OInstr__StructNew) Kind() OInstr_Kind {
	return KStructNew
}
func _StructNew_1(v struct {
	F0 OIdx
	F1 OInitop
}) OInstr_ {
	return OInstr__StructNew{v}
}

type OInstr__StructGet struct {
	V struct {
		F0 OIdx
		F1 OIdx
		F2 *OExtension
	}
}

func (t OInstr__StructGet) Kind() OInstr_Kind {
	return KStructGet
}
func _StructGet_1(v struct {
	F0 OIdx
	F1 OIdx
	F2 *OExtension
}) OInstr_ {
	return OInstr__StructGet{v}
}

type OInstr__StructSet struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__StructSet) Kind() OInstr_Kind {
	return KStructSet
}
func _StructSet_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__StructSet{v}
}

type OInstr__ArrayNew struct {
	V struct {
		F0 OIdx
		F1 OInitop
	}
}

func (t OInstr__ArrayNew) Kind() OInstr_Kind {
	return KArrayNew
}
func _ArrayNew_1(v struct {
	F0 OIdx
	F1 OInitop
}) OInstr_ {
	return OInstr__ArrayNew{v}
}

type OInstr__ArrayNewFixed struct {
	V struct {
		F0 OIdx
		F1 OInt32
	}
}

func (t OInstr__ArrayNewFixed) Kind() OInstr_Kind {
	return KArrayNewFixed
}
func _ArrayNewFixed_1(v struct {
	F0 OIdx
	F1 OInt32
}) OInstr_ {
	return OInstr__ArrayNewFixed{v}
}

type OInstr__ArrayNewElem struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ArrayNewElem) Kind() OInstr_Kind {
	return KArrayNewElem
}
func _ArrayNewElem_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ArrayNewElem{v}
}

type OInstr__ArrayNewData struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ArrayNewData) Kind() OInstr_Kind {
	return KArrayNewData
}
func _ArrayNewData_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ArrayNewData{v}
}

type OInstr__ArrayGet struct {
	V struct {
		F0 OIdx
		F1 *OExtension
	}
}

func (t OInstr__ArrayGet) Kind() OInstr_Kind {
	return KArrayGet
}
func _ArrayGet_1(v struct {
	F0 OIdx
	F1 *OExtension
}) OInstr_ {
	return OInstr__ArrayGet{v}
}

type OInstr__ArraySet struct {
	V OIdx
}

func (t OInstr__ArraySet) Kind() OInstr_Kind {
	return KArraySet
}
func _ArraySet_1(v OIdx) OInstr_ {
	return OInstr__ArraySet{v}
}

var _ArrayLen OInstr_ = SimpleOInstr_{KArrayLen}

type OInstr__ArrayCopy struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ArrayCopy) Kind() OInstr_Kind {
	return KArrayCopy
}
func _ArrayCopy_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ArrayCopy{v}
}

type OInstr__ArrayFill struct {
	V OIdx
}

func (t OInstr__ArrayFill) Kind() OInstr_Kind {
	return KArrayFill
}
func _ArrayFill_1(v OIdx) OInstr_ {
	return OInstr__ArrayFill{v}
}

type OInstr__ArrayInitData struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ArrayInitData) Kind() OInstr_Kind {
	return KArrayInitData
}
func _ArrayInitData_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ArrayInitData{v}
}

type OInstr__ArrayInitElem struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OInstr__ArrayInitElem) Kind() OInstr_Kind {
	return KArrayInitElem
}
func _ArrayInitElem_1(v struct {
	F0 OIdx
	F1 OIdx
}) OInstr_ {
	return OInstr__ArrayInitElem{v}
}

type OInstr__ExternConvert struct {
	V OExternop
}

func (t OInstr__ExternConvert) Kind() OInstr_Kind {
	return KExternConvert
}
func _ExternConvert_1(v OExternop) OInstr_ {
	return OInstr__ExternConvert{v}
}

type OInstr__VecConst struct {
	V OVec
}

func (t OInstr__VecConst) Kind() OInstr_Kind {
	return KVecConst
}
func _VecConst_1(v OVec) OInstr_ {
	return OInstr__VecConst{v}
}

type OInstr__VecTest struct {
	V OVecTestop
}

func (t OInstr__VecTest) Kind() OInstr_Kind {
	return KVecTest
}
func _VecTest_1(v OVecTestop) OInstr_ {
	return OInstr__VecTest{v}
}

type OInstr__VecCompare struct {
	V OVecRelop
}

func (t OInstr__VecCompare) Kind() OInstr_Kind {
	return KVecCompare
}
func _VecCompare_1(v OVecRelop) OInstr_ {
	return OInstr__VecCompare{v}
}

type OInstr__VecUnary struct {
	V OVecUnop
}

func (t OInstr__VecUnary) Kind() OInstr_Kind {
	return KVecUnary
}
func _VecUnary_1(v OVecUnop) OInstr_ {
	return OInstr__VecUnary{v}
}

type OInstr__VecBinary struct {
	V OVecBinop
}

func (t OInstr__VecBinary) Kind() OInstr_Kind {
	return KVecBinary
}
func _VecBinary_1(v OVecBinop) OInstr_ {
	return OInstr__VecBinary{v}
}

type OInstr__VecTernary struct {
	V OVecTernop
}

func (t OInstr__VecTernary) Kind() OInstr_Kind {
	return KVecTernary
}
func _VecTernary_1(v OVecTernop) OInstr_ {
	return OInstr__VecTernary{v}
}

type OInstr__VecConvert struct {
	V OVecCvtop
}

func (t OInstr__VecConvert) Kind() OInstr_Kind {
	return KVecConvert
}
func _VecConvert_1(v OVecCvtop) OInstr_ {
	return OInstr__VecConvert{v}
}

type OInstr__VecShift struct {
	V OVecShiftop
}

func (t OInstr__VecShift) Kind() OInstr_Kind {
	return KVecShift
}
func _VecShift_1(v OVecShiftop) OInstr_ {
	return OInstr__VecShift{v}
}

type OInstr__VecBitmask struct {
	V OVecBitmaskop
}

func (t OInstr__VecBitmask) Kind() OInstr_Kind {
	return KVecBitmask
}
func _VecBitmask_1(v OVecBitmaskop) OInstr_ {
	return OInstr__VecBitmask{v}
}

type OInstr__VecTestBits struct {
	V OVecVtestop
}

func (t OInstr__VecTestBits) Kind() OInstr_Kind {
	return KVecTestBits
}
func _VecTestBits_1(v OVecVtestop) OInstr_ {
	return OInstr__VecTestBits{v}
}

type OInstr__VecUnaryBits struct {
	V OVecVunop
}

func (t OInstr__VecUnaryBits) Kind() OInstr_Kind {
	return KVecUnaryBits
}
func _VecUnaryBits_1(v OVecVunop) OInstr_ {
	return OInstr__VecUnaryBits{v}
}

type OInstr__VecBinaryBits struct {
	V OVecVbinop
}

func (t OInstr__VecBinaryBits) Kind() OInstr_Kind {
	return KVecBinaryBits
}
func _VecBinaryBits_1(v OVecVbinop) OInstr_ {
	return OInstr__VecBinaryBits{v}
}

type OInstr__VecTernaryBits struct {
	V OVecVternop
}

func (t OInstr__VecTernaryBits) Kind() OInstr_Kind {
	return KVecTernaryBits
}
func _VecTernaryBits_1(v OVecVternop) OInstr_ {
	return OInstr__VecTernaryBits{v}
}

type OInstr__VecSplat struct {
	V OVecSplatop
}

func (t OInstr__VecSplat) Kind() OInstr_Kind {
	return KVecSplat
}
func _VecSplat_1(v OVecSplatop) OInstr_ {
	return OInstr__VecSplat{v}
}

type OInstr__VecExtract struct {
	V OVecExtractop
}

func (t OInstr__VecExtract) Kind() OInstr_Kind {
	return KVecExtract
}
func _VecExtract_1(v OVecExtractop) OInstr_ {
	return OInstr__VecExtract{v}
}

type OInstr__VecReplace struct {
	V OVecReplaceop
}

func (t OInstr__VecReplace) Kind() OInstr_Kind {
	return KVecReplace
}
func _VecReplace_1(v OVecReplaceop) OInstr_ {
	return OInstr__VecReplace{v}
}

type OCatch = *Phrase[OCatch_]

type OCatch_Kind int

const (
	KCatch OCatch_Kind = iota + 1
	KCatchRef
	KCatchAll
	KCatchAllRef
)

type OCatch_ interface {
	Kind() OCatch_Kind
}

type SimpleOCatch_ struct {
	kind OCatch_Kind
}

func (t SimpleOCatch_) Kind() OCatch_Kind {
	return t.kind
}

type OCatch__Catch struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OCatch__Catch) Kind() OCatch_Kind {
	return KCatch
}
func _Catch_1(v struct {
	F0 OIdx
	F1 OIdx
}) OCatch_ {
	return OCatch__Catch{v}
}

type OCatch__CatchRef struct {
	V struct {
		F0 OIdx
		F1 OIdx
	}
}

func (t OCatch__CatchRef) Kind() OCatch_Kind {
	return KCatchRef
}
func _CatchRef_1(v struct {
	F0 OIdx
	F1 OIdx
}) OCatch_ {
	return OCatch__CatchRef{v}
}

type OCatch__CatchAll struct {
	V OIdx
}

func (t OCatch__CatchAll) Kind() OCatch_Kind {
	return KCatchAll
}
func _CatchAll_1(v OIdx) OCatch_ {
	return OCatch__CatchAll{v}
}

type OCatch__CatchAllRef struct {
	V OIdx
}

func (t OCatch__CatchAllRef) Kind() OCatch_Kind {
	return KCatchAllRef
}
func _CatchAllRef_1(v OIdx) OCatch_ {
	return OCatch__CatchAllRef{v}
}

type OConst = *Phrase[[]OInstr]
type OLocal = *Phrase[OLocal_]
type OLocal_ struct {
	Ltype OValType
}
type OGlobal = *Phrase[OGlobal_]
type OGlobal_ struct {
	Gtype OGlobalType
	Ginit OConst
}
type OFunc = *Phrase[OFunc_]
type OFunc_ struct {
	Ftype  OIdx
	Locals []OLocal
	Body   []OInstr
}
type OTable = *Phrase[OTable_]
type OTable_ struct {
	Ttype OTableType
	Tinit OConst
}
type OMemory = *Phrase[OMemory_]
type OMemory_ struct {
	Mtype OMemoryType
}
type OTag = *Phrase[OTag_]
type OTag_ struct {
	Tgtype OIdx
}
type OSegmentMode = *Phrase[OSegmentMode_]

type OSegmentMode_Kind int

const (
	KPassive OSegmentMode_Kind = iota + 1
	KActive
	KDeclarative
)

type OSegmentMode_ interface {
	Kind() OSegmentMode_Kind
}

type SimpleOSegmentMode_ struct {
	kind OSegmentMode_Kind
}

func (t SimpleOSegmentMode_) Kind() OSegmentMode_Kind {
	return t.kind
}

var _Passive OSegmentMode_ = SimpleOSegmentMode_{KPassive}

type OSegmentMode__Active struct {
	V struct {
		Index  OIdx
		Offset OConst
	}
}

func (t OSegmentMode__Active) Kind() OSegmentMode_Kind {
	return KActive
}
func _Active_1(v struct {
	Index  OIdx
	Offset OConst
}) OSegmentMode_ {
	return OSegmentMode__Active{v}
}

var _Declarative OSegmentMode_ = SimpleOSegmentMode_{KDeclarative}

type OElemSegment = *Phrase[OElemSegment_]
type OElemSegment_ struct {
	Etype ORefType
	Einit []OConst
	Emode OSegmentMode
}
type ODataSegment = *Phrase[ODataSegment_]
type ODataSegment_ struct {
	Dinit string
	Dmode OSegmentMode
}
type OType = *Phrase[ORecType]
type OExportDesc = *Phrase[OExportDesc_]

type OExportDesc_Kind int

const (
	KFuncExport OExportDesc_Kind = iota + 1
	KTableExport
	KMemoryExport
	KGlobalExport
	KTagExport
)

type OExportDesc_ interface {
	Kind() OExportDesc_Kind
}

type SimpleOExportDesc_ struct {
	kind OExportDesc_Kind
}

func (t SimpleOExportDesc_) Kind() OExportDesc_Kind {
	return t.kind
}

type OExportDesc__FuncExport struct {
	V OIdx
}

func (t OExportDesc__FuncExport) Kind() OExportDesc_Kind {
	return KFuncExport
}
func _FuncExport_1(v OIdx) OExportDesc_ {
	return OExportDesc__FuncExport{v}
}

type OExportDesc__TableExport struct {
	V OIdx
}

func (t OExportDesc__TableExport) Kind() OExportDesc_Kind {
	return KTableExport
}
func _TableExport_1(v OIdx) OExportDesc_ {
	return OExportDesc__TableExport{v}
}

type OExportDesc__MemoryExport struct {
	V OIdx
}

func (t OExportDesc__MemoryExport) Kind() OExportDesc_Kind {
	return KMemoryExport
}
func _MemoryExport_1(v OIdx) OExportDesc_ {
	return OExportDesc__MemoryExport{v}
}

type OExportDesc__GlobalExport struct {
	V OIdx
}

func (t OExportDesc__GlobalExport) Kind() OExportDesc_Kind {
	return KGlobalExport
}
func _GlobalExport_1(v OIdx) OExportDesc_ {
	return OExportDesc__GlobalExport{v}
}

type OExportDesc__TagExport struct {
	V OIdx
}

func (t OExportDesc__TagExport) Kind() OExportDesc_Kind {
	return KTagExport
}
func _TagExport_1(v OIdx) OExportDesc_ {
	return OExportDesc__TagExport{v}
}

type OExport = *Phrase[OExport_]
type OExport_ struct {
	Name  OName
	Edesc OExportDesc
}
type OImportDesc = *Phrase[OImportDesc_]

type OImportDesc_Kind int

const (
	KFuncImport OImportDesc_Kind = iota + 1
	KTableImport
	KMemoryImport
	KGlobalImport
	KTagImport
)

type OImportDesc_ interface {
	Kind() OImportDesc_Kind
}

type SimpleOImportDesc_ struct {
	kind OImportDesc_Kind
}

func (t SimpleOImportDesc_) Kind() OImportDesc_Kind {
	return t.kind
}

type OImportDesc__FuncImport struct {
	V OIdx
}

func (t OImportDesc__FuncImport) Kind() OImportDesc_Kind {
	return KFuncImport
}
func _FuncImport_1(v OIdx) OImportDesc_ {
	return OImportDesc__FuncImport{v}
}

type OImportDesc__TableImport struct {
	V OTableType
}

func (t OImportDesc__TableImport) Kind() OImportDesc_Kind {
	return KTableImport
}
func _TableImport_1(v OTableType) OImportDesc_ {
	return OImportDesc__TableImport{v}
}

type OImportDesc__MemoryImport struct {
	V OMemoryType
}

func (t OImportDesc__MemoryImport) Kind() OImportDesc_Kind {
	return KMemoryImport
}
func _MemoryImport_1(v OMemoryType) OImportDesc_ {
	return OImportDesc__MemoryImport{v}
}

type OImportDesc__GlobalImport struct {
	V OGlobalType
}

func (t OImportDesc__GlobalImport) Kind() OImportDesc_Kind {
	return KGlobalImport
}
func _GlobalImport_1(v OGlobalType) OImportDesc_ {
	return OImportDesc__GlobalImport{v}
}

type OImportDesc__TagImport struct {
	V OIdx
}

func (t OImportDesc__TagImport) Kind() OImportDesc_Kind {
	return KTagImport
}
func _TagImport_1(v OIdx) OImportDesc_ {
	return OImportDesc__TagImport{v}
}

type OImport = *Phrase[OImport_]
type OImport_ struct {
	ModuleName OName
	ItemName   OName
	Idesc      OImportDesc
}
type OStart = *Phrase[OStart_]
type OStart_ struct {
	Sfunc OIdx
}
type OModule = *Phrase[OModule_]
type OModule_ struct {
	Types    []OType
	Globals  []OGlobal
	Tables   []OTable
	Memories []OMemory
	Tags     []OTag
	Funcs    []OFunc
	Start    *OStart
	Elems    []OElemSegment
	Datas    []ODataSegment
	Imports  []OImport
	Exports  []OExport
}

var _empty_module = nil /* TODO: record_expression */
func _i32_const_1(_n *Phrase[OTypeIdx]) OInstr_ {
	__tmp1 := _Const_1(_operatorAtAt_2(_I32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var _i32_const = _i32_const_1

func _i64_const_1(_n *Phrase[OInt64]) OInstr_ {
	__tmp1 := _Const_1(_operatorAtAt_2(_I64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var _i64_const = _i64_const_1

func _f32_const_1(_n *Phrase[float32]) OInstr_ {
	__tmp1 := _Const_1(_operatorAtAt_2(_F32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var _f32_const = _f32_const_1

func _f64_const_1(_n *Phrase[float64]) OInstr_ {
	__tmp1 := _Const_1(_operatorAtAt_2(_F64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var _f64_const = _f64_const_1

func _v128_const_1(_n *Phrase[V128]) OInstr_ {
	__tmp1 := _VecConst_1(_operatorAtAt_2(_V128_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var _v128_const = _v128_const_1

func _ref_null_1(_t OHeapType) OInstr_ {
	__tmp1 := _RefNull_1(_t)
	return __tmp1
}

var _ref_null = _ref_null_1

func _ref_func_1(_x OIdx) OInstr_ {
	__tmp1 := _RefFunc_1(_x)
	return __tmp1
}

var _ref_func = _ref_func_1

func _at_const_0() func(OAddrType) func(*Phrase[OInt64]) OInstr_ {
	TODO /* unknown expression type function_expression */
}

var _at_const = _at_const_0

var _unreachable = _Unreachable
var _nop = _Nop
var _drop = _Drop

func _select_1(_t *[]OValType) OInstr_ {
	__tmp1 := _Select_1(_t)
	return __tmp1
}

var _select = _select_1

func _block_2(_bt OBlockType, _es []OInstr) OInstr_ {
	__tmp1 := _Block_1(struct {
		F0 OBlockType
		F1 []OInstr
	}{_bt, _es})
	return __tmp1
}

func _block_1(_bt OBlockType) func(_es []OInstr) OInstr_ {
	return func(_es []OInstr) OInstr_ {
		return _block_2(_bt, _es)
	}
}

var _block = _block_2

func _loop_2(_bt OBlockType, _es []OInstr) OInstr_ {
	__tmp1 := _Loop_1(struct {
		F0 OBlockType
		F1 []OInstr
	}{_bt, _es})
	return __tmp1
}

func _loop_1(_bt OBlockType) func(_es []OInstr) OInstr_ {
	return func(_es []OInstr) OInstr_ {
		return _loop_2(_bt, _es)
	}
}

var _loop = _loop_2

func _if__3(_bt OBlockType, _es1 []OInstr, _es2 []OInstr) OInstr_ {
	__tmp1 := _If_1(struct {
		F0 OBlockType
		F1 []OInstr
		F2 []OInstr
	}{_bt, _es1, _es2})
	return __tmp1
}

func _if__2(_bt OBlockType, _es1 []OInstr) func(_es2 []OInstr) OInstr_ {
	return func(_es2 []OInstr) OInstr_ {
		return _if__3(_bt, _es1, _es2)
	}
}

func _if__1(_bt OBlockType) func(_es1 []OInstr, _es2 []OInstr) OInstr_ {
	return func(_es1 []OInstr, _es2 []OInstr) OInstr_ {
		return _if__3(_bt, _es1, _es2)
	}
}

var _if_ = _if__3

func _br_1(_x OIdx) OInstr_ {
	__tmp1 := _Br_1(_x)
	return __tmp1
}

var _br = _br_1

func _br_if_1(_x OIdx) OInstr_ {
	__tmp1 := _BrIf_1(_x)
	return __tmp1
}

var _br_if = _br_if_1

func _br_table_2(_xs []OIdx, _x OIdx) OInstr_ {
	__tmp1 := _BrTable_1(struct {
		F0 []OIdx
		F1 OIdx
	}{_xs, _x})
	return __tmp1
}

func _br_table_1(_xs []OIdx) func(_x OIdx) OInstr_ {
	return func(_x OIdx) OInstr_ {
		return _br_table_2(_xs, _x)
	}
}

var _br_table = _br_table_2

func _br_on_null_1(_x OIdx) OInstr_ {
	__tmp1 := _BrOnNull_1(_x)
	return __tmp1
}

var _br_on_null = _br_on_null_1

func _br_on_non_null_1(_x OIdx) OInstr_ {
	__tmp1 := _BrOnNonNull_1(_x)
	return __tmp1
}

var _br_on_non_null = _br_on_non_null_1

func _br_on_cast_3(_x OIdx, _t1 ORefType, _t2 ORefType) OInstr_ {
	__tmp1 := _BrOnCast_1(struct {
		F0 OIdx
		F1 ORefType
		F2 ORefType
	}{_x, _t1, _t2})
	return __tmp1
}

func _br_on_cast_2(_x OIdx, _t1 ORefType) func(_t2 ORefType) OInstr_ {
	return func(_t2 ORefType) OInstr_ {
		return _br_on_cast_3(_x, _t1, _t2)
	}
}

func _br_on_cast_1(_x OIdx) func(_t1 ORefType, _t2 ORefType) OInstr_ {
	return func(_t1 ORefType, _t2 ORefType) OInstr_ {
		return _br_on_cast_3(_x, _t1, _t2)
	}
}

var _br_on_cast = _br_on_cast_3

func _br_on_cast_fail_3(_x OIdx, _t1 ORefType, _t2 ORefType) OInstr_ {
	__tmp1 := _BrOnCastFail_1(struct {
		F0 OIdx
		F1 ORefType
		F2 ORefType
	}{_x, _t1, _t2})
	return __tmp1
}

func _br_on_cast_fail_2(_x OIdx, _t1 ORefType) func(_t2 ORefType) OInstr_ {
	return func(_t2 ORefType) OInstr_ {
		return _br_on_cast_fail_3(_x, _t1, _t2)
	}
}

func _br_on_cast_fail_1(_x OIdx) func(_t1 ORefType, _t2 ORefType) OInstr_ {
	return func(_t1 ORefType, _t2 ORefType) OInstr_ {
		return _br_on_cast_fail_3(_x, _t1, _t2)
	}
}

var _br_on_cast_fail = _br_on_cast_fail_3

func _catch_2(_x1 OIdx, _x2 OIdx) OCatch_ {
	__tmp1 := _Catch_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x1, _x2})
	return __tmp1
}

func _catch_1(_x1 OIdx) func(_x2 OIdx) OCatch_ {
	return func(_x2 OIdx) OCatch_ {
		return _catch_2(_x1, _x2)
	}
}

var _catch = _catch_2

func _catch_ref_2(_x1 OIdx, _x2 OIdx) OCatch_ {
	__tmp1 := _CatchRef_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x1, _x2})
	return __tmp1
}

func _catch_ref_1(_x1 OIdx) func(_x2 OIdx) OCatch_ {
	return func(_x2 OIdx) OCatch_ {
		return _catch_ref_2(_x1, _x2)
	}
}

var _catch_ref = _catch_ref_2

func _catch_all_1(_x OIdx) OCatch_ {
	__tmp1 := _CatchAll_1(_x)
	return __tmp1
}

var _catch_all = _catch_all_1

func _catch_all_ref_1(_x OIdx) OCatch_ {
	__tmp1 := _CatchAllRef_1(_x)
	return __tmp1
}

var _catch_all_ref = _catch_all_ref_1

var _return = _Return

func _call_1(_x OIdx) OInstr_ {
	__tmp1 := _Call_1(_x)
	return __tmp1
}

var _call = _call_1

func _call_ref_1(_x OIdx) OInstr_ {
	__tmp1 := _CallRef_1(_x)
	return __tmp1
}

var _call_ref = _call_ref_1

func _call_indirect_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _CallIndirect_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _call_indirect_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _call_indirect_2(_x, _y)
	}
}

var _call_indirect = _call_indirect_2

func _return_call_1(_x OIdx) OInstr_ {
	__tmp1 := _ReturnCall_1(_x)
	return __tmp1
}

var _return_call = _return_call_1

func _return_call_ref_1(_x OIdx) OInstr_ {
	__tmp1 := _ReturnCallRef_1(_x)
	return __tmp1
}

var _return_call_ref = _return_call_ref_1

func _return_call_indirect_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ReturnCallIndirect_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _return_call_indirect_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _return_call_indirect_2(_x, _y)
	}
}

var _return_call_indirect = _return_call_indirect_2

func _throw_1(_x OIdx) OInstr_ {
	__tmp1 := _Throw_1(_x)
	return __tmp1
}

var _throw = _throw_1

var _throw_ref = _ThrowRef

func _try_table_3(_bt OBlockType, _cs []OCatch, _es []OInstr) OInstr_ {
	__tmp1 := _TryTable_1(struct {
		F0 OBlockType
		F1 []OCatch
		F2 []OInstr
	}{_bt, _cs, _es})
	return __tmp1
}

func _try_table_2(_bt OBlockType, _cs []OCatch) func(_es []OInstr) OInstr_ {
	return func(_es []OInstr) OInstr_ {
		return _try_table_3(_bt, _cs, _es)
	}
}

func _try_table_1(_bt OBlockType) func(_cs []OCatch, _es []OInstr) OInstr_ {
	return func(_cs []OCatch, _es []OInstr) OInstr_ {
		return _try_table_3(_bt, _cs, _es)
	}
}

var _try_table = _try_table_3

func _local_get_1(_x OIdx) OInstr_ {
	__tmp1 := _LocalGet_1(_x)
	return __tmp1
}

var _local_get = _local_get_1

func _local_set_1(_x OIdx) OInstr_ {
	__tmp1 := _LocalSet_1(_x)
	return __tmp1
}

var _local_set = _local_set_1

func _local_tee_1(_x OIdx) OInstr_ {
	__tmp1 := _LocalTee_1(_x)
	return __tmp1
}

var _local_tee = _local_tee_1

func _global_get_1(_x OIdx) OInstr_ {
	__tmp1 := _GlobalGet_1(_x)
	return __tmp1
}

var _global_get = _global_get_1

func _global_set_1(_x OIdx) OInstr_ {
	__tmp1 := _GlobalSet_1(_x)
	return __tmp1
}

var _global_set = _global_set_1

func _table_get_1(_x OIdx) OInstr_ {
	__tmp1 := _TableGet_1(_x)
	return __tmp1
}

var _table_get = _table_get_1

func _table_set_1(_x OIdx) OInstr_ {
	__tmp1 := _TableSet_1(_x)
	return __tmp1
}

var _table_set = _table_set_1

func _table_size_1(_x OIdx) OInstr_ {
	__tmp1 := _TableSize_1(_x)
	return __tmp1
}

var _table_size = _table_size_1

func _table_grow_1(_x OIdx) OInstr_ {
	__tmp1 := _TableGrow_1(_x)
	return __tmp1
}

var _table_grow = _table_grow_1

func _table_fill_1(_x OIdx) OInstr_ {
	__tmp1 := _TableFill_1(_x)
	return __tmp1
}

var _table_fill = _table_fill_1

func _table_copy_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _TableCopy_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _table_copy_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _table_copy_2(_x, _y)
	}
}

var _table_copy = _table_copy_2

func _table_init_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _TableInit_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _table_init_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _table_init_2(_x, _y)
	}
}

var _table_init = _table_init_2

func _elem_drop_1(_x OIdx) OInstr_ {
	__tmp1 := _ElemDrop_1(_x)
	return __tmp1
}

var _elem_drop = _elem_drop_1

func _i32_load_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_load_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_load_3(_x, _align, _offset)
	}
}

func _i32_load_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_load_3(_x, _align, _offset)
	}
}

var _i32_load = _i32_load_3

func _i64_load_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load_3(_x, _align, _offset)
	}
}

func _i64_load_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load_3(_x, _align, _offset)
	}
}

var _i64_load = _i64_load_3

func _f32_load_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _f32_load_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _f32_load_3(_x, _align, _offset)
	}
}

func _f32_load_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _f32_load_3(_x, _align, _offset)
	}
}

var _f32_load = _f32_load_3

func _f64_load_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _f64_load_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _f64_load_3(_x, _align, _offset)
	}
}

func _f64_load_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _f64_load_3(_x, _align, _offset)
	}
}

var _f64_load = _f64_load_3

func _i32_load8_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_load8_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_load8_s_3(_x, _align, _offset)
	}
}

func _i32_load8_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_load8_s_3(_x, _align, _offset)
	}
}

var _i32_load8_s = _i32_load8_s_3

func _i32_load8_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_load8_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_load8_u_3(_x, _align, _offset)
	}
}

func _i32_load8_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_load8_u_3(_x, _align, _offset)
	}
}

var _i32_load8_u = _i32_load8_u_3

func _i32_load16_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_load16_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_load16_s_3(_x, _align, _offset)
	}
}

func _i32_load16_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_load16_s_3(_x, _align, _offset)
	}
}

var _i32_load16_s = _i32_load16_s_3

func _i32_load16_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_load16_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_load16_u_3(_x, _align, _offset)
	}
}

func _i32_load16_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_load16_u_3(_x, _align, _offset)
	}
}

var _i32_load16_u = _i32_load16_u_3

func _i64_load8_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load8_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load8_s_3(_x, _align, _offset)
	}
}

func _i64_load8_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load8_s_3(_x, _align, _offset)
	}
}

var _i64_load8_s = _i64_load8_s_3

func _i64_load8_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load8_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load8_u_3(_x, _align, _offset)
	}
}

func _i64_load8_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load8_u_3(_x, _align, _offset)
	}
}

var _i64_load8_u = _i64_load8_u_3

func _i64_load16_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load16_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load16_s_3(_x, _align, _offset)
	}
}

func _i64_load16_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load16_s_3(_x, _align, _offset)
	}
}

var _i64_load16_s = _i64_load16_s_3

func _i64_load16_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load16_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load16_u_3(_x, _align, _offset)
	}
}

func _i64_load16_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load16_u_3(_x, _align, _offset)
	}
}

var _i64_load16_u = _i64_load16_u_3

func _i64_load32_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load32_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load32_s_3(_x, _align, _offset)
	}
}

func _i64_load32_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load32_s_3(_x, _align, _offset)
	}
}

var _i64_load32_s = _i64_load32_s_3

func _i64_load32_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Load_1(struct {
		F0 OIdx
		F1 OLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_load32_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_load32_u_3(_x, _align, _offset)
	}
}

func _i64_load32_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_load32_u_3(_x, _align, _offset)
	}
}

var _i64_load32_u = _i64_load32_u_3

func _i32_store_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_store_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_store_3(_x, _align, _offset)
	}
}

func _i32_store_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_store_3(_x, _align, _offset)
	}
}

var _i32_store = _i32_store_3

func _i64_store_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_store_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_store_3(_x, _align, _offset)
	}
}

func _i64_store_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_store_3(_x, _align, _offset)
	}
}

var _i64_store = _i64_store_3

func _f32_store_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _f32_store_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _f32_store_3(_x, _align, _offset)
	}
}

func _f32_store_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _f32_store_3(_x, _align, _offset)
	}
}

var _f32_store = _f32_store_3

func _f64_store_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _f64_store_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _f64_store_3(_x, _align, _offset)
	}
}

func _f64_store_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _f64_store_3(_x, _align, _offset)
	}
}

var _f64_store = _f64_store_3

func _i32_store8_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_store8_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_store8_3(_x, _align, _offset)
	}
}

func _i32_store8_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_store8_3(_x, _align, _offset)
	}
}

var _i32_store8 = _i32_store8_3

func _i32_store16_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i32_store16_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i32_store16_3(_x, _align, _offset)
	}
}

func _i32_store16_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i32_store16_3(_x, _align, _offset)
	}
}

var _i32_store16 = _i32_store16_3

func _i64_store8_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_store8_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_store8_3(_x, _align, _offset)
	}
}

func _i64_store8_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_store8_3(_x, _align, _offset)
	}
}

var _i64_store8 = _i64_store8_3

func _i64_store16_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_store16_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_store16_3(_x, _align, _offset)
	}
}

func _i64_store16_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_store16_3(_x, _align, _offset)
	}
}

var _i64_store16 = _i64_store16_3

func _i64_store32_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _Store_1(struct {
		F0 OIdx
		F1 OStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _i64_store32_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _i64_store32_3(_x, _align, _offset)
	}
}

func _i64_store32_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _i64_store32_3(_x, _align, _offset)
	}
}

var _i64_store32 = _i64_store32_3

func _v128_load_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load_3(_x, _align, _offset)
	}
}

func _v128_load_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load_3(_x, _align, _offset)
	}
}

var _v128_load = _v128_load_3

func _v128_load8x8_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load8x8_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load8x8_s_3(_x, _align, _offset)
	}
}

func _v128_load8x8_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load8x8_s_3(_x, _align, _offset)
	}
}

var _v128_load8x8_s = _v128_load8x8_s_3

func _v128_load8x8_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load8x8_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load8x8_u_3(_x, _align, _offset)
	}
}

func _v128_load8x8_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load8x8_u_3(_x, _align, _offset)
	}
}

var _v128_load8x8_u = _v128_load8x8_u_3

func _v128_load16x4_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load16x4_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load16x4_s_3(_x, _align, _offset)
	}
}

func _v128_load16x4_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load16x4_s_3(_x, _align, _offset)
	}
}

var _v128_load16x4_s = _v128_load16x4_s_3

func _v128_load16x4_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load16x4_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load16x4_u_3(_x, _align, _offset)
	}
}

func _v128_load16x4_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load16x4_u_3(_x, _align, _offset)
	}
}

var _v128_load16x4_u = _v128_load16x4_u_3

func _v128_load32x2_s_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load32x2_s_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load32x2_s_3(_x, _align, _offset)
	}
}

func _v128_load32x2_s_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load32x2_s_3(_x, _align, _offset)
	}
}

var _v128_load32x2_s = _v128_load32x2_s_3

func _v128_load32x2_u_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load32x2_u_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load32x2_u_3(_x, _align, _offset)
	}
}

func _v128_load32x2_u_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load32x2_u_3(_x, _align, _offset)
	}
}

var _v128_load32x2_u = _v128_load32x2_u_3

func _v128_load8_splat_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load8_splat_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load8_splat_3(_x, _align, _offset)
	}
}

func _v128_load8_splat_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load8_splat_3(_x, _align, _offset)
	}
}

var _v128_load8_splat = _v128_load8_splat_3

func _v128_load16_splat_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load16_splat_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load16_splat_3(_x, _align, _offset)
	}
}

func _v128_load16_splat_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load16_splat_3(_x, _align, _offset)
	}
}

var _v128_load16_splat = _v128_load16_splat_3

func _v128_load32_splat_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load32_splat_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load32_splat_3(_x, _align, _offset)
	}
}

func _v128_load32_splat_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load32_splat_3(_x, _align, _offset)
	}
}

var _v128_load32_splat = _v128_load32_splat_3

func _v128_load64_splat_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load64_splat_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load64_splat_3(_x, _align, _offset)
	}
}

func _v128_load64_splat_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load64_splat_3(_x, _align, _offset)
	}
}

var _v128_load64_splat = _v128_load64_splat_3

func _v128_load32_zero_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load32_zero_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load32_zero_3(_x, _align, _offset)
	}
}

func _v128_load32_zero_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load32_zero_3(_x, _align, _offset)
	}
}

var _v128_load32_zero = _v128_load32_zero_3

func _v128_load64_zero_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecLoad_1(struct {
		F0 OIdx
		F1 OVecLoadop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_load64_zero_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_load64_zero_3(_x, _align, _offset)
	}
}

func _v128_load64_zero_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_load64_zero_3(_x, _align, _offset)
	}
}

var _v128_load64_zero = _v128_load64_zero_3

func _v128_load8_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecLoadLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_load8_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load8_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load8_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_load8_lane = _v128_load8_lane_4

func _v128_load16_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecLoadLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_load16_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load16_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load16_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_load16_lane = _v128_load16_lane_4

func _v128_load32_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecLoadLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_load32_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load32_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load32_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_load32_lane = _v128_load32_lane_4

func _v128_load64_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecLoadLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_load64_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load64_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_load64_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_load64_lane = _v128_load64_lane_4

func _v128_store_3(_x OIdx, _align OInt, _offset OInt64) OInstr_ {
	__tmp1 := _VecStore_1(struct {
		F0 OIdx
		F1 OVecStoreop
	}{_x, nil /* TODO: record_expression */})
	return __tmp1
}

func _v128_store_2(_x OIdx, _align OInt) func(_offset OInt64) OInstr_ {
	return func(_offset OInt64) OInstr_ {
		return _v128_store_3(_x, _align, _offset)
	}
}

func _v128_store_1(_x OIdx) func(_align OInt, _offset OInt64) OInstr_ {
	return func(_align OInt, _offset OInt64) OInstr_ {
		return _v128_store_3(_x, _align, _offset)
	}
}

var _v128_store = _v128_store_3

func _v128_store8_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecStoreLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_store8_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store8_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store8_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_store8_lane = _v128_store8_lane_4

func _v128_store16_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecStoreLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_store16_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store16_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store16_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_store16_lane = _v128_store16_lane_4

func _v128_store32_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecStoreLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_store32_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store32_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store32_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_store32_lane = _v128_store32_lane_4

func _v128_store64_lane_4(_x OIdx, _align OInt, _offset OInt64, _i OInt) OInstr_ {
	__tmp1 := _VecStoreLane_1(struct {
		F0 OIdx
		F1 OVecLaneop
		F2 OInt
	}{_x, nil /* TODO: record_expression */, _i})
	return __tmp1
}

func _v128_store64_lane_3(_x OIdx, _align OInt, _offset OInt64) func(_i OInt) OInstr_ {
	return func(_i OInt) OInstr_ {
		return _v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store64_lane_2(_x OIdx, _align OInt) func(_offset OInt64, _i OInt) OInstr_ {
	return func(_offset OInt64, _i OInt) OInstr_ {
		return _v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

func _v128_store64_lane_1(_x OIdx) func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
	return func(_align OInt, _offset OInt64, _i OInt) OInstr_ {
		return _v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

var _v128_store64_lane = _v128_store64_lane_4

func _memory_size_1(_x OIdx) OInstr_ {
	__tmp1 := _MemorySize_1(_x)
	return __tmp1
}

var _memory_size = _memory_size_1

func _memory_grow_1(_x OIdx) OInstr_ {
	__tmp1 := _MemoryGrow_1(_x)
	return __tmp1
}

var _memory_grow = _memory_grow_1

func _memory_fill_1(_x OIdx) OInstr_ {
	__tmp1 := _MemoryFill_1(_x)
	return __tmp1
}

var _memory_fill = _memory_fill_1

func _memory_copy_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _MemoryCopy_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _memory_copy_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _memory_copy_2(_x, _y)
	}
}

var _memory_copy = _memory_copy_2

func _memory_init_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _MemoryInit_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _memory_init_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _memory_init_2(_x, _y)
	}
}

var _memory_init = _memory_init_2

func _data_drop_1(_x OIdx) OInstr_ {
	__tmp1 := _DataDrop_1(_x)
	return __tmp1
}

var _data_drop = _data_drop_1

var _ref_is_null = _RefIsNull
var _ref_as_non_null = _RefAsNonNull

func _ref_test_1(_t ORefType) OInstr_ {
	__tmp1 := _RefTest_1(_t)
	return __tmp1
}

var _ref_test = _ref_test_1

func _ref_cast_1(_t ORefType) OInstr_ {
	__tmp1 := _RefCast_1(_t)
	return __tmp1
}

var _ref_cast = _ref_cast_1

var _ref_eq = _RefEq
var _ref_i31 = _RefI31
var _i31_get_u = _I31Get_1(_ZX)
var _i31_get_s = _I31Get_1(_SX)

func _struct_new_1(_x OIdx) OInstr_ {
	__tmp1 := _StructNew_1(struct {
		F0 OIdx
		F1 OInitop
	}{_x, _Explicit})
	return __tmp1
}

var _struct_new = _struct_new_1

func _struct_new_default_1(_x OIdx) OInstr_ {
	__tmp1 := _StructNew_1(struct {
		F0 OIdx
		F1 OInitop
	}{_x, _Implicit})
	return __tmp1
}

var _struct_new_default = _struct_new_default_1

func _struct_get_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _StructGet_1(struct {
		F0 OIdx
		F1 OIdx
		F2 *OExtension
	}{_x, _y, _None})
	return __tmp1
}

func _struct_get_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _struct_get_2(_x, _y)
	}
}

var _struct_get = _struct_get_2

func _struct_get_u_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _StructGet_1(struct {
		F0 OIdx
		F1 OIdx
		F2 *OExtension
	}{_x, _y, _Some_1(_ZX)})
	return __tmp1
}

func _struct_get_u_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _struct_get_u_2(_x, _y)
	}
}

var _struct_get_u = _struct_get_u_2

func _struct_get_s_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _StructGet_1(struct {
		F0 OIdx
		F1 OIdx
		F2 *OExtension
	}{_x, _y, _Some_1(_SX)})
	return __tmp1
}

func _struct_get_s_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _struct_get_s_2(_x, _y)
	}
}

var _struct_get_s = _struct_get_s_2

func _struct_set_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _StructSet_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _struct_set_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _struct_set_2(_x, _y)
	}
}

var _struct_set = _struct_set_2

func _array_new_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayNew_1(struct {
		F0 OIdx
		F1 OInitop
	}{_x, _Explicit})
	return __tmp1
}

var _array_new = _array_new_1

func _array_new_default_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayNew_1(struct {
		F0 OIdx
		F1 OInitop
	}{_x, _Implicit})
	return __tmp1
}

var _array_new_default = _array_new_default_1

func _array_new_fixed_2(_x OIdx, _n OTypeIdx) OInstr_ {
	__tmp1 := _ArrayNewFixed_1(struct {
		F0 OIdx
		F1 OTypeIdx
	}{_x, _n})
	return __tmp1
}

func _array_new_fixed_1(_x OIdx) func(_n OTypeIdx) OInstr_ {
	return func(_n OTypeIdx) OInstr_ {
		return _array_new_fixed_2(_x, _n)
	}
}

var _array_new_fixed = _array_new_fixed_2

func _array_new_elem_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ArrayNewElem_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _array_new_elem_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _array_new_elem_2(_x, _y)
	}
}

var _array_new_elem = _array_new_elem_2

func _array_new_data_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ArrayNewData_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _array_new_data_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _array_new_data_2(_x, _y)
	}
}

var _array_new_data = _array_new_data_2

func _array_get_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayGet_1(struct {
		F0 OIdx
		F1 *OExtension
	}{_x, _None})
	return __tmp1
}

var _array_get = _array_get_1

func _array_get_u_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayGet_1(struct {
		F0 OIdx
		F1 *OExtension
	}{_x, _Some_1(_ZX)})
	return __tmp1
}

var _array_get_u = _array_get_u_1

func _array_get_s_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayGet_1(struct {
		F0 OIdx
		F1 *OExtension
	}{_x, _Some_1(_SX)})
	return __tmp1
}

var _array_get_s = _array_get_s_1

func _array_set_1(_x OIdx) OInstr_ {
	__tmp1 := _ArraySet_1(_x)
	return __tmp1
}

var _array_set = _array_set_1

var _array_len = _ArrayLen

func _array_copy_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ArrayCopy_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _array_copy_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _array_copy_2(_x, _y)
	}
}

var _array_copy = _array_copy_2

func _array_fill_1(_x OIdx) OInstr_ {
	__tmp1 := _ArrayFill_1(_x)
	return __tmp1
}

var _array_fill = _array_fill_1

func _array_init_data_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ArrayInitData_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _array_init_data_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _array_init_data_2(_x, _y)
	}
}

var _array_init_data = _array_init_data_2

func _array_init_elem_2(_x OIdx, _y OIdx) OInstr_ {
	__tmp1 := _ArrayInitElem_1(struct {
		F0 OIdx
		F1 OIdx
	}{_x, _y})
	return __tmp1
}

func _array_init_elem_1(_x OIdx) func(_y OIdx) OInstr_ {
	return func(_y OIdx) OInstr_ {
		return _array_init_elem_2(_x, _y)
	}
}

var _array_init_elem = _array_init_elem_2

var _any_convert_extern = _ExternConvert_1(_Internalize)
var _extern_convert_any = _ExternConvert_1(_Externalize)
var _i32_clz = _Unary_1(_I32_1( /*I32Op.*/ _Clz))
var _i32_ctz = _Unary_1(_I32_1( /*I32Op.*/ _Ctz))
var _i32_popcnt = _Unary_1(_I32_1( /*I32Op.*/ _Popcnt))
var _i64_clz = _Unary_1(_I64_1( /*I64Op.*/ _Clz))
var _i64_ctz = _Unary_1(_I64_1( /*I64Op.*/ _Ctz))
var _i64_popcnt = _Unary_1(_I64_1( /*I64Op.*/ _Popcnt))
var _f32_neg = _Unary_1(_F32_1( /*F32Op.*/ _Neg))
var _f32_abs = _Unary_1(_F32_1( /*F32Op.*/ _Abs))
var _f32_sqrt = _Unary_1(_F32_1( /*F32Op.*/ _Sqrt))
var _f32_ceil = _Unary_1(_F32_1( /*F32Op.*/ _Ceil))
var _f32_floor = _Unary_1(_F32_1( /*F32Op.*/ _Floor))
var _f32_trunc = _Unary_1(_F32_1( /*F32Op.*/ _Trunc))
var _f32_nearest = _Unary_1(_F32_1( /*F32Op.*/ _Nearest))
var _f64_neg = _Unary_1(_F64_1( /*F64Op.*/ _Neg))
var _f64_abs = _Unary_1(_F64_1( /*F64Op.*/ _Abs))
var _f64_sqrt = _Unary_1(_F64_1( /*F64Op.*/ _Sqrt))
var _f64_ceil = _Unary_1(_F64_1( /*F64Op.*/ _Ceil))
var _f64_floor = _Unary_1(_F64_1( /*F64Op.*/ _Floor))
var _f64_trunc = _Unary_1(_F64_1( /*F64Op.*/ _Trunc))
var _f64_nearest = _Unary_1(_F64_1( /*F64Op.*/ _Nearest))
var _i32_add = _Binary_1(_I32_1( /*I32Op.*/ _Add))
var _i32_sub = _Binary_1(_I32_1( /*I32Op.*/ _Sub))
var _i32_mul = _Binary_1(_I32_1( /*I32Op.*/ _Mul))
var _i32_div_s = _Binary_1(_I32_1( /*I32Op.*/ _DivS))
var _i32_div_u = _Binary_1(_I32_1( /*I32Op.*/ _DivU))
var _i32_rem_s = _Binary_1(_I32_1( /*I32Op.*/ _RemS))
var _i32_rem_u = _Binary_1(_I32_1( /*I32Op.*/ _RemU))
var _i32_and = _Binary_1(_I32_1( /*I32Op.*/ _And))
var _i32_or = _Binary_1(_I32_1( /*I32Op.*/ _Or))
var _i32_xor = _Binary_1(_I32_1( /*I32Op.*/ _Xor))
var _i32_shl = _Binary_1(_I32_1( /*I32Op.*/ _Shl))
var _i32_shr_s = _Binary_1(_I32_1( /*I32Op.*/ _ShrS))
var _i32_shr_u = _Binary_1(_I32_1( /*I32Op.*/ _ShrU))
var _i32_rotl = _Binary_1(_I32_1( /*I32Op.*/ _Rotl))
var _i32_rotr = _Binary_1(_I32_1( /*I32Op.*/ _Rotr))
var _i64_add = _Binary_1(_I64_1( /*I64Op.*/ _Add))
var _i64_sub = _Binary_1(_I64_1( /*I64Op.*/ _Sub))
var _i64_mul = _Binary_1(_I64_1( /*I64Op.*/ _Mul))
var _i64_div_s = _Binary_1(_I64_1( /*I64Op.*/ _DivS))
var _i64_div_u = _Binary_1(_I64_1( /*I64Op.*/ _DivU))
var _i64_rem_s = _Binary_1(_I64_1( /*I64Op.*/ _RemS))
var _i64_rem_u = _Binary_1(_I64_1( /*I64Op.*/ _RemU))
var _i64_and = _Binary_1(_I64_1( /*I64Op.*/ _And))
var _i64_or = _Binary_1(_I64_1( /*I64Op.*/ _Or))
var _i64_xor = _Binary_1(_I64_1( /*I64Op.*/ _Xor))
var _i64_shl = _Binary_1(_I64_1( /*I64Op.*/ _Shl))
var _i64_shr_s = _Binary_1(_I64_1( /*I64Op.*/ _ShrS))
var _i64_shr_u = _Binary_1(_I64_1( /*I64Op.*/ _ShrU))
var _i64_rotl = _Binary_1(_I64_1( /*I64Op.*/ _Rotl))
var _i64_rotr = _Binary_1(_I64_1( /*I64Op.*/ _Rotr))
var _f32_add = _Binary_1(_F32_1( /*F32Op.*/ _Add))
var _f32_sub = _Binary_1(_F32_1( /*F32Op.*/ _Sub))
var _f32_mul = _Binary_1(_F32_1( /*F32Op.*/ _Mul))
var _f32_div = _Binary_1(_F32_1( /*F32Op.*/ _Div))
var _f32_min = _Binary_1(_F32_1( /*F32Op.*/ _Min))
var _f32_max = _Binary_1(_F32_1( /*F32Op.*/ _Max))
var _f32_copysign = _Binary_1(_F32_1( /*F32Op.*/ _CopySign))
var _f64_add = _Binary_1(_F64_1( /*F64Op.*/ _Add))
var _f64_sub = _Binary_1(_F64_1( /*F64Op.*/ _Sub))
var _f64_mul = _Binary_1(_F64_1( /*F64Op.*/ _Mul))
var _f64_div = _Binary_1(_F64_1( /*F64Op.*/ _Div))
var _f64_min = _Binary_1(_F64_1( /*F64Op.*/ _Min))
var _f64_max = _Binary_1(_F64_1( /*F64Op.*/ _Max))
var _f64_copysign = _Binary_1(_F64_1( /*F64Op.*/ _CopySign))
var _i32_eqz = _Test_1(_I32_1( /*I32Op.*/ _Eqz))
var _i64_eqz = _Test_1(_I64_1( /*I64Op.*/ _Eqz))
var _i32_eq = _Compare_1(_I32_1( /*I32Op.*/ _Eq))
var _i32_ne = _Compare_1(_I32_1( /*I32Op.*/ _Ne))
var _i32_lt_s = _Compare_1(_I32_1( /*I32Op.*/ _LtS))
var _i32_lt_u = _Compare_1(_I32_1( /*I32Op.*/ _LtU))
var _i32_le_s = _Compare_1(_I32_1( /*I32Op.*/ _LeS))
var _i32_le_u = _Compare_1(_I32_1( /*I32Op.*/ _LeU))
var _i32_gt_s = _Compare_1(_I32_1( /*I32Op.*/ _GtS))
var _i32_gt_u = _Compare_1(_I32_1( /*I32Op.*/ _GtU))
var _i32_ge_s = _Compare_1(_I32_1( /*I32Op.*/ _GeS))
var _i32_ge_u = _Compare_1(_I32_1( /*I32Op.*/ _GeU))
var _i64_eq = _Compare_1(_I64_1( /*I64Op.*/ _Eq))
var _i64_ne = _Compare_1(_I64_1( /*I64Op.*/ _Ne))
var _i64_lt_s = _Compare_1(_I64_1( /*I64Op.*/ _LtS))
var _i64_lt_u = _Compare_1(_I64_1( /*I64Op.*/ _LtU))
var _i64_le_s = _Compare_1(_I64_1( /*I64Op.*/ _LeS))
var _i64_le_u = _Compare_1(_I64_1( /*I64Op.*/ _LeU))
var _i64_gt_s = _Compare_1(_I64_1( /*I64Op.*/ _GtS))
var _i64_gt_u = _Compare_1(_I64_1( /*I64Op.*/ _GtU))
var _i64_ge_s = _Compare_1(_I64_1( /*I64Op.*/ _GeS))
var _i64_ge_u = _Compare_1(_I64_1( /*I64Op.*/ _GeU))
var _f32_eq = _Compare_1(_F32_1( /*F32Op.*/ _Eq))
var _f32_ne = _Compare_1(_F32_1( /*F32Op.*/ _Ne))
var _f32_lt = _Compare_1(_F32_1( /*F32Op.*/ _Lt))
var _f32_le = _Compare_1(_F32_1( /*F32Op.*/ _Le))
var _f32_gt = _Compare_1(_F32_1( /*F32Op.*/ _Gt))
var _f32_ge = _Compare_1(_F32_1( /*F32Op.*/ _Ge))
var _f64_eq = _Compare_1(_F64_1( /*F64Op.*/ _Eq))
var _f64_ne = _Compare_1(_F64_1( /*F64Op.*/ _Ne))
var _f64_lt = _Compare_1(_F64_1( /*F64Op.*/ _Lt))
var _f64_le = _Compare_1(_F64_1( /*F64Op.*/ _Le))
var _f64_gt = _Compare_1(_F64_1( /*F64Op.*/ _Gt))
var _f64_ge = _Compare_1(_F64_1( /*F64Op.*/ _Ge))
var _i32_extend8_s = _Unary_1(_I32_1(_I32Op_ExtendS_1(_Pack8)))
var _i32_extend16_s = _Unary_1(_I32_1(_I32Op_ExtendS_1(_Pack16)))
var _i64_extend8_s = _Unary_1(_I64_1(_I64Op_ExtendS_1(_Pack8)))
var _i64_extend16_s = _Unary_1(_I64_1(_I64Op_ExtendS_1(_Pack16)))
var _i64_extend32_s = _Unary_1(_I64_1(_I64Op_ExtendS_1(_Pack32)))
var _i32_wrap_i64 = _Convert_1(_I32_1( /*I32Op.*/ _WrapI64))
var _i32_trunc_f32_s = _Convert_1(_I32_1( /*I32Op.*/ _TruncSF32))
var _i32_trunc_f32_u = _Convert_1(_I32_1( /*I32Op.*/ _TruncUF32))
var _i32_trunc_f64_s = _Convert_1(_I32_1( /*I32Op.*/ _TruncSF64))
var _i32_trunc_f64_u = _Convert_1(_I32_1( /*I32Op.*/ _TruncUF64))
var _i32_trunc_sat_f32_s = _Convert_1(_I32_1( /*I32Op.*/ _TruncSatSF32))
var _i32_trunc_sat_f32_u = _Convert_1(_I32_1( /*I32Op.*/ _TruncSatUF32))
var _i32_trunc_sat_f64_s = _Convert_1(_I32_1( /*I32Op.*/ _TruncSatSF64))
var _i32_trunc_sat_f64_u = _Convert_1(_I32_1( /*I32Op.*/ _TruncSatUF64))
var _i64_extend_i32_s = _Convert_1(_I64_1( /*I64Op.*/ _ExtendSI32))
var _i64_extend_i32_u = _Convert_1(_I64_1( /*I64Op.*/ _ExtendUI32))
var _i64_trunc_f32_s = _Convert_1(_I64_1( /*I64Op.*/ _TruncSF32))
var _i64_trunc_f32_u = _Convert_1(_I64_1( /*I64Op.*/ _TruncUF32))
var _i64_trunc_f64_s = _Convert_1(_I64_1( /*I64Op.*/ _TruncSF64))
var _i64_trunc_f64_u = _Convert_1(_I64_1( /*I64Op.*/ _TruncUF64))
var _f32_convert_i32_s = _Convert_1(_F32_1( /*F32Op.*/ _ConvertSI32))
var _f32_convert_i32_u = _Convert_1(_F32_1( /*F32Op.*/ _ConvertUI32))
var _f32_convert_i64_s = _Convert_1(_F32_1( /*F32Op.*/ _ConvertSI64))
var _f32_convert_i64_u = _Convert_1(_F32_1( /*F32Op.*/ _ConvertUI64))
var _i64_trunc_sat_f32_s = _Convert_1(_I64_1( /*I64Op.*/ _TruncSatSF32))
var _i64_trunc_sat_f32_u = _Convert_1(_I64_1( /*I64Op.*/ _TruncSatUF32))
var _i64_trunc_sat_f64_s = _Convert_1(_I64_1( /*I64Op.*/ _TruncSatSF64))
var _i64_trunc_sat_f64_u = _Convert_1(_I64_1( /*I64Op.*/ _TruncSatUF64))
var _f32_demote_f64 = _Convert_1(_F32_1( /*F32Op.*/ _DemoteF64))
var _f64_convert_i32_s = _Convert_1(_F64_1( /*F64Op.*/ _ConvertSI32))
var _f64_convert_i32_u = _Convert_1(_F64_1( /*F64Op.*/ _ConvertUI32))
var _f64_convert_i64_s = _Convert_1(_F64_1( /*F64Op.*/ _ConvertSI64))
var _f64_convert_i64_u = _Convert_1(_F64_1( /*F64Op.*/ _ConvertUI64))
var _f64_promote_f32 = _Convert_1(_F64_1( /*F64Op.*/ _PromoteF32))
var _i32_reinterpret_f32 = _Convert_1(_I32_1( /*I32Op.*/ _ReinterpretFloat))
var _i64_reinterpret_f64 = _Convert_1(_I64_1( /*I64Op.*/ _ReinterpretFloat))
var _f32_reinterpret_i32 = _Convert_1(_F32_1( /*F32Op.*/ _ReinterpretInt))
var _f64_reinterpret_i64 = _Convert_1(_F64_1( /*F64Op.*/ _ReinterpretInt))
var _v128_not = _VecUnaryBits_1(_V128_1( /*V128Op.*/ _Not))
var _v128_and = _VecBinaryBits_1(_V128_1( /*V128Op.*/ _And))
var _v128_andnot = _VecBinaryBits_1(_V128_1( /*V128Op.*/ _AndNot))
var _v128_or = _VecBinaryBits_1(_V128_1( /*V128Op.*/ _Or))
var _v128_xor = _VecBinaryBits_1(_V128_1( /*V128Op.*/ _Xor))
var _v128_bitselect = _VecTernaryBits_1(_V128_1( /*V128Op.*/ _Bitselect))
var _v128_any_true = _VecTestBits_1(_V128_1( /*V128Op.*/ _AnyTrue))
var _i8x16_swizzle = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Swizzle)))

func _i8x16_shuffle_1(_is []OInt) OInstr_ {
	__tmp1 := _VecBinary_1(_V128_1(_I8x16_1(_V128Op_Shuffle_1(_is))))
	return __tmp1
}

var _i8x16_shuffle = _i8x16_shuffle_1

var _i8x16_splat = _VecSplat_1(_V128_1(_I8x16_1( /*V128Op.*/ _Splat)))

func _i8x16_extract_lane_s_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I8x16_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, _SX}))))
	return __tmp1
}

var _i8x16_extract_lane_s = _i8x16_extract_lane_s_1

func _i8x16_extract_lane_u_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I8x16_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, _ZX}))))
	return __tmp1
}

var _i8x16_extract_lane_u = _i8x16_extract_lane_u_1

func _i8x16_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_I8x16_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _i8x16_replace_lane = _i8x16_replace_lane_1

var _i8x16_eq = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _Eq)))
var _i8x16_ne = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _Ne)))
var _i8x16_lt_s = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _LtS)))
var _i8x16_lt_u = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _LtU)))
var _i8x16_le_s = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _LeS)))
var _i8x16_le_u = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _LeU)))
var _i8x16_gt_s = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _GtS)))
var _i8x16_gt_u = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _GtU)))
var _i8x16_ge_s = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _GeS)))
var _i8x16_ge_u = _VecCompare_1(_V128_1(_I8x16_1( /*V128Op.*/ _GeU)))
var _i8x16_neg = _VecUnary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Neg)))
var _i8x16_bitmask = _VecBitmask_1(_V128_1(_I8x16_1( /*V128Op.*/ _Bitmask)))
var _i8x16_all_true = _VecTest_1(_V128_1(_I8x16_1( /*V128Op.*/ _AllTrue)))
var _i8x16_narrow_i16x8_s = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _NarrowS)))
var _i8x16_narrow_i16x8_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _NarrowU)))
var _i16x8_extend_low_i8x16_s = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtendLowS)))
var _i16x8_extend_high_i8x16_s = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtendHighS)))
var _i16x8_extend_low_i8x16_u = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtendLowU)))
var _i16x8_extend_high_i8x16_u = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtendHighU)))
var _i8x16_shl = _VecShift_1(_V128_1(_I8x16_1( /*V128Op.*/ _Shl)))
var _i8x16_shr_s = _VecShift_1(_V128_1(_I8x16_1( /*V128Op.*/ _ShrS)))
var _i8x16_shr_u = _VecShift_1(_V128_1(_I8x16_1( /*V128Op.*/ _ShrU)))
var _i8x16_add = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Add)))
var _i8x16_add_sat_s = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _AddSatS)))
var _i8x16_add_sat_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _AddSatU)))
var _i8x16_sub = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Sub)))
var _i8x16_sub_sat_s = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _SubSatS)))
var _i8x16_sub_sat_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _SubSatU)))
var _i8x16_abs = _VecUnary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Abs)))
var _i8x16_popcnt = _VecUnary_1(_V128_1(_I8x16_1( /*V128Op.*/ _Popcnt)))
var _i8x16_min_s = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _MinS)))
var _i8x16_min_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _MinU)))
var _i8x16_max_s = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _MaxS)))
var _i8x16_max_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _MaxU)))
var _i8x16_avgr_u = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _AvgrU)))
var _i16x8_splat = _VecSplat_1(_V128_1(_I16x8_1( /*V128Op.*/ _Splat)))

func _i16x8_extract_lane_s_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I16x8_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, _SX}))))
	return __tmp1
}

var _i16x8_extract_lane_s = _i16x8_extract_lane_s_1

func _i16x8_extract_lane_u_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I16x8_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, _ZX}))))
	return __tmp1
}

var _i16x8_extract_lane_u = _i16x8_extract_lane_u_1

func _i16x8_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_I16x8_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _i16x8_replace_lane = _i16x8_replace_lane_1

var _i16x8_eq = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _Eq)))
var _i16x8_ne = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _Ne)))
var _i16x8_lt_s = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _LtS)))
var _i16x8_lt_u = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _LtU)))
var _i16x8_le_s = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _LeS)))
var _i16x8_le_u = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _LeU)))
var _i16x8_gt_s = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _GtS)))
var _i16x8_gt_u = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _GtU)))
var _i16x8_ge_s = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _GeS)))
var _i16x8_ge_u = _VecCompare_1(_V128_1(_I16x8_1( /*V128Op.*/ _GeU)))
var _i16x8_neg = _VecUnary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Neg)))
var _i16x8_bitmask = _VecBitmask_1(_V128_1(_I16x8_1( /*V128Op.*/ _Bitmask)))
var _i16x8_all_true = _VecTest_1(_V128_1(_I16x8_1( /*V128Op.*/ _AllTrue)))
var _i16x8_narrow_i32x4_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _NarrowS)))
var _i16x8_narrow_i32x4_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _NarrowU)))
var _i16x8_shl = _VecShift_1(_V128_1(_I16x8_1( /*V128Op.*/ _Shl)))
var _i16x8_shr_s = _VecShift_1(_V128_1(_I16x8_1( /*V128Op.*/ _ShrS)))
var _i16x8_shr_u = _VecShift_1(_V128_1(_I16x8_1( /*V128Op.*/ _ShrU)))
var _i16x8_add = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Add)))
var _i16x8_add_sat_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _AddSatS)))
var _i16x8_add_sat_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _AddSatU)))
var _i16x8_sub = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Sub)))
var _i16x8_sub_sat_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _SubSatS)))
var _i16x8_sub_sat_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _SubSatU)))
var _i16x8_mul = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Mul)))
var _i16x8_abs = _VecUnary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Abs)))
var _i16x8_min_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _MinS)))
var _i16x8_min_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _MinU)))
var _i16x8_max_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _MaxS)))
var _i16x8_max_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _MaxU)))
var _i16x8_avgr_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _AvgrU)))
var _i16x8_extmul_low_i8x16_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtMulLowS)))
var _i16x8_extmul_high_i8x16_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtMulHighS)))
var _i16x8_extmul_low_i8x16_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtMulLowU)))
var _i16x8_extmul_high_i8x16_u = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtMulHighU)))
var _i16x8_q15mulr_sat_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _Q15MulRSatS)))
var _i16x8_extadd_pairwise_i8x16_s = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtAddPairwiseS)))
var _i16x8_extadd_pairwise_i8x16_u = _VecConvert_1(_V128_1(_I16x8_1( /*V128Op.*/ _ExtAddPairwiseU)))
var _i32x4_splat = _VecSplat_1(_V128_1(_I32x4_1( /*V128Op.*/ _Splat)))

func _i32x4_extract_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I32x4_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var _i32x4_extract_lane = _i32x4_extract_lane_1

func _i32x4_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_I32x4_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _i32x4_replace_lane = _i32x4_replace_lane_1

var _i32x4_eq = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _Eq)))
var _i32x4_ne = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _Ne)))
var _i32x4_lt_s = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _LtS)))
var _i32x4_lt_u = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _LtU)))
var _i32x4_le_s = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _LeS)))
var _i32x4_le_u = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _LeU)))
var _i32x4_gt_s = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _GtS)))
var _i32x4_gt_u = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _GtU)))
var _i32x4_ge_s = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _GeS)))
var _i32x4_ge_u = _VecCompare_1(_V128_1(_I32x4_1( /*V128Op.*/ _GeU)))
var _i32x4_abs = _VecUnary_1(_V128_1(_I32x4_1( /*V128Op.*/ _Abs)))
var _i32x4_neg = _VecUnary_1(_V128_1(_I32x4_1( /*V128Op.*/ _Neg)))
var _i32x4_bitmask = _VecBitmask_1(_V128_1(_I32x4_1( /*V128Op.*/ _Bitmask)))
var _i32x4_all_true = _VecTest_1(_V128_1(_I32x4_1( /*V128Op.*/ _AllTrue)))
var _i32x4_extend_low_i16x8_s = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtendLowS)))
var _i32x4_extend_high_i16x8_s = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtendHighS)))
var _i32x4_extend_low_i16x8_u = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtendLowU)))
var _i32x4_extend_high_i16x8_u = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtendHighU)))
var _i32x4_shl = _VecShift_1(_V128_1(_I32x4_1( /*V128Op.*/ _Shl)))
var _i32x4_shr_s = _VecShift_1(_V128_1(_I32x4_1( /*V128Op.*/ _ShrS)))
var _i32x4_shr_u = _VecShift_1(_V128_1(_I32x4_1( /*V128Op.*/ _ShrU)))
var _i32x4_add = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _Add)))
var _i32x4_sub = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _Sub)))
var _i32x4_min_s = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _MinS)))
var _i32x4_min_u = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _MinU)))
var _i32x4_max_s = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _MaxS)))
var _i32x4_max_u = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _MaxU)))
var _i32x4_mul = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _Mul)))
var _i32x4_dot_i16x8_s = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _DotS)))
var _i32x4_trunc_sat_f32x4_s = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _TruncSatSF32x4)))
var _i32x4_trunc_sat_f32x4_u = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _TruncSatUF32x4)))
var _i32x4_trunc_sat_f64x2_s_zero = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _TruncSatSZeroF64x2)))
var _i32x4_trunc_sat_f64x2_u_zero = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _TruncSatUZeroF64x2)))
var _i32x4_extmul_low_i16x8_s = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtMulLowS)))
var _i32x4_extmul_high_i16x8_s = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtMulHighS)))
var _i32x4_extmul_low_i16x8_u = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtMulLowU)))
var _i32x4_extmul_high_i16x8_u = _VecBinary_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtMulHighU)))
var _i32x4_extadd_pairwise_i16x8_s = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtAddPairwiseS)))
var _i32x4_extadd_pairwise_i16x8_u = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _ExtAddPairwiseU)))
var _i64x2_splat = _VecSplat_1(_V128_1(_I64x2_1( /*V128Op.*/ _Splat)))

func _i64x2_extract_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_I64x2_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var _i64x2_extract_lane = _i64x2_extract_lane_1

func _i64x2_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_I64x2_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _i64x2_replace_lane = _i64x2_replace_lane_1

var _i64x2_extend_low_i32x4_s = _VecConvert_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtendLowS)))
var _i64x2_extend_high_i32x4_s = _VecConvert_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtendHighS)))
var _i64x2_extend_low_i32x4_u = _VecConvert_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtendLowU)))
var _i64x2_extend_high_i32x4_u = _VecConvert_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtendHighU)))
var _i64x2_eq = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _Eq)))
var _i64x2_ne = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _Ne)))
var _i64x2_lt_s = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _LtS)))
var _i64x2_le_s = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _LeS)))
var _i64x2_gt_s = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _GtS)))
var _i64x2_ge_s = _VecCompare_1(_V128_1(_I64x2_1( /*V128Op.*/ _GeS)))
var _i64x2_abs = _VecUnary_1(_V128_1(_I64x2_1( /*V128Op.*/ _Abs)))
var _i64x2_neg = _VecUnary_1(_V128_1(_I64x2_1( /*V128Op.*/ _Neg)))
var _i64x2_bitmask = _VecBitmask_1(_V128_1(_I64x2_1( /*V128Op.*/ _Bitmask)))
var _i64x2_all_true = _VecTest_1(_V128_1(_I64x2_1( /*V128Op.*/ _AllTrue)))
var _i64x2_add = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _Add)))
var _i64x2_sub = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _Sub)))
var _i64x2_mul = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _Mul)))
var _i64x2_shl = _VecShift_1(_V128_1(_I64x2_1( /*V128Op.*/ _Shl)))
var _i64x2_shr_s = _VecShift_1(_V128_1(_I64x2_1( /*V128Op.*/ _ShrS)))
var _i64x2_shr_u = _VecShift_1(_V128_1(_I64x2_1( /*V128Op.*/ _ShrU)))
var _i64x2_extmul_low_i32x4_s = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtMulLowS)))
var _i64x2_extmul_high_i32x4_s = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtMulHighS)))
var _i64x2_extmul_low_i32x4_u = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtMulLowU)))
var _i64x2_extmul_high_i32x4_u = _VecBinary_1(_V128_1(_I64x2_1( /*V128Op.*/ _ExtMulHighU)))
var _f32x4_splat = _VecSplat_1(_V128_1(_F32x4_1( /*V128Op.*/ _Splat)))

func _f32x4_extract_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_F32x4_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var _f32x4_extract_lane = _f32x4_extract_lane_1

func _f32x4_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_F32x4_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _f32x4_replace_lane = _f32x4_replace_lane_1

var _f32x4_eq = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Eq)))
var _f32x4_ne = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Ne)))
var _f32x4_lt = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Lt)))
var _f32x4_le = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Le)))
var _f32x4_gt = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Gt)))
var _f32x4_ge = _VecCompare_1(_V128_1(_F32x4_1( /*V128Op.*/ _Ge)))
var _f32x4_abs = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Abs)))
var _f32x4_neg = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Neg)))
var _f32x4_sqrt = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Sqrt)))
var _f32x4_ceil = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Ceil)))
var _f32x4_floor = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Floor)))
var _f32x4_trunc = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Trunc)))
var _f32x4_nearest = _VecUnary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Nearest)))
var _f32x4_add = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Add)))
var _f32x4_sub = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Sub)))
var _f32x4_mul = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Mul)))
var _f32x4_div = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Div)))
var _f32x4_min = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Min)))
var _f32x4_max = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Max)))
var _f32x4_pmin = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Pmin)))
var _f32x4_pmax = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _Pmax)))
var _f32x4_demote_f64x2_zero = _VecConvert_1(_V128_1(_F32x4_1( /*V128Op.*/ _DemoteZeroF64x2)))
var _f32x4_convert_i32x4_s = _VecConvert_1(_V128_1(_F32x4_1( /*V128Op.*/ _ConvertSI32x4)))
var _f32x4_convert_i32x4_u = _VecConvert_1(_V128_1(_F32x4_1( /*V128Op.*/ _ConvertUI32x4)))
var _f64x2_splat = _VecSplat_1(_V128_1(_F64x2_1( /*V128Op.*/ _Splat)))

func _f64x2_extract_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecExtract_1(_V128_1(_F64x2_1(_V128Op_Extract_1(struct {
		F0 OInt
		F1 any /* 'a */
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var _f64x2_extract_lane = _f64x2_extract_lane_1

func _f64x2_replace_lane_1(_i OInt) OInstr_ {
	__tmp1 := _VecReplace_1(_V128_1(_F64x2_1(_V128Op_Replace_1(_i))))
	return __tmp1
}

var _f64x2_replace_lane = _f64x2_replace_lane_1

var _f64x2_eq = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Eq)))
var _f64x2_ne = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Ne)))
var _f64x2_lt = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Lt)))
var _f64x2_le = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Le)))
var _f64x2_gt = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Gt)))
var _f64x2_ge = _VecCompare_1(_V128_1(_F64x2_1( /*V128Op.*/ _Ge)))
var _f64x2_neg = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Neg)))
var _f64x2_sqrt = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Sqrt)))
var _f64x2_ceil = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Ceil)))
var _f64x2_floor = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Floor)))
var _f64x2_trunc = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Trunc)))
var _f64x2_nearest = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Nearest)))
var _f64x2_add = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Add)))
var _f64x2_sub = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Sub)))
var _f64x2_mul = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Mul)))
var _f64x2_div = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Div)))
var _f64x2_min = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Min)))
var _f64x2_max = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Max)))
var _f64x2_abs = _VecUnary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Abs)))
var _f64x2_pmin = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Pmin)))
var _f64x2_pmax = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _Pmax)))
var _f64x2_promote_low_f32x4 = _VecConvert_1(_V128_1(_F64x2_1( /*V128Op.*/ _PromoteLowF32x4)))
var _f64x2_convert_low_i32x4_s = _VecConvert_1(_V128_1(_F64x2_1( /*V128Op.*/ _ConvertSI32x4)))
var _f64x2_convert_low_i32x4_u = _VecConvert_1(_V128_1(_F64x2_1( /*V128Op.*/ _ConvertUI32x4)))
var _i8x16_relaxed_swizzle = _VecBinary_1(_V128_1(_I8x16_1( /*V128Op.*/ _RelaxedSwizzle)))
var _i8x16_relaxed_laneselect = _VecTernary_1(_V128_1(_I8x16_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i16x8_relaxed_q15mulr_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _RelaxedQ15MulRS)))
var _i16x8_relaxed_laneselect = _VecTernary_1(_V128_1(_I16x8_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i32x4_relaxed_trunc_f32x4_s = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedTruncSF32x4)))
var _i32x4_relaxed_trunc_f32x4_u = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedTruncUF32x4)))
var _i32x4_relaxed_trunc_f64x2_s_zero = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedTruncSZeroF64x2)))
var _i32x4_relaxed_trunc_f64x2_u_zero = _VecConvert_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedTruncUZeroF64x2)))
var _i32x4_relaxed_laneselect = _VecTernary_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedLaneselect)))
var _i64x2_relaxed_laneselect = _VecTernary_1(_V128_1(_I64x2_1( /*V128Op.*/ _RelaxedLaneselect)))
var _f32x4_relaxed_madd = _VecTernary_1(_V128_1(_F32x4_1( /*V128Op.*/ _RelaxedMadd)))
var _f32x4_relaxed_nmadd = _VecTernary_1(_V128_1(_F32x4_1( /*V128Op.*/ _RelaxedNmadd)))
var _f32x4_relaxed_min = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _RelaxedMin)))
var _f32x4_relaxed_max = _VecBinary_1(_V128_1(_F32x4_1( /*V128Op.*/ _RelaxedMax)))
var _f64x2_relaxed_madd = _VecTernary_1(_V128_1(_F64x2_1( /*V128Op.*/ _RelaxedMadd)))
var _f64x2_relaxed_nmadd = _VecTernary_1(_V128_1(_F64x2_1( /*V128Op.*/ _RelaxedNmadd)))
var _f64x2_relaxed_min = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _RelaxedMin)))
var _f64x2_relaxed_max = _VecBinary_1(_V128_1(_F64x2_1( /*V128Op.*/ _RelaxedMax)))
var _i16x8_relaxed_dot_i8x16_i7x16_s = _VecBinary_1(_V128_1(_I16x8_1( /*V128Op.*/ _RelaxedDot)))
var _i32x4_relaxed_dot_i8x16_i7x16_add_s = _VecTernary_1(_V128_1(_I32x4_1( /*V128Op.*/ _RelaxedDotAccum)))

type OStream struct {
	Name  string
	Bytes string
	Pos   TODO /* int ref (kind 3) */
}

func _bit_2(_i OInt, _n OInt) bool {
	__tmp1 := _operatorNotEq_2(_int_operatorland_2(_n, _int_operatorlsl_2(1, _i)), 0)
	return __tmp1
}

func _bit_1(_i OInt) func(_n OInt) bool {
	return func(_n OInt) bool {
		return _bit_2(_i, _n)
	}
}

var _bit = _bit_2

func _byte_1(_s *Stream) OInt {
	__tmp1 := _get_1(_s)
	return __tmp1
}

var _byte = _byte_1

func _word16_1(_s *Stream) OInt {
	__tmp1 := _byte_1(_s)
	_lo := __tmp1
	__tmp4 := _byte_1(_s)
	_hi := __tmp4
	__tmp7 := _int_operatorPlus_2(_int_operatorlsl_2(_hi, 8), _lo)
	return __tmp7
}

var _word16 = _word16_1

func _word32_1(_s *Stream) OInt32 {
	__tmp1 := _Int32_of_int_1(_word16_1(_s))
	_lo := __tmp1
	__tmp5 := _Int32_of_int_1(_word16_1(_s))
	_hi := __tmp5
	__tmp9 := _Int32_add_2(_lo, _Int32_shift_left_2(_hi, 16))
	return __tmp9
}

var _word32 = _word32_1

func _word64_1(_s *Stream) OInt64 {
	__tmp1 := _I64_convert_extend_i32_u_1(_word32_1(_s))
	_lo := __tmp1
	__tmp5 := _I64_convert_extend_i32_u_1(_word32_1(_s))
	_hi := __tmp5
	__tmp9 := _Int64_add_2(_lo, _Int64_shift_left_2(_hi, 32))
	return __tmp9
}

var _word64 = _word64_1

func _uN_2(_n OInt, _s *Stream) OInt64 {
	__tmp1 := _require_4(_operatorGt_2(_n, 0), _s, _pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := _byte_1(_s)
	_b := __tmp7
	__tmp10 := _require_4(_bool_operatorOr_2(_operatorGte_2(_n, 7), _operatorLt_2(_int_operatorland_2(_b, 0x7f), _int_operatorlsl_2(1, _n))), _s, _int_operatorMinus_2(_pos_1(_s), 1), "integer too large")
	_ = __tmp10
	__tmp23 := _Int64_of_int_1(_int_operatorland_2(_b, 0x7f))
	_x := __tmp23
	var __tmp27 OInt64
	if _operatorEq_2(_int_operatorland_2(_b, 0x80), 0) {
		__tmp31 := _x
		__tmp27 = __tmp31
	} else {
		__tmp32 := _Int64_logor_2(_x, _Int64_shift_left_2(_uN_2(_int_operatorMinus_2(_n, 7), _s), 7))
		__tmp27 = __tmp32
	}
	return __tmp27

}

func _uN_1(_n OInt) func(_s *Stream) OInt64 {
	return func(_s *Stream) OInt64 {
		return _uN_2(_n, _s)
	}
}

var _uN = _uN_2

func _sN_2(_n OInt, _s *Stream) OInt64 {
	__tmp1 := _require_4(_operatorGt_2(_n, 0), _s, _pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := _byte_1(_s)
	_b := __tmp7
	__tmp10 := _int_operatorland_2(_int_operatorlsl_2(-(1), _int_operatorMinus_2(_n, 1)), 0x7f)
	_mask := __tmp10
	__tmp15 := _require_4(_bool_operatorOr_2(_operatorGte_2(_n, 7), _bool_operatorOr_2(_operatorEq_2(_int_operatorland_2(_b, _mask), 0), _operatorEq_2(_int_operatorland_2(_b, _mask), _mask))), _s, _int_operatorMinus_2(_pos_1(_s), 1), "integer too large")
	_ = __tmp15
	__tmp33 := _Int64_of_int_1(_int_operatorland_2(_b, 0x7f))
	_x := __tmp33
	var __tmp37 OInt64
	if _operatorEq_2(_int_operatorland_2(_b, 0x80), 0) {
		var __tmp41 OInt64
		if _operatorEq_2(_int_operatorland_2(_b, 0x40), 0) {
			__tmp45 := _x
			__tmp41 = __tmp45
		} else {
			__tmp46 := _Int64_logor_2(_x, _Int64_logxor_2(-(1), 0x7f))
			__tmp41 = __tmp46
		}
		__tmp37 = __tmp41
	} else {
		__tmp49 := _Int64_logor_2(_x, _Int64_shift_left_2(_sN_2(_int_operatorMinus_2(_n, 7), _s), 7))
		__tmp37 = __tmp49
	}
	return __tmp37

}

func _sN_1(_n OInt) func(_s *Stream) OInt64 {
	return func(_s *Stream) OInt64 {
		return _sN_2(_n, _s)
	}
}

var _sN = _sN_2

func _u32_1(_s *Stream) OInt32 {
	__tmp1 := _Int64_to_int32_1(_uN_2(32, _s))
	return __tmp1
}

var _u32 = _u32_1

func _u64_1(_s *Stream) OInt64 {
	__tmp1 := _uN_2(64, _s)
	return __tmp1
}

var _u64 = _u64_1

func _s7_1(_s *Stream) OInt {
	__tmp1 := _Int64_to_int_1(_sN_2(7, _s))
	return __tmp1
}

var _s7 = _s7_1

func _s32_1(_s *Stream) OInt32 {
	__tmp1 := _Int64_to_int32_1(_sN_2(32, _s))
	return __tmp1
}

var _s32 = _s32_1

func _s33_1(_s *Stream) OInt32 {
	__tmp1 := _I32_convert_wrap_i64_1(_sN_2(33, _s))
	return __tmp1
}

var _s33 = _s33_1

func _s64_1(_s *Stream) OInt64 {
	__tmp1 := _sN_2(64, _s)
	return __tmp1
}

var _s64 = _s64_1

func _f32_1(_s *Stream) float32 {
	__tmp1 := _F32_of_bits_1(_word32_1(_s))
	return __tmp1
}

var _f32 = _f32_1

func _f64_1(_s *Stream) float64 {
	__tmp1 := _F64_of_bits_1(_word64_1(_s))
	return __tmp1
}

var _f64 = _f64_1

func _v128_1(_s *Stream) V128 {
	__tmp1 := _V128_of_bits_1(_get_string_2(16, _s))
	return __tmp1
}

var _v128 = _v128_1

func _len32_1(_s *Stream) OInt {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _u32_1(_s)
	_n := __tmp4
	var __tmp7 OInt
	if _I32_le_u_2(_n, _Int32_of_int_1(_int_operatorMinus_2(_len_1(_s), _pos))) {
		__tmp15 := _Int32_to_int_1(_n)
		__tmp7 = __tmp15
	} else {
		__tmp17 := _error_3(_s, _pos, "length out of bounds")
		__tmp7 = __tmp17
	}
	return __tmp7
}

var _len32 = _len32_1

func _string_1(_s *Stream) string {
	__tmp1 := _len32_1(_s)
	_n := __tmp1
	__tmp4 := _get_string_2(_n, _s)
	return __tmp4
}

var _string = _string_1

func _zero_1(_s *Stream) OUnit {
	__tmp1 := _expect_3(0x00, _s, "zero byte expected")
	return __tmp1
}

var _zero = _zero_1

func _var_1(_s *Stream) OLocalIdx {
	__tmp1 := _u32_1(_s)
	return __tmp1
}

var _var = _var_1

func _mutability_1(_s *Stream) OMut {
	var __tmp1 OMut
	__tmp2 := _byte_1(_s)
	if __tmp2 == 0 {
		__tmp5 := _Cons
		__tmp1 = __tmp5
	} else if __tmp2 == 1 {
		__tmp7 := _Var
		__tmp1 = __tmp7
	} else if __ := __tmp2; true {
		_ = __
		__tmp11 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed mutability")
		__tmp1 = __tmp11
	}
	return __tmp1
}

var _mutability = _mutability_1

func _var_type_2(_var func(*Stream) OLocalIdx, _s *Stream) OVar {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 OVar
	__tmp5 := _var_1(_s)
	if _i := __tmp5; _operatorGte_2(_i, 0) {
		_ = _i
		__tmp12 := _StatX_1(_i)
		__tmp4 = __tmp12
	} else if __ := __tmp5; true {
		_ = __
		__tmp16 := _error_3(_s, _pos, "malformed type index")
		__tmp4 = __tmp16
	}
	return __tmp4
}

func _var_type_1(_var func(*Stream) OLocalIdx) func(_s *Stream) OVar {
	return func(_s *Stream) OVar {
		return _var_type_2(_var, _s)
	}
}

var _var_type = _var_type_2

func _num_type_1(_s *Stream) ONumType {
	var __tmp1 ONumType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x01 {
		__tmp5 := _I32T
		__tmp1 = __tmp5
	} else if __tmp2 == -0x02 {
		__tmp7 := _I64T
		__tmp1 = __tmp7
	} else if __tmp2 == -0x03 {
		__tmp9 := _F32T
		__tmp1 = __tmp9
	} else if __tmp2 == -0x04 {
		__tmp11 := _F64T
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp15 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed number type")
		__tmp1 = __tmp15
	}
	return __tmp1
}

var _num_type = _num_type_1

func _vec_type_1(_s *Stream) OVecType {
	var __tmp1 OVecType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x05 {
		__tmp5 := _V128T
		__tmp1 = __tmp5
	} else if __ := __tmp2; true {
		_ = __
		__tmp9 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed vector type")
		__tmp1 = __tmp9
	}
	return __tmp1
}

var _vec_type = _vec_type_1

func _heap_type_1(_s *Stream) OHeapType {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _either_2([]func(*Stream) OHeapType{func(_s *Stream) OHeapType {
		__tmp5 := _VarHT_1(_var_type_2(_s33, _s))
		return __tmp5
	}, func(_s *Stream) OHeapType {
		var __tmp9 OHeapType
		__tmp10 := _s7_1(_s)
		if __tmp10 == -0x0c {
			__tmp13 := _NoExnHT
			__tmp9 = __tmp13
		} else if __tmp10 == -0x0d {
			__tmp15 := _NoFuncHT
			__tmp9 = __tmp15
		} else if __tmp10 == -0x0e {
			__tmp17 := _NoExternHT
			__tmp9 = __tmp17
		} else if __tmp10 == -0x0f {
			__tmp19 := _NoneHT
			__tmp9 = __tmp19
		} else if __tmp10 == -0x10 {
			__tmp21 := _FuncHT
			__tmp9 = __tmp21
		} else if __tmp10 == -0x11 {
			__tmp23 := _ExternHT
			__tmp9 = __tmp23
		} else if __tmp10 == -0x12 {
			__tmp25 := _AnyHT
			__tmp9 = __tmp25
		} else if __tmp10 == -0x13 {
			__tmp27 := _EqHT
			__tmp9 = __tmp27
		} else if __tmp10 == -0x14 {
			__tmp29 := _I31HT
			__tmp9 = __tmp29
		} else if __tmp10 == -0x15 {
			__tmp31 := _StructHT
			__tmp9 = __tmp31
		} else if __tmp10 == -0x16 {
			__tmp33 := _ArrayHT
			__tmp9 = __tmp33
		} else if __tmp10 == -0x17 {
			__tmp35 := _ExnHT
			__tmp9 = __tmp35
		} else if __ := __tmp10; true {
			_ = __
			__tmp39 := _error_3(_s, _pos, "malformed heap type")
			__tmp9 = __tmp39
		}
		return __tmp9
	}}, _s)
	return __tmp4
}

var _heap_type = _heap_type_1

func _ref_type_1(_s *Stream) struct {
	F0 ONull
	F1 OHeapType
} {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 struct {
		F0 ONull
		F1 OHeapType
	}
	__tmp5 := _s7_1(_s)
	if __tmp5 == -0x0c {
		__tmp8 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoExnHT}
		__tmp4 = __tmp8
	} else if __tmp5 == -0x0d {
		__tmp13 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoFuncHT}
		__tmp4 = __tmp13
	} else if __tmp5 == -0x0e {
		__tmp18 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoExternHT}
		__tmp4 = __tmp18
	} else if __tmp5 == -0x0f {
		__tmp23 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoneHT}
		__tmp4 = __tmp23
	} else if __tmp5 == -0x10 {
		__tmp28 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _FuncHT}
		__tmp4 = __tmp28
	} else if __tmp5 == -0x11 {
		__tmp33 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ExternHT}
		__tmp4 = __tmp33
	} else if __tmp5 == -0x12 {
		__tmp38 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _AnyHT}
		__tmp4 = __tmp38
	} else if __tmp5 == -0x13 {
		__tmp43 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _EqHT}
		__tmp4 = __tmp43
	} else if __tmp5 == -0x14 {
		__tmp48 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _I31HT}
		__tmp4 = __tmp48
	} else if __tmp5 == -0x15 {
		__tmp53 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _StructHT}
		__tmp4 = __tmp53
	} else if __tmp5 == -0x16 {
		__tmp58 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ArrayHT}
		__tmp4 = __tmp58
	} else if __tmp5 == -0x17 {
		__tmp63 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ExnHT}
		__tmp4 = __tmp63
	} else if __tmp5 == -0x1c {
		__tmp68 := struct {
			F0 ONull
			F1 OHeapType
		}{_NoNull, _heap_type_1(_s)}
		__tmp4 = __tmp68
	} else if __tmp5 == -0x1d {
		__tmp73 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _heap_type_1(_s)}
		__tmp4 = __tmp73
	} else if __ := __tmp5; true {
		_ = __
		__tmp80 := _error_3(_s, _pos, "malformed reference type")
		__tmp4 = __tmp80
	}
	return __tmp4
}

var _ref_type = _ref_type_1

func _val_type_1(_s *Stream) OValType {
	__tmp1 := _either_2([]func(*Stream) OValType{func(_s *Stream) OValType {
		__tmp2 := _NumT_1(_num_type_1(_s))
		return __tmp2
	}, func(_s *Stream) OValType {
		__tmp5 := _VecT_1(_vec_type_1(_s))
		return __tmp5
	}, func(_s *Stream) OValType {
		__tmp8 := _RefT_1(_ref_type_1(_s))
		return __tmp8
	}}, _s)
	return __tmp1
}

var _val_type = _val_type_1

func _result_type_1(_s *Stream) []OValType {
	__tmp1 := _vec_2(_val_type, _s)
	return __tmp1
}

var _result_type = _result_type_1

func _pack_type_1(_s *Stream) OPackSize {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 OPackSize
	__tmp5 := _s7_1(_s)
	if __tmp5 == -0x08 {
		__tmp8 := /*Pack.*/ _Pack8
		__tmp4 = __tmp8
	} else if __tmp5 == -0x09 {
		__tmp10 := /*Pack.*/ _Pack16
		__tmp4 = __tmp10
	} else if __ := __tmp5; true {
		_ = __
		__tmp14 := _error_3(_s, _pos, "malformed storage type")
		__tmp4 = __tmp14
	}
	return __tmp4
}

var _pack_type = _pack_type_1

func _storage_type_1(_s *Stream) OStorageType {
	__tmp1 := _either_2([]func(*Stream) OStorageType{func(_s *Stream) OStorageType {
		__tmp2 := _ValStorageT_1(_val_type_1(_s))
		return __tmp2
	}, func(_s *Stream) OStorageType {
		__tmp5 := _PackStorageT_1(_pack_type_1(_s))
		return __tmp5
	}}, _s)
	return __tmp1
}

var _storage_type = _storage_type_1

func _field_type_1(_s *Stream) OFieldType {
	__tmp1 := _storage_type_1(_s)
	_t := __tmp1
	__tmp4 := _mutability_1(_s)
	_mut := __tmp4
	__tmp7 := _FieldT_1(struct {
		F0 OMut
		F1 OStorageType
	}{_mut, _t})
	return __tmp7
}

var _field_type = _field_type_1

func _struct_type_1(_s *Stream) OStructType {
	__tmp1 := _StructT_1(_vec_2(_field_type, _s))
	return __tmp1
}

var _struct_type = _struct_type_1

func _array_type_1(_s *Stream) OArrayType {
	__tmp1 := _ArrayT_1(_field_type_1(_s))
	return __tmp1
}

var _array_type = _array_type_1

func _func_type_1(_s *Stream) OFuncType {
	__tmp1 := _result_type_1(_s)
	_ts1 := __tmp1
	__tmp4 := _result_type_1(_s)
	_ts2 := __tmp4
	__tmp7 := _FuncT_1(struct {
		F0 OResultType
		F1 OResultType
	}{_ts1, _ts2})
	return __tmp7
}

var _func_type = _func_type_1

func _str_type_1(_s *Stream) OStrType {
	var __tmp1 OStrType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x20 {
		__tmp5 := _DefFuncT_1(_func_type_1(_s))
		__tmp1 = __tmp5
	} else if __tmp2 == -0x21 {
		__tmp8 := _DefStructT_1(_struct_type_1(_s))
		__tmp1 = __tmp8
	} else if __tmp2 == -0x22 {
		__tmp11 := _DefArrayT_1(_array_type_1(_s))
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp16 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed definition type")
		__tmp1 = __tmp16
	}
	return __tmp1
}

var _str_type = _str_type_1

func _sub_type_1(_s *Stream) OSubType {
	var __tmp1 OSubType
	__tmp2 := _peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x30), 0x7f))) {
		__tmp9 := _skip_2(1, _s)
		_ = __tmp9
		__tmp11 := _vec_2(_var_type_1(_u32), _s)
		_xs := __tmp11
		__tmp16 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_NoFinal, _List_map_2(func(_x OVar) OHeapType {
			__tmp21 := _VarHT_1(_x)
			return __tmp21
		}, _xs), _str_type_1(_s)})

		__tmp1 = __tmp16
	} else if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x31), 0x7f))) {
		__tmp30 := _skip_2(1, _s)
		_ = __tmp30
		__tmp32 := _vec_2(_var_type_1(_u32), _s)
		_xs := __tmp32
		__tmp37 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_Final, _List_map_2(func(_x OVar) OHeapType {
			__tmp42 := _VarHT_1(_x)
			return __tmp42
		}, _xs), _str_type_1(_s)})

		__tmp1 = __tmp37
	} else if __ := __tmp2; true {
		_ = __
		__tmp49 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_Final, []OHeapType{}, _str_type_1(_s)})
		__tmp1 = __tmp49
	}
	return __tmp1
}

var _sub_type = _sub_type_1

func _rec_type_1(_s *Stream) ORecType {
	var __tmp1 ORecType
	__tmp2 := _peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x32), 0x7f))) {
		__tmp9 := _skip_2(1, _s)
		_ = __tmp9
		__tmp11 := _RecT_1(_vec_2(_sub_type, _s))

		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp17 := _RecT_1([]OSubType{_sub_type_1(_s)})
		__tmp1 = __tmp17
	}
	return __tmp1
}

var _rec_type = _rec_type_1

func _limits_2(_uN func(*Stream) OInt64, _s *Stream) struct {
	F0 OAddrType
	F1 OLimits
} {
	__tmp1 := _byte_1(_s)
	_flags := __tmp1
	__tmp4 := _require_4(_operatorEq_2(_int_operatorland_2(_flags, 0xfa), 0), _s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed limits flags")
	_ = __tmp4
	__tmp12 := _operatorEq_2(_int_operatorland_2(_flags, 1), 1)
	_has_max := __tmp12
	var __tmp16 OAddrType
	if _operatorEq_2(_int_operatorland_2(_flags, 4), 4) {
		__tmp20 := _I64AT
		__tmp16 = __tmp20
	} else {
		__tmp22 := _I32AT
		__tmp16 = __tmp22
	}
	_at := __tmp16
	__tmp25 := _uN_1(_s)
	_min := __tmp25
	__tmp28 := _opt_3(_uN, _has_max, _s)
	_max := __tmp28
	return struct {
		F0 OAddrType
		F1 OLimits
	}{_at, nil /* TODO: record_expression */}

}

func _limits_1(_uN func(*Stream) OInt64) func(_s *Stream) struct {
	F0 OAddrType
	F1 OLimits
} {
	return func(_s *Stream) struct {
		F0 OAddrType
		F1 OLimits
	} { return _limits_2(_uN, _s) }
}

var _limits = _limits_2

func _table_type_1(_s *Stream) OTableType {
	__tmp1 := _ref_type_1(_s)
	_t := __tmp1
	__tmp4 := _limits_2(_u64, _s)
	_at, _lim := __unpack_addr_type___limits(__tmp4)
	__tmp9 := _TableT_1(struct {
		F0 OAddrType
		F1 OLimits
		F2 ORefType
	}{_at, _lim, _t})
	return __tmp9
}

var _table_type = _table_type_1

func _global_type_1(_s *Stream) OGlobalType {
	__tmp1 := _val_type_1(_s)
	_t := __tmp1
	__tmp4 := _mutability_1(_s)
	_mut := __tmp4
	__tmp7 := _GlobalT_1(struct {
		F0 OMut
		F1 OValType
	}{_mut, _t})
	return __tmp7
}

var _global_type = _global_type_1

func _tag_type_1(_s *Stream) *Phrase[OLocalIdx] {
	__tmp1 := _zero_1(_s)
	_ = __tmp1
	__tmp3 := _at_2(_var, _s)
	return __tmp3

}

var _tag_type = _tag_type_1

func _op_1(_s *Stream) OInt {
	__tmp1 := _byte_1(_s)
	return __tmp1
}

var _op = _op_1

func _end__1(_s *Stream) OUnit {
	__tmp1 := _expect_3(0x0b, _s, "END opcode expected")
	return __tmp1
}

var _end_ = _end__1

func _memop_1(_s *Stream) struct {
	F0 *Phrase[OLocalIdx]
	F1 OInt
	F2 OInt64
} {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _u32_1(_s)
	_flags := __tmp4
	__tmp7 := _require_4(_I32_lt_u_2(_flags, 0x80), _s, _pos, "malformed memop flags")
	_ = __tmp7
	__tmp12 := _operatorNotEq_2(_Int32_logand_2(_flags, 0x40), 0)
	_has_var := __tmp12
	var __tmp16 *Phrase[OLocalIdx]
	if _has_var {
		__tmp18 := _at_2(_var, _s)
		__tmp16 = __tmp18
	} else {
		__tmp21 := _operatorAtAt_2(0, _no_region)
		__tmp16 = __tmp21
	}
	_x := __tmp16
	__tmp24 := _Int32_to_int_1(_Int32_logand_2(_flags, 0x3f))
	_align := __tmp24
	__tmp28 := _u64_1(_s)
	_offset := __tmp28
	return struct {
		F0 *Phrase[OLocalIdx]
		F1 OInt
		F2 OInt64
	}{_x, _align, _offset}

}

var _memop = _memop_1

func _block_type_1(_s *Stream) OBlockType {
	__tmp1 := _either_2([]func(*Stream) OBlockType{func(_s *Stream) OBlockType {
		__tmp2 := _VarBlockType_1(_at_2(func(_s *Stream) OLocalIdx {
			__tmp4 := _as_stat_var_1(_var_type_2(_s33, _s))
			return __tmp4
		}, _s))
		return __tmp2
	}, func(_s *Stream) OBlockType {
		__tmp9 := _expect_3(0x40, _s, "")
		_ = __tmp9
		__tmp11 := _ValBlockType_1(_None)
		return __tmp11

	}, func(_s *Stream) OBlockType {
		__tmp14 := _ValBlockType_1(_Some_1(_val_type_1(_s)))
		return __tmp14
	}}, _s)
	return __tmp1
}

var _block_type = _block_type_1

func _local_1(_s *Stream) struct {
	F0 OLocalIdx
	F1 *Phrase[OLocal_]
} {
	__tmp1 := _u32_1(_s)
	_n := __tmp1
	__tmp4 := _at_2(_val_type, _s)
	_t := __tmp4
	return struct {
		F0 OLocalIdx
		F1 *Phrase[OLocal_]
	}{_n, _operatorAtAt_2(nil /* TODO: record_expression */, nil /* TODO: field_get_expression */)}
}

var _local = _local_1

func _instr_1(_s *Stream) OInstr_ {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 OInstr_
	__tmp5 := _op_1(_s)
	if __tmp5 == 0x00 {
		__tmp8 := _unreachable
		__tmp4 = __tmp8
	} else if __tmp5 == 0x01 {
		__tmp9 := _nop
		__tmp4 = __tmp9
	} else if __tmp5 == 0x02 {
		__tmp10 := _block_type_1(_s)
		_bt := __tmp10
		__tmp13 := _instr_block_1(_s)
		_es_ := __tmp13
		__tmp16 := _end__1(_s)
		_ = __tmp16
		__tmp18 := _block_2(_bt, _es_)

		__tmp4 = __tmp18
	} else if __tmp5 == 0x03 {
		__tmp21 := _block_type_1(_s)
		_bt := __tmp21
		__tmp24 := _instr_block_1(_s)
		_es_ := __tmp24
		__tmp27 := _end__1(_s)
		_ = __tmp27
		__tmp29 := _loop_2(_bt, _es_)

		__tmp4 = __tmp29
	} else if __tmp5 == 0x04 {
		__tmp32 := _block_type_1(_s)
		_bt := __tmp32
		__tmp35 := _instr_block_1(_s)
		_es1 := __tmp35
		var __tmp38 OInstr_
		if _operatorEq_2(_peek_1(_s), _Some_1(0x05)) {
			__tmp43 := _expect_3(0x05, _s, "ELSE or END opcode expected")
			_ = __tmp43
			__tmp45 := _instr_block_1(_s)
			_es2 := __tmp45
			__tmp48 := _end__1(_s)
			_ = __tmp48
			__tmp50 := _if__3(_bt, _es1, _es2)

			__tmp38 = __tmp50
		} else {
			__tmp54 := _end__1(_s)
			_ = __tmp54
			__tmp56 := _if__3(_bt, _es1, []OInstr{})

			__tmp38 = __tmp56
		}
		__tmp4 = __tmp38
	} else if __tmp5 == 0x05 {
		__tmp59 := _error_3(_s, _pos, "misplaced ELSE opcode")
		__tmp4 = __tmp59
	} else if __tmp5 == 0x06 || __tmp5 == 0x07 {
		_b := __tmp5
		__tmp63 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp63
	} else if __tmp5 == 0x08 {
		__tmp67 := _throw_1(_at_2(_var, _s))
		__tmp4 = __tmp67
	} else if __tmp5 == 0x09 {
		_b := __tmp5
		__tmp72 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp72
	} else if __tmp5 == 0x0a {
		__tmp76 := _throw_ref
		__tmp4 = __tmp76
	} else if __tmp5 == 0x0b {
		__tmp77 := _error_3(_s, _pos, "misplaced END opcode")
		__tmp4 = __tmp77
	} else if __tmp5 == 0x0c {
		__tmp80 := _br_1(_at_2(_var, _s))
		__tmp4 = __tmp80
	} else if __tmp5 == 0x0d {
		__tmp84 := _br_if_1(_at_2(_var, _s))
		__tmp4 = __tmp84
	} else if __tmp5 == 0x0e {
		__tmp88 := _vec_2(_at_1(_var), _s)
		_xs := __tmp88
		__tmp93 := _at_2(_var, _s)
		_x := __tmp93
		__tmp97 := _br_table_2(_xs, _x)
		__tmp4 = __tmp97
	} else if __tmp5 == 0x0f {
		__tmp100 := _return
		__tmp4 = __tmp100
	} else if __tmp5 == 0x10 {
		__tmp101 := _call_1(_at_2(_var, _s))
		__tmp4 = __tmp101
	} else if __tmp5 == 0x11 {
		__tmp105 := _at_2(_var, _s)
		_y := __tmp105
		__tmp109 := _at_2(_var, _s)
		_x := __tmp109
		__tmp113 := _call_indirect_2(_x, _y)
		__tmp4 = __tmp113
	} else if __tmp5 == 0x12 {
		__tmp116 := _return_call_1(_at_2(_var, _s))
		__tmp4 = __tmp116
	} else if __tmp5 == 0x13 {
		__tmp120 := _at_2(_var, _s)
		_y := __tmp120
		__tmp124 := _at_2(_var, _s)
		_x := __tmp124
		__tmp128 := _return_call_indirect_2(_x, _y)
		__tmp4 = __tmp128
	} else if __tmp5 == 0x14 {
		__tmp131 := _call_ref_1(_at_2(_var, _s))
		__tmp4 = __tmp131
	} else if __tmp5 == 0x15 {
		__tmp135 := _return_call_ref_1(_at_2(_var, _s))
		__tmp4 = __tmp135
	} else if __tmp5 == 0x16 || __tmp5 == 0x17 || __tmp5 == 0x18 || __tmp5 == 0x19 {
		_b := __tmp5
		__tmp140 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp140
	} else if __tmp5 == 0x1a {
		__tmp144 := _drop
		__tmp4 = __tmp144
	} else if __tmp5 == 0x1b {
		__tmp145 := _select_1(_None)
		__tmp4 = __tmp145
	} else if __tmp5 == 0x1c {
		__tmp148 := _select_1(_Some_1(_vec_2(_val_type, _s)))
		__tmp4 = __tmp148
	} else if __tmp5 == 0x1d || __tmp5 == 0x1e {
		_b := __tmp5
		__tmp154 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp154
	} else if __tmp5 == 0x1f {
		__tmp158 := _block_type_1(_s)
		_bt := __tmp158
		__tmp161 := _vec_2(_at_1(_catch), _s)
		_cs := __tmp161
		__tmp166 := _instr_block_1(_s)
		_es := __tmp166
		__tmp169 := _end__1(_s)
		_ = __tmp169
		__tmp171 := _try_table_3(_bt, _cs, _es)

		__tmp4 = __tmp171
	} else if __tmp5 == 0x20 {
		__tmp175 := _local_get_1(_at_2(_var, _s))
		__tmp4 = __tmp175
	} else if __tmp5 == 0x21 {
		__tmp179 := _local_set_1(_at_2(_var, _s))
		__tmp4 = __tmp179
	} else if __tmp5 == 0x22 {
		__tmp183 := _local_tee_1(_at_2(_var, _s))
		__tmp4 = __tmp183
	} else if __tmp5 == 0x23 {
		__tmp187 := _global_get_1(_at_2(_var, _s))
		__tmp4 = __tmp187
	} else if __tmp5 == 0x24 {
		__tmp191 := _global_set_1(_at_2(_var, _s))
		__tmp4 = __tmp191
	} else if __tmp5 == 0x25 {
		__tmp195 := _table_get_1(_at_2(_var, _s))
		__tmp4 = __tmp195
	} else if __tmp5 == 0x26 {
		__tmp199 := _table_set_1(_at_2(_var, _s))
		__tmp4 = __tmp199
	} else if __tmp5 == 0x27 {
		_b := __tmp5
		__tmp204 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp204
	} else if __tmp5 == 0x28 {
		__tmp208 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp208)
		__tmp213 := _i32_load_3(_x, _a, _o)
		__tmp4 = __tmp213
	} else if __tmp5 == 0x29 {
		__tmp217 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp217)
		__tmp222 := _i64_load_3(_x, _a, _o)
		__tmp4 = __tmp222
	} else if __tmp5 == 0x2a {
		__tmp226 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp226)
		__tmp231 := _f32_load_3(_x, _a, _o)
		__tmp4 = __tmp231
	} else if __tmp5 == 0x2b {
		__tmp235 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp235)
		__tmp240 := _f64_load_3(_x, _a, _o)
		__tmp4 = __tmp240
	} else if __tmp5 == 0x2c {
		__tmp244 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp244)
		__tmp249 := _i32_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp249
	} else if __tmp5 == 0x2d {
		__tmp253 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp253)
		__tmp258 := _i32_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp258
	} else if __tmp5 == 0x2e {
		__tmp262 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp262)
		__tmp267 := _i32_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp267
	} else if __tmp5 == 0x2f {
		__tmp271 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp271)
		__tmp276 := _i32_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp276
	} else if __tmp5 == 0x30 {
		__tmp280 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp280)
		__tmp285 := _i64_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp285
	} else if __tmp5 == 0x31 {
		__tmp289 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp289)
		__tmp294 := _i64_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp294
	} else if __tmp5 == 0x32 {
		__tmp298 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp298)
		__tmp303 := _i64_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp303
	} else if __tmp5 == 0x33 {
		__tmp307 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp307)
		__tmp312 := _i64_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp312
	} else if __tmp5 == 0x34 {
		__tmp316 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp316)
		__tmp321 := _i64_load32_s_3(_x, _a, _o)
		__tmp4 = __tmp321
	} else if __tmp5 == 0x35 {
		__tmp325 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp325)
		__tmp330 := _i64_load32_u_3(_x, _a, _o)
		__tmp4 = __tmp330
	} else if __tmp5 == 0x36 {
		__tmp334 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp334)
		__tmp339 := _i32_store_3(_x, _a, _o)
		__tmp4 = __tmp339
	} else if __tmp5 == 0x37 {
		__tmp343 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp343)
		__tmp348 := _i64_store_3(_x, _a, _o)
		__tmp4 = __tmp348
	} else if __tmp5 == 0x38 {
		__tmp352 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp352)
		__tmp357 := _f32_store_3(_x, _a, _o)
		__tmp4 = __tmp357
	} else if __tmp5 == 0x39 {
		__tmp361 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp361)
		__tmp366 := _f64_store_3(_x, _a, _o)
		__tmp4 = __tmp366
	} else if __tmp5 == 0x3a {
		__tmp370 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp370)
		__tmp375 := _i32_store8_3(_x, _a, _o)
		__tmp4 = __tmp375
	} else if __tmp5 == 0x3b {
		__tmp379 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp379)
		__tmp384 := _i32_store16_3(_x, _a, _o)
		__tmp4 = __tmp384
	} else if __tmp5 == 0x3c {
		__tmp388 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp388)
		__tmp393 := _i64_store8_3(_x, _a, _o)
		__tmp4 = __tmp393
	} else if __tmp5 == 0x3d {
		__tmp397 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp397)
		__tmp402 := _i64_store16_3(_x, _a, _o)
		__tmp4 = __tmp402
	} else if __tmp5 == 0x3e {
		__tmp406 := _memop_1(_s)
		_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp406)
		__tmp411 := _i64_store32_3(_x, _a, _o)
		__tmp4 = __tmp411
	} else if __tmp5 == 0x3f {
		__tmp415 := _memory_size_1(_at_2(_var, _s))
		__tmp4 = __tmp415
	} else if __tmp5 == 0x40 {
		__tmp419 := _memory_grow_1(_at_2(_var, _s))
		__tmp4 = __tmp419
	} else if __tmp5 == 0x41 {
		__tmp423 := _i32_const_1(_at_2(_s32, _s))
		__tmp4 = __tmp423
	} else if __tmp5 == 0x42 {
		__tmp427 := _i64_const_1(_at_2(_s64, _s))
		__tmp4 = __tmp427
	} else if __tmp5 == 0x43 {
		__tmp431 := _f32_const_1(_at_2(_f32, _s))
		__tmp4 = __tmp431
	} else if __tmp5 == 0x44 {
		__tmp435 := _f64_const_1(_at_2(_f64, _s))
		__tmp4 = __tmp435
	} else if __tmp5 == 0x45 {
		__tmp439 := _i32_eqz
		__tmp4 = __tmp439
	} else if __tmp5 == 0x46 {
		__tmp440 := _i32_eq
		__tmp4 = __tmp440
	} else if __tmp5 == 0x47 {
		__tmp441 := _i32_ne
		__tmp4 = __tmp441
	} else if __tmp5 == 0x48 {
		__tmp442 := _i32_lt_s
		__tmp4 = __tmp442
	} else if __tmp5 == 0x49 {
		__tmp443 := _i32_lt_u
		__tmp4 = __tmp443
	} else if __tmp5 == 0x4a {
		__tmp444 := _i32_gt_s
		__tmp4 = __tmp444
	} else if __tmp5 == 0x4b {
		__tmp445 := _i32_gt_u
		__tmp4 = __tmp445
	} else if __tmp5 == 0x4c {
		__tmp446 := _i32_le_s
		__tmp4 = __tmp446
	} else if __tmp5 == 0x4d {
		__tmp447 := _i32_le_u
		__tmp4 = __tmp447
	} else if __tmp5 == 0x4e {
		__tmp448 := _i32_ge_s
		__tmp4 = __tmp448
	} else if __tmp5 == 0x4f {
		__tmp449 := _i32_ge_u
		__tmp4 = __tmp449
	} else if __tmp5 == 0x50 {
		__tmp450 := _i64_eqz
		__tmp4 = __tmp450
	} else if __tmp5 == 0x51 {
		__tmp451 := _i64_eq
		__tmp4 = __tmp451
	} else if __tmp5 == 0x52 {
		__tmp452 := _i64_ne
		__tmp4 = __tmp452
	} else if __tmp5 == 0x53 {
		__tmp453 := _i64_lt_s
		__tmp4 = __tmp453
	} else if __tmp5 == 0x54 {
		__tmp454 := _i64_lt_u
		__tmp4 = __tmp454
	} else if __tmp5 == 0x55 {
		__tmp455 := _i64_gt_s
		__tmp4 = __tmp455
	} else if __tmp5 == 0x56 {
		__tmp456 := _i64_gt_u
		__tmp4 = __tmp456
	} else if __tmp5 == 0x57 {
		__tmp457 := _i64_le_s
		__tmp4 = __tmp457
	} else if __tmp5 == 0x58 {
		__tmp458 := _i64_le_u
		__tmp4 = __tmp458
	} else if __tmp5 == 0x59 {
		__tmp459 := _i64_ge_s
		__tmp4 = __tmp459
	} else if __tmp5 == 0x5a {
		__tmp460 := _i64_ge_u
		__tmp4 = __tmp460
	} else if __tmp5 == 0x5b {
		__tmp461 := _f32_eq
		__tmp4 = __tmp461
	} else if __tmp5 == 0x5c {
		__tmp462 := _f32_ne
		__tmp4 = __tmp462
	} else if __tmp5 == 0x5d {
		__tmp463 := _f32_lt
		__tmp4 = __tmp463
	} else if __tmp5 == 0x5e {
		__tmp464 := _f32_gt
		__tmp4 = __tmp464
	} else if __tmp5 == 0x5f {
		__tmp465 := _f32_le
		__tmp4 = __tmp465
	} else if __tmp5 == 0x60 {
		__tmp466 := _f32_ge
		__tmp4 = __tmp466
	} else if __tmp5 == 0x61 {
		__tmp467 := _f64_eq
		__tmp4 = __tmp467
	} else if __tmp5 == 0x62 {
		__tmp468 := _f64_ne
		__tmp4 = __tmp468
	} else if __tmp5 == 0x63 {
		__tmp469 := _f64_lt
		__tmp4 = __tmp469
	} else if __tmp5 == 0x64 {
		__tmp470 := _f64_gt
		__tmp4 = __tmp470
	} else if __tmp5 == 0x65 {
		__tmp471 := _f64_le
		__tmp4 = __tmp471
	} else if __tmp5 == 0x66 {
		__tmp472 := _f64_ge
		__tmp4 = __tmp472
	} else if __tmp5 == 0x67 {
		__tmp473 := _i32_clz
		__tmp4 = __tmp473
	} else if __tmp5 == 0x68 {
		__tmp474 := _i32_ctz
		__tmp4 = __tmp474
	} else if __tmp5 == 0x69 {
		__tmp475 := _i32_popcnt
		__tmp4 = __tmp475
	} else if __tmp5 == 0x6a {
		__tmp476 := _i32_add
		__tmp4 = __tmp476
	} else if __tmp5 == 0x6b {
		__tmp477 := _i32_sub
		__tmp4 = __tmp477
	} else if __tmp5 == 0x6c {
		__tmp478 := _i32_mul
		__tmp4 = __tmp478
	} else if __tmp5 == 0x6d {
		__tmp479 := _i32_div_s
		__tmp4 = __tmp479
	} else if __tmp5 == 0x6e {
		__tmp480 := _i32_div_u
		__tmp4 = __tmp480
	} else if __tmp5 == 0x6f {
		__tmp481 := _i32_rem_s
		__tmp4 = __tmp481
	} else if __tmp5 == 0x70 {
		__tmp482 := _i32_rem_u
		__tmp4 = __tmp482
	} else if __tmp5 == 0x71 {
		__tmp483 := _i32_and
		__tmp4 = __tmp483
	} else if __tmp5 == 0x72 {
		__tmp484 := _i32_or
		__tmp4 = __tmp484
	} else if __tmp5 == 0x73 {
		__tmp485 := _i32_xor
		__tmp4 = __tmp485
	} else if __tmp5 == 0x74 {
		__tmp486 := _i32_shl
		__tmp4 = __tmp486
	} else if __tmp5 == 0x75 {
		__tmp487 := _i32_shr_s
		__tmp4 = __tmp487
	} else if __tmp5 == 0x76 {
		__tmp488 := _i32_shr_u
		__tmp4 = __tmp488
	} else if __tmp5 == 0x77 {
		__tmp489 := _i32_rotl
		__tmp4 = __tmp489
	} else if __tmp5 == 0x78 {
		__tmp490 := _i32_rotr
		__tmp4 = __tmp490
	} else if __tmp5 == 0x79 {
		__tmp491 := _i64_clz
		__tmp4 = __tmp491
	} else if __tmp5 == 0x7a {
		__tmp492 := _i64_ctz
		__tmp4 = __tmp492
	} else if __tmp5 == 0x7b {
		__tmp493 := _i64_popcnt
		__tmp4 = __tmp493
	} else if __tmp5 == 0x7c {
		__tmp494 := _i64_add
		__tmp4 = __tmp494
	} else if __tmp5 == 0x7d {
		__tmp495 := _i64_sub
		__tmp4 = __tmp495
	} else if __tmp5 == 0x7e {
		__tmp496 := _i64_mul
		__tmp4 = __tmp496
	} else if __tmp5 == 0x7f {
		__tmp497 := _i64_div_s
		__tmp4 = __tmp497
	} else if __tmp5 == 0x80 {
		__tmp498 := _i64_div_u
		__tmp4 = __tmp498
	} else if __tmp5 == 0x81 {
		__tmp499 := _i64_rem_s
		__tmp4 = __tmp499
	} else if __tmp5 == 0x82 {
		__tmp500 := _i64_rem_u
		__tmp4 = __tmp500
	} else if __tmp5 == 0x83 {
		__tmp501 := _i64_and
		__tmp4 = __tmp501
	} else if __tmp5 == 0x84 {
		__tmp502 := _i64_or
		__tmp4 = __tmp502
	} else if __tmp5 == 0x85 {
		__tmp503 := _i64_xor
		__tmp4 = __tmp503
	} else if __tmp5 == 0x86 {
		__tmp504 := _i64_shl
		__tmp4 = __tmp504
	} else if __tmp5 == 0x87 {
		__tmp505 := _i64_shr_s
		__tmp4 = __tmp505
	} else if __tmp5 == 0x88 {
		__tmp506 := _i64_shr_u
		__tmp4 = __tmp506
	} else if __tmp5 == 0x89 {
		__tmp507 := _i64_rotl
		__tmp4 = __tmp507
	} else if __tmp5 == 0x8a {
		__tmp508 := _i64_rotr
		__tmp4 = __tmp508
	} else if __tmp5 == 0x8b {
		__tmp509 := _f32_abs
		__tmp4 = __tmp509
	} else if __tmp5 == 0x8c {
		__tmp510 := _f32_neg
		__tmp4 = __tmp510
	} else if __tmp5 == 0x8d {
		__tmp511 := _f32_ceil
		__tmp4 = __tmp511
	} else if __tmp5 == 0x8e {
		__tmp512 := _f32_floor
		__tmp4 = __tmp512
	} else if __tmp5 == 0x8f {
		__tmp513 := _f32_trunc
		__tmp4 = __tmp513
	} else if __tmp5 == 0x90 {
		__tmp514 := _f32_nearest
		__tmp4 = __tmp514
	} else if __tmp5 == 0x91 {
		__tmp515 := _f32_sqrt
		__tmp4 = __tmp515
	} else if __tmp5 == 0x92 {
		__tmp516 := _f32_add
		__tmp4 = __tmp516
	} else if __tmp5 == 0x93 {
		__tmp517 := _f32_sub
		__tmp4 = __tmp517
	} else if __tmp5 == 0x94 {
		__tmp518 := _f32_mul
		__tmp4 = __tmp518
	} else if __tmp5 == 0x95 {
		__tmp519 := _f32_div
		__tmp4 = __tmp519
	} else if __tmp5 == 0x96 {
		__tmp520 := _f32_min
		__tmp4 = __tmp520
	} else if __tmp5 == 0x97 {
		__tmp521 := _f32_max
		__tmp4 = __tmp521
	} else if __tmp5 == 0x98 {
		__tmp522 := _f32_copysign
		__tmp4 = __tmp522
	} else if __tmp5 == 0x99 {
		__tmp523 := _f64_abs
		__tmp4 = __tmp523
	} else if __tmp5 == 0x9a {
		__tmp524 := _f64_neg
		__tmp4 = __tmp524
	} else if __tmp5 == 0x9b {
		__tmp525 := _f64_ceil
		__tmp4 = __tmp525
	} else if __tmp5 == 0x9c {
		__tmp526 := _f64_floor
		__tmp4 = __tmp526
	} else if __tmp5 == 0x9d {
		__tmp527 := _f64_trunc
		__tmp4 = __tmp527
	} else if __tmp5 == 0x9e {
		__tmp528 := _f64_nearest
		__tmp4 = __tmp528
	} else if __tmp5 == 0x9f {
		__tmp529 := _f64_sqrt
		__tmp4 = __tmp529
	} else if __tmp5 == 0xa0 {
		__tmp530 := _f64_add
		__tmp4 = __tmp530
	} else if __tmp5 == 0xa1 {
		__tmp531 := _f64_sub
		__tmp4 = __tmp531
	} else if __tmp5 == 0xa2 {
		__tmp532 := _f64_mul
		__tmp4 = __tmp532
	} else if __tmp5 == 0xa3 {
		__tmp533 := _f64_div
		__tmp4 = __tmp533
	} else if __tmp5 == 0xa4 {
		__tmp534 := _f64_min
		__tmp4 = __tmp534
	} else if __tmp5 == 0xa5 {
		__tmp535 := _f64_max
		__tmp4 = __tmp535
	} else if __tmp5 == 0xa6 {
		__tmp536 := _f64_copysign
		__tmp4 = __tmp536
	} else if __tmp5 == 0xa7 {
		__tmp537 := _i32_wrap_i64
		__tmp4 = __tmp537
	} else if __tmp5 == 0xa8 {
		__tmp538 := _i32_trunc_f32_s
		__tmp4 = __tmp538
	} else if __tmp5 == 0xa9 {
		__tmp539 := _i32_trunc_f32_u
		__tmp4 = __tmp539
	} else if __tmp5 == 0xaa {
		__tmp540 := _i32_trunc_f64_s
		__tmp4 = __tmp540
	} else if __tmp5 == 0xab {
		__tmp541 := _i32_trunc_f64_u
		__tmp4 = __tmp541
	} else if __tmp5 == 0xac {
		__tmp542 := _i64_extend_i32_s
		__tmp4 = __tmp542
	} else if __tmp5 == 0xad {
		__tmp543 := _i64_extend_i32_u
		__tmp4 = __tmp543
	} else if __tmp5 == 0xae {
		__tmp544 := _i64_trunc_f32_s
		__tmp4 = __tmp544
	} else if __tmp5 == 0xaf {
		__tmp545 := _i64_trunc_f32_u
		__tmp4 = __tmp545
	} else if __tmp5 == 0xb0 {
		__tmp546 := _i64_trunc_f64_s
		__tmp4 = __tmp546
	} else if __tmp5 == 0xb1 {
		__tmp547 := _i64_trunc_f64_u
		__tmp4 = __tmp547
	} else if __tmp5 == 0xb2 {
		__tmp548 := _f32_convert_i32_s
		__tmp4 = __tmp548
	} else if __tmp5 == 0xb3 {
		__tmp549 := _f32_convert_i32_u
		__tmp4 = __tmp549
	} else if __tmp5 == 0xb4 {
		__tmp550 := _f32_convert_i64_s
		__tmp4 = __tmp550
	} else if __tmp5 == 0xb5 {
		__tmp551 := _f32_convert_i64_u
		__tmp4 = __tmp551
	} else if __tmp5 == 0xb6 {
		__tmp552 := _f32_demote_f64
		__tmp4 = __tmp552
	} else if __tmp5 == 0xb7 {
		__tmp553 := _f64_convert_i32_s
		__tmp4 = __tmp553
	} else if __tmp5 == 0xb8 {
		__tmp554 := _f64_convert_i32_u
		__tmp4 = __tmp554
	} else if __tmp5 == 0xb9 {
		__tmp555 := _f64_convert_i64_s
		__tmp4 = __tmp555
	} else if __tmp5 == 0xba {
		__tmp556 := _f64_convert_i64_u
		__tmp4 = __tmp556
	} else if __tmp5 == 0xbb {
		__tmp557 := _f64_promote_f32
		__tmp4 = __tmp557
	} else if __tmp5 == 0xbc {
		__tmp558 := _i32_reinterpret_f32
		__tmp4 = __tmp558
	} else if __tmp5 == 0xbd {
		__tmp559 := _i64_reinterpret_f64
		__tmp4 = __tmp559
	} else if __tmp5 == 0xbe {
		__tmp560 := _f32_reinterpret_i32
		__tmp4 = __tmp560
	} else if __tmp5 == 0xbf {
		__tmp561 := _f64_reinterpret_i64
		__tmp4 = __tmp561
	} else if __tmp5 == 0xc0 {
		__tmp562 := _i32_extend8_s
		__tmp4 = __tmp562
	} else if __tmp5 == 0xc1 {
		__tmp563 := _i32_extend16_s
		__tmp4 = __tmp563
	} else if __tmp5 == 0xc2 {
		__tmp564 := _i64_extend8_s
		__tmp4 = __tmp564
	} else if __tmp5 == 0xc3 {
		__tmp565 := _i64_extend16_s
		__tmp4 = __tmp565
	} else if __tmp5 == 0xc4 {
		__tmp566 := _i64_extend32_s
		__tmp4 = __tmp566
	} else if __tmp5 == 0xc5 || __tmp5 == 0xc6 || __tmp5 == 0xc7 || __tmp5 == 0xc8 || __tmp5 == 0xc9 || __tmp5 == 0xca || __tmp5 == 0xcb || __tmp5 == 0xcc || __tmp5 == 0xcd || __tmp5 == 0xce || __tmp5 == 0xcf {
		_b := __tmp5
		__tmp568 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp568
	} else if __tmp5 == 0xd0 {
		__tmp572 := _ref_null_1(_heap_type_1(_s))
		__tmp4 = __tmp572
	} else if __tmp5 == 0xd1 {
		__tmp575 := _ref_is_null
		__tmp4 = __tmp575
	} else if __tmp5 == 0xd2 {
		__tmp576 := _ref_func_1(_at_2(_var, _s))
		__tmp4 = __tmp576
	} else if __tmp5 == 0xd3 {
		__tmp580 := _ref_eq
		__tmp4 = __tmp580
	} else if __tmp5 == 0xd4 {
		__tmp581 := _ref_as_non_null
		__tmp4 = __tmp581
	} else if __tmp5 == 0xd5 {
		__tmp582 := _br_on_null_1(_at_2(_var, _s))
		__tmp4 = __tmp582
	} else if __tmp5 == 0xd6 {
		__tmp586 := _br_on_non_null_1(_at_2(_var, _s))
		__tmp4 = __tmp586
	} else if __tmp5 == 0xfb {
		_b := __tmp5
		var __tmp591 OInstr_
		__tmp592 := _u32_1(_s)
		if __tmp592 == 0x00 {
			__tmp595 := _struct_new_1(_at_2(_var, _s))
			__tmp591 = __tmp595
		} else if __tmp592 == 0x01 {
			__tmp599 := _struct_new_default_1(_at_2(_var, _s))
			__tmp591 = __tmp599
		} else if __tmp592 == 0x02 {
			__tmp603 := _at_2(_var, _s)
			_x := __tmp603
			__tmp607 := _at_2(_var, _s)
			_y := __tmp607
			__tmp611 := _struct_get_2(_x, _y)
			__tmp591 = __tmp611
		} else if __tmp592 == 0x03 {
			__tmp614 := _at_2(_var, _s)
			_x := __tmp614
			__tmp618 := _at_2(_var, _s)
			_y := __tmp618
			__tmp622 := _struct_get_s_2(_x, _y)
			__tmp591 = __tmp622
		} else if __tmp592 == 0x04 {
			__tmp625 := _at_2(_var, _s)
			_x := __tmp625
			__tmp629 := _at_2(_var, _s)
			_y := __tmp629
			__tmp633 := _struct_get_u_2(_x, _y)
			__tmp591 = __tmp633
		} else if __tmp592 == 0x05 {
			__tmp636 := _at_2(_var, _s)
			_x := __tmp636
			__tmp640 := _at_2(_var, _s)
			_y := __tmp640
			__tmp644 := _struct_set_2(_x, _y)
			__tmp591 = __tmp644
		} else if __tmp592 == 0x06 {
			__tmp647 := _array_new_1(_at_2(_var, _s))
			__tmp591 = __tmp647
		} else if __tmp592 == 0x07 {
			__tmp651 := _array_new_default_1(_at_2(_var, _s))
			__tmp591 = __tmp651
		} else if __tmp592 == 0x08 {
			__tmp655 := _at_2(_var, _s)
			_x := __tmp655
			__tmp659 := _u32_1(_s)
			_n := __tmp659
			__tmp662 := _array_new_fixed_2(_x, _n)
			__tmp591 = __tmp662
		} else if __tmp592 == 0x09 {
			__tmp665 := _at_2(_var, _s)
			_x := __tmp665
			__tmp669 := _at_2(_var, _s)
			_y := __tmp669
			__tmp673 := _array_new_data_2(_x, _y)
			__tmp591 = __tmp673
		} else if __tmp592 == 0x0a {
			__tmp676 := _at_2(_var, _s)
			_x := __tmp676
			__tmp680 := _at_2(_var, _s)
			_y := __tmp680
			__tmp684 := _array_new_elem_2(_x, _y)
			__tmp591 = __tmp684
		} else if __tmp592 == 0x0b {
			__tmp687 := _array_get_1(_at_2(_var, _s))
			__tmp591 = __tmp687
		} else if __tmp592 == 0x0c {
			__tmp691 := _array_get_s_1(_at_2(_var, _s))
			__tmp591 = __tmp691
		} else if __tmp592 == 0x0d {
			__tmp695 := _array_get_u_1(_at_2(_var, _s))
			__tmp591 = __tmp695
		} else if __tmp592 == 0x0e {
			__tmp699 := _array_set_1(_at_2(_var, _s))
			__tmp591 = __tmp699
		} else if __tmp592 == 0x0f {
			__tmp703 := _array_len
			__tmp591 = __tmp703
		} else if __tmp592 == 0x10 {
			__tmp704 := _array_fill_1(_at_2(_var, _s))
			__tmp591 = __tmp704
		} else if __tmp592 == 0x11 {
			__tmp708 := _at_2(_var, _s)
			_x := __tmp708
			__tmp712 := _at_2(_var, _s)
			_y := __tmp712
			__tmp716 := _array_copy_2(_x, _y)
			__tmp591 = __tmp716
		} else if __tmp592 == 0x12 {
			__tmp719 := _at_2(_var, _s)
			_x := __tmp719
			__tmp723 := _at_2(_var, _s)
			_y := __tmp723
			__tmp727 := _array_init_data_2(_x, _y)
			__tmp591 = __tmp727
		} else if __tmp592 == 0x13 {
			__tmp730 := _at_2(_var, _s)
			_x := __tmp730
			__tmp734 := _at_2(_var, _s)
			_y := __tmp734
			__tmp738 := _array_init_elem_2(_x, _y)
			__tmp591 = __tmp738
		} else if __tmp592 == 0x14 {
			__tmp741 := _ref_test_1(struct {
				F0 ONull
				F1 OHeapType
			}{_NoNull, _heap_type_1(_s)})
			__tmp591 = __tmp741
		} else if __tmp592 == 0x15 {
			__tmp747 := _ref_test_1(struct {
				F0 ONull
				F1 OHeapType
			}{_Null, _heap_type_1(_s)})
			__tmp591 = __tmp747
		} else if __tmp592 == 0x16 {
			__tmp753 := _ref_cast_1(struct {
				F0 ONull
				F1 OHeapType
			}{_NoNull, _heap_type_1(_s)})
			__tmp591 = __tmp753
		} else if __tmp592 == 0x17 {
			__tmp759 := _ref_cast_1(struct {
				F0 ONull
				F1 OHeapType
			}{_Null, _heap_type_1(_s)})
			__tmp591 = __tmp759
		} else if __tmp592 == 0x18 || __tmp592 == 0x19 {
			_opcode := __tmp592
			__tmp766 := _byte_1(_s)
			_flags := __tmp766
			__tmp769 := _require_4(_operatorEq_2(_int_operatorland_2(_flags, 0xfc), 0), _s, _int_operatorPlus_2(_pos, 2), "malformed br_on_cast flags")
			_ = __tmp769
			__tmp776 := _at_2(_var, _s)
			_x := __tmp776
			__tmp780 := struct {
				F0 ONull
				F1 OHeapType
			}{func() ONull {
				var __tmp781 ONull
				if _bit_2(0, _flags) {
					__tmp784 := _Null
					__tmp781 = __tmp784
				} else {
					__tmp786 := _NoNull
					__tmp781 = __tmp786
				}
				return __tmp781
			}(), _heap_type_1(_s)}
			_rt1 := __tmp780
			__tmp791 := struct {
				F0 ONull
				F1 OHeapType
			}{func() ONull {
				var __tmp792 ONull
				if _bit_2(1, _flags) {
					__tmp795 := _Null
					__tmp792 = __tmp795
				} else {
					__tmp797 := _NoNull
					__tmp792 = __tmp797
				}
				return __tmp792
			}(), _heap_type_1(_s)}
			_rt2 := __tmp791
			__tmp802 := __if_opcode___0x18l_then_br_on_cast_else_br_on_cast_fail__3(_x, _rt1, _rt2)

			__tmp591 = __tmp802
		} else if __tmp592 == 0x1a {
			__tmp806 := _any_convert_extern
			__tmp591 = __tmp806
		} else if __tmp592 == 0x1b {
			__tmp807 := _extern_convert_any
			__tmp591 = __tmp807
		} else if __tmp592 == 0x1c {
			__tmp808 := _ref_i31
			__tmp591 = __tmp808
		} else if __tmp592 == 0x1d {
			__tmp809 := _i31_get_s
			__tmp591 = __tmp809
		} else if __tmp592 == 0x1e {
			__tmp810 := _i31_get_u
			__tmp591 = __tmp810
		} else if _n := __tmp592; true {
			_ = _n
			__tmp813 := _illegal2_4(_s, _pos, _b, _n)
			__tmp591 = __tmp813
		}
		__tmp4 = __tmp591
	} else if __tmp5 == 0xfc {
		_b := __tmp5
		var __tmp819 OInstr_
		__tmp820 := _u32_1(_s)
		if __tmp820 == 0x00 {
			__tmp823 := _i32_trunc_sat_f32_s
			__tmp819 = __tmp823
		} else if __tmp820 == 0x01 {
			__tmp824 := _i32_trunc_sat_f32_u
			__tmp819 = __tmp824
		} else if __tmp820 == 0x02 {
			__tmp825 := _i32_trunc_sat_f64_s
			__tmp819 = __tmp825
		} else if __tmp820 == 0x03 {
			__tmp826 := _i32_trunc_sat_f64_u
			__tmp819 = __tmp826
		} else if __tmp820 == 0x04 {
			__tmp827 := _i64_trunc_sat_f32_s
			__tmp819 = __tmp827
		} else if __tmp820 == 0x05 {
			__tmp828 := _i64_trunc_sat_f32_u
			__tmp819 = __tmp828
		} else if __tmp820 == 0x06 {
			__tmp829 := _i64_trunc_sat_f64_s
			__tmp819 = __tmp829
		} else if __tmp820 == 0x07 {
			__tmp830 := _i64_trunc_sat_f64_u
			__tmp819 = __tmp830
		} else if __tmp820 == 0x08 {
			__tmp831 := _at_2(_var, _s)
			_y := __tmp831
			__tmp835 := _at_2(_var, _s)
			_x := __tmp835
			__tmp839 := _memory_init_2(_x, _y)
			__tmp819 = __tmp839
		} else if __tmp820 == 0x09 {
			__tmp842 := _data_drop_1(_at_2(_var, _s))
			__tmp819 = __tmp842
		} else if __tmp820 == 0x0a {
			__tmp846 := _at_2(_var, _s)
			_x := __tmp846
			__tmp850 := _at_2(_var, _s)
			_y := __tmp850
			__tmp854 := _memory_copy_2(_x, _y)
			__tmp819 = __tmp854
		} else if __tmp820 == 0x0b {
			__tmp857 := _memory_fill_1(_at_2(_var, _s))
			__tmp819 = __tmp857
		} else if __tmp820 == 0x0c {
			__tmp861 := _at_2(_var, _s)
			_y := __tmp861
			__tmp865 := _at_2(_var, _s)
			_x := __tmp865
			__tmp869 := _table_init_2(_x, _y)
			__tmp819 = __tmp869
		} else if __tmp820 == 0x0d {
			__tmp872 := _elem_drop_1(_at_2(_var, _s))
			__tmp819 = __tmp872
		} else if __tmp820 == 0x0e {
			__tmp876 := _at_2(_var, _s)
			_x := __tmp876
			__tmp880 := _at_2(_var, _s)
			_y := __tmp880
			__tmp884 := _table_copy_2(_x, _y)
			__tmp819 = __tmp884
		} else if __tmp820 == 0x0f {
			__tmp887 := _table_grow_1(_at_2(_var, _s))
			__tmp819 = __tmp887
		} else if __tmp820 == 0x10 {
			__tmp891 := _table_size_1(_at_2(_var, _s))
			__tmp819 = __tmp891
		} else if __tmp820 == 0x11 {
			__tmp895 := _table_fill_1(_at_2(_var, _s))
			__tmp819 = __tmp895
		} else if _n := __tmp820; true {
			_ = _n
			__tmp901 := _illegal2_4(_s, _pos, _b, _n)
			__tmp819 = __tmp901
		}
		__tmp4 = __tmp819
	} else if __tmp5 == 0xfd {
		var __tmp906 OInstr_
		__tmp907 := _u32_1(_s)
		if __tmp907 == 0x00 {
			__tmp910 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp910)
			__tmp915 := _v128_load_3(_x, _a, _o)
			__tmp906 = __tmp915
		} else if __tmp907 == 0x01 {
			__tmp919 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp919)
			__tmp924 := _v128_load8x8_s_3(_x, _a, _o)
			__tmp906 = __tmp924
		} else if __tmp907 == 0x02 {
			__tmp928 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp928)
			__tmp933 := _v128_load8x8_u_3(_x, _a, _o)
			__tmp906 = __tmp933
		} else if __tmp907 == 0x03 {
			__tmp937 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp937)
			__tmp942 := _v128_load16x4_s_3(_x, _a, _o)
			__tmp906 = __tmp942
		} else if __tmp907 == 0x04 {
			__tmp946 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp946)
			__tmp951 := _v128_load16x4_u_3(_x, _a, _o)
			__tmp906 = __tmp951
		} else if __tmp907 == 0x05 {
			__tmp955 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp955)
			__tmp960 := _v128_load32x2_s_3(_x, _a, _o)
			__tmp906 = __tmp960
		} else if __tmp907 == 0x06 {
			__tmp964 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp964)
			__tmp969 := _v128_load32x2_u_3(_x, _a, _o)
			__tmp906 = __tmp969
		} else if __tmp907 == 0x07 {
			__tmp973 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp973)
			__tmp978 := _v128_load8_splat_3(_x, _a, _o)
			__tmp906 = __tmp978
		} else if __tmp907 == 0x08 {
			__tmp982 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp982)
			__tmp987 := _v128_load16_splat_3(_x, _a, _o)
			__tmp906 = __tmp987
		} else if __tmp907 == 0x09 {
			__tmp991 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp991)
			__tmp996 := _v128_load32_splat_3(_x, _a, _o)
			__tmp906 = __tmp996
		} else if __tmp907 == 0x0a {
			__tmp1000 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1000)
			__tmp1005 := _v128_load64_splat_3(_x, _a, _o)
			__tmp906 = __tmp1005
		} else if __tmp907 == 0x0b {
			__tmp1009 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1009)
			__tmp1014 := _v128_store_3(_x, _a, _o)
			__tmp906 = __tmp1014
		} else if __tmp907 == 0x0c {
			__tmp1018 := _v128_const_1(_at_2(_v128, _s))
			__tmp906 = __tmp1018
		} else if __tmp907 == 0x0d {
			__tmp1022 := _i8x16_shuffle_1(_List_init_2(16, func(__ OInt) OInt {
				__tmp1024 := _byte_1(_s)
				return __tmp1024
			}))
			__tmp906 = __tmp1022
		} else if __tmp907 == 0x0e {
			__tmp1026 := _i8x16_swizzle
			__tmp906 = __tmp1026
		} else if __tmp907 == 0x0f {
			__tmp1027 := _i8x16_splat
			__tmp906 = __tmp1027
		} else if __tmp907 == 0x10 {
			__tmp1028 := _i16x8_splat
			__tmp906 = __tmp1028
		} else if __tmp907 == 0x11 {
			__tmp1029 := _i32x4_splat
			__tmp906 = __tmp1029
		} else if __tmp907 == 0x12 {
			__tmp1030 := _i64x2_splat
			__tmp906 = __tmp1030
		} else if __tmp907 == 0x13 {
			__tmp1031 := _f32x4_splat
			__tmp906 = __tmp1031
		} else if __tmp907 == 0x14 {
			__tmp1032 := _f64x2_splat
			__tmp906 = __tmp1032
		} else if __tmp907 == 0x15 {
			__tmp1033 := _byte_1(_s)
			_i := __tmp1033
			__tmp1036 := _i8x16_extract_lane_s_1(_i)
			__tmp906 = __tmp1036
		} else if __tmp907 == 0x16 {
			__tmp1038 := _byte_1(_s)
			_i := __tmp1038
			__tmp1041 := _i8x16_extract_lane_u_1(_i)
			__tmp906 = __tmp1041
		} else if __tmp907 == 0x17 {
			__tmp1043 := _byte_1(_s)
			_i := __tmp1043
			__tmp1046 := _i8x16_replace_lane_1(_i)
			__tmp906 = __tmp1046
		} else if __tmp907 == 0x18 {
			__tmp1048 := _byte_1(_s)
			_i := __tmp1048
			__tmp1051 := _i16x8_extract_lane_s_1(_i)
			__tmp906 = __tmp1051
		} else if __tmp907 == 0x19 {
			__tmp1053 := _byte_1(_s)
			_i := __tmp1053
			__tmp1056 := _i16x8_extract_lane_u_1(_i)
			__tmp906 = __tmp1056
		} else if __tmp907 == 0x1a {
			__tmp1058 := _byte_1(_s)
			_i := __tmp1058
			__tmp1061 := _i16x8_replace_lane_1(_i)
			__tmp906 = __tmp1061
		} else if __tmp907 == 0x1b {
			__tmp1063 := _byte_1(_s)
			_i := __tmp1063
			__tmp1066 := _i32x4_extract_lane_1(_i)
			__tmp906 = __tmp1066
		} else if __tmp907 == 0x1c {
			__tmp1068 := _byte_1(_s)
			_i := __tmp1068
			__tmp1071 := _i32x4_replace_lane_1(_i)
			__tmp906 = __tmp1071
		} else if __tmp907 == 0x1d {
			__tmp1073 := _byte_1(_s)
			_i := __tmp1073
			__tmp1076 := _i64x2_extract_lane_1(_i)
			__tmp906 = __tmp1076
		} else if __tmp907 == 0x1e {
			__tmp1078 := _byte_1(_s)
			_i := __tmp1078
			__tmp1081 := _i64x2_replace_lane_1(_i)
			__tmp906 = __tmp1081
		} else if __tmp907 == 0x1f {
			__tmp1083 := _byte_1(_s)
			_i := __tmp1083
			__tmp1086 := _f32x4_extract_lane_1(_i)
			__tmp906 = __tmp1086
		} else if __tmp907 == 0x20 {
			__tmp1088 := _byte_1(_s)
			_i := __tmp1088
			__tmp1091 := _f32x4_replace_lane_1(_i)
			__tmp906 = __tmp1091
		} else if __tmp907 == 0x21 {
			__tmp1093 := _byte_1(_s)
			_i := __tmp1093
			__tmp1096 := _f64x2_extract_lane_1(_i)
			__tmp906 = __tmp1096
		} else if __tmp907 == 0x22 {
			__tmp1098 := _byte_1(_s)
			_i := __tmp1098
			__tmp1101 := _f64x2_replace_lane_1(_i)
			__tmp906 = __tmp1101
		} else if __tmp907 == 0x23 {
			__tmp1103 := _i8x16_eq
			__tmp906 = __tmp1103
		} else if __tmp907 == 0x24 {
			__tmp1104 := _i8x16_ne
			__tmp906 = __tmp1104
		} else if __tmp907 == 0x25 {
			__tmp1105 := _i8x16_lt_s
			__tmp906 = __tmp1105
		} else if __tmp907 == 0x26 {
			__tmp1106 := _i8x16_lt_u
			__tmp906 = __tmp1106
		} else if __tmp907 == 0x27 {
			__tmp1107 := _i8x16_gt_s
			__tmp906 = __tmp1107
		} else if __tmp907 == 0x28 {
			__tmp1108 := _i8x16_gt_u
			__tmp906 = __tmp1108
		} else if __tmp907 == 0x29 {
			__tmp1109 := _i8x16_le_s
			__tmp906 = __tmp1109
		} else if __tmp907 == 0x2a {
			__tmp1110 := _i8x16_le_u
			__tmp906 = __tmp1110
		} else if __tmp907 == 0x2b {
			__tmp1111 := _i8x16_ge_s
			__tmp906 = __tmp1111
		} else if __tmp907 == 0x2c {
			__tmp1112 := _i8x16_ge_u
			__tmp906 = __tmp1112
		} else if __tmp907 == 0x2d {
			__tmp1113 := _i16x8_eq
			__tmp906 = __tmp1113
		} else if __tmp907 == 0x2e {
			__tmp1114 := _i16x8_ne
			__tmp906 = __tmp1114
		} else if __tmp907 == 0x2f {
			__tmp1115 := _i16x8_lt_s
			__tmp906 = __tmp1115
		} else if __tmp907 == 0x30 {
			__tmp1116 := _i16x8_lt_u
			__tmp906 = __tmp1116
		} else if __tmp907 == 0x31 {
			__tmp1117 := _i16x8_gt_s
			__tmp906 = __tmp1117
		} else if __tmp907 == 0x32 {
			__tmp1118 := _i16x8_gt_u
			__tmp906 = __tmp1118
		} else if __tmp907 == 0x33 {
			__tmp1119 := _i16x8_le_s
			__tmp906 = __tmp1119
		} else if __tmp907 == 0x34 {
			__tmp1120 := _i16x8_le_u
			__tmp906 = __tmp1120
		} else if __tmp907 == 0x35 {
			__tmp1121 := _i16x8_ge_s
			__tmp906 = __tmp1121
		} else if __tmp907 == 0x36 {
			__tmp1122 := _i16x8_ge_u
			__tmp906 = __tmp1122
		} else if __tmp907 == 0x37 {
			__tmp1123 := _i32x4_eq
			__tmp906 = __tmp1123
		} else if __tmp907 == 0x38 {
			__tmp1124 := _i32x4_ne
			__tmp906 = __tmp1124
		} else if __tmp907 == 0x39 {
			__tmp1125 := _i32x4_lt_s
			__tmp906 = __tmp1125
		} else if __tmp907 == 0x3a {
			__tmp1126 := _i32x4_lt_u
			__tmp906 = __tmp1126
		} else if __tmp907 == 0x3b {
			__tmp1127 := _i32x4_gt_s
			__tmp906 = __tmp1127
		} else if __tmp907 == 0x3c {
			__tmp1128 := _i32x4_gt_u
			__tmp906 = __tmp1128
		} else if __tmp907 == 0x3d {
			__tmp1129 := _i32x4_le_s
			__tmp906 = __tmp1129
		} else if __tmp907 == 0x3e {
			__tmp1130 := _i32x4_le_u
			__tmp906 = __tmp1130
		} else if __tmp907 == 0x3f {
			__tmp1131 := _i32x4_ge_s
			__tmp906 = __tmp1131
		} else if __tmp907 == 0x40 {
			__tmp1132 := _i32x4_ge_u
			__tmp906 = __tmp1132
		} else if __tmp907 == 0x41 {
			__tmp1133 := _f32x4_eq
			__tmp906 = __tmp1133
		} else if __tmp907 == 0x42 {
			__tmp1134 := _f32x4_ne
			__tmp906 = __tmp1134
		} else if __tmp907 == 0x43 {
			__tmp1135 := _f32x4_lt
			__tmp906 = __tmp1135
		} else if __tmp907 == 0x44 {
			__tmp1136 := _f32x4_gt
			__tmp906 = __tmp1136
		} else if __tmp907 == 0x45 {
			__tmp1137 := _f32x4_le
			__tmp906 = __tmp1137
		} else if __tmp907 == 0x46 {
			__tmp1138 := _f32x4_ge
			__tmp906 = __tmp1138
		} else if __tmp907 == 0x47 {
			__tmp1139 := _f64x2_eq
			__tmp906 = __tmp1139
		} else if __tmp907 == 0x48 {
			__tmp1140 := _f64x2_ne
			__tmp906 = __tmp1140
		} else if __tmp907 == 0x49 {
			__tmp1141 := _f64x2_lt
			__tmp906 = __tmp1141
		} else if __tmp907 == 0x4a {
			__tmp1142 := _f64x2_gt
			__tmp906 = __tmp1142
		} else if __tmp907 == 0x4b {
			__tmp1143 := _f64x2_le
			__tmp906 = __tmp1143
		} else if __tmp907 == 0x4c {
			__tmp1144 := _f64x2_ge
			__tmp906 = __tmp1144
		} else if __tmp907 == 0x4d {
			__tmp1145 := _v128_not
			__tmp906 = __tmp1145
		} else if __tmp907 == 0x4e {
			__tmp1146 := _v128_and
			__tmp906 = __tmp1146
		} else if __tmp907 == 0x4f {
			__tmp1147 := _v128_andnot
			__tmp906 = __tmp1147
		} else if __tmp907 == 0x50 {
			__tmp1148 := _v128_or
			__tmp906 = __tmp1148
		} else if __tmp907 == 0x51 {
			__tmp1149 := _v128_xor
			__tmp906 = __tmp1149
		} else if __tmp907 == 0x52 {
			__tmp1150 := _v128_bitselect
			__tmp906 = __tmp1150
		} else if __tmp907 == 0x53 {
			__tmp1151 := _v128_any_true
			__tmp906 = __tmp1151
		} else if __tmp907 == 0x54 {
			__tmp1152 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1152)
			__tmp1157 := _byte_1(_s)
			_lane := __tmp1157
			__tmp1160 := _v128_load8_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1160
		} else if __tmp907 == 0x55 {
			__tmp1165 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1165)
			__tmp1170 := _byte_1(_s)
			_lane := __tmp1170
			__tmp1173 := _v128_load16_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1173
		} else if __tmp907 == 0x56 {
			__tmp1178 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1178)
			__tmp1183 := _byte_1(_s)
			_lane := __tmp1183
			__tmp1186 := _v128_load32_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1186
		} else if __tmp907 == 0x57 {
			__tmp1191 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1191)
			__tmp1196 := _byte_1(_s)
			_lane := __tmp1196
			__tmp1199 := _v128_load64_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1199
		} else if __tmp907 == 0x58 {
			__tmp1204 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1204)
			__tmp1209 := _byte_1(_s)
			_lane := __tmp1209
			__tmp1212 := _v128_store8_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1212
		} else if __tmp907 == 0x59 {
			__tmp1217 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1217)
			__tmp1222 := _byte_1(_s)
			_lane := __tmp1222
			__tmp1225 := _v128_store16_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1225
		} else if __tmp907 == 0x5a {
			__tmp1230 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1230)
			__tmp1235 := _byte_1(_s)
			_lane := __tmp1235
			__tmp1238 := _v128_store32_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1238
		} else if __tmp907 == 0x5b {
			__tmp1243 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1243)
			__tmp1248 := _byte_1(_s)
			_lane := __tmp1248
			__tmp1251 := _v128_store64_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1251
		} else if __tmp907 == 0x5c {
			__tmp1256 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1256)
			__tmp1261 := _v128_load32_zero_3(_x, _a, _o)
			__tmp906 = __tmp1261
		} else if __tmp907 == 0x5d {
			__tmp1265 := _memop_1(_s)
			_x, _a, _o := __unpack_local_idx_phrase___int___int64(__tmp1265)
			__tmp1270 := _v128_load64_zero_3(_x, _a, _o)
			__tmp906 = __tmp1270
		} else if __tmp907 == 0x5e {
			__tmp1274 := _f32x4_demote_f64x2_zero
			__tmp906 = __tmp1274
		} else if __tmp907 == 0x5f {
			__tmp1275 := _f64x2_promote_low_f32x4
			__tmp906 = __tmp1275
		} else if __tmp907 == 0x60 {
			__tmp1276 := _i8x16_abs
			__tmp906 = __tmp1276
		} else if __tmp907 == 0x61 {
			__tmp1277 := _i8x16_neg
			__tmp906 = __tmp1277
		} else if __tmp907 == 0x62 {
			__tmp1278 := _i8x16_popcnt
			__tmp906 = __tmp1278
		} else if __tmp907 == 0x63 {
			__tmp1279 := _i8x16_all_true
			__tmp906 = __tmp1279
		} else if __tmp907 == 0x64 {
			__tmp1280 := _i8x16_bitmask
			__tmp906 = __tmp1280
		} else if __tmp907 == 0x65 {
			__tmp1281 := _i8x16_narrow_i16x8_s
			__tmp906 = __tmp1281
		} else if __tmp907 == 0x66 {
			__tmp1282 := _i8x16_narrow_i16x8_u
			__tmp906 = __tmp1282
		} else if __tmp907 == 0x67 {
			__tmp1283 := _f32x4_ceil
			__tmp906 = __tmp1283
		} else if __tmp907 == 0x68 {
			__tmp1284 := _f32x4_floor
			__tmp906 = __tmp1284
		} else if __tmp907 == 0x69 {
			__tmp1285 := _f32x4_trunc
			__tmp906 = __tmp1285
		} else if __tmp907 == 0x6a {
			__tmp1286 := _f32x4_nearest
			__tmp906 = __tmp1286
		} else if __tmp907 == 0x6b {
			__tmp1287 := _i8x16_shl
			__tmp906 = __tmp1287
		} else if __tmp907 == 0x6c {
			__tmp1288 := _i8x16_shr_s
			__tmp906 = __tmp1288
		} else if __tmp907 == 0x6d {
			__tmp1289 := _i8x16_shr_u
			__tmp906 = __tmp1289
		} else if __tmp907 == 0x6e {
			__tmp1290 := _i8x16_add
			__tmp906 = __tmp1290
		} else if __tmp907 == 0x6f {
			__tmp1291 := _i8x16_add_sat_s
			__tmp906 = __tmp1291
		} else if __tmp907 == 0x70 {
			__tmp1292 := _i8x16_add_sat_u
			__tmp906 = __tmp1292
		} else if __tmp907 == 0x71 {
			__tmp1293 := _i8x16_sub
			__tmp906 = __tmp1293
		} else if __tmp907 == 0x72 {
			__tmp1294 := _i8x16_sub_sat_s
			__tmp906 = __tmp1294
		} else if __tmp907 == 0x73 {
			__tmp1295 := _i8x16_sub_sat_u
			__tmp906 = __tmp1295
		} else if __tmp907 == 0x74 {
			__tmp1296 := _f64x2_ceil
			__tmp906 = __tmp1296
		} else if __tmp907 == 0x75 {
			__tmp1297 := _f64x2_floor
			__tmp906 = __tmp1297
		} else if __tmp907 == 0x76 {
			__tmp1298 := _i8x16_min_s
			__tmp906 = __tmp1298
		} else if __tmp907 == 0x77 {
			__tmp1299 := _i8x16_min_u
			__tmp906 = __tmp1299
		} else if __tmp907 == 0x78 {
			__tmp1300 := _i8x16_max_s
			__tmp906 = __tmp1300
		} else if __tmp907 == 0x79 {
			__tmp1301 := _i8x16_max_u
			__tmp906 = __tmp1301
		} else if __tmp907 == 0x7a {
			__tmp1302 := _f64x2_trunc
			__tmp906 = __tmp1302
		} else if __tmp907 == 0x7b {
			__tmp1303 := _i8x16_avgr_u
			__tmp906 = __tmp1303
		} else if __tmp907 == 0x7c {
			__tmp1304 := _i16x8_extadd_pairwise_i8x16_s
			__tmp906 = __tmp1304
		} else if __tmp907 == 0x7d {
			__tmp1305 := _i16x8_extadd_pairwise_i8x16_u
			__tmp906 = __tmp1305
		} else if __tmp907 == 0x7e {
			__tmp1306 := _i32x4_extadd_pairwise_i16x8_s
			__tmp906 = __tmp1306
		} else if __tmp907 == 0x7f {
			__tmp1307 := _i32x4_extadd_pairwise_i16x8_u
			__tmp906 = __tmp1307
		} else if __tmp907 == 0x80 {
			__tmp1308 := _i16x8_abs
			__tmp906 = __tmp1308
		} else if __tmp907 == 0x81 {
			__tmp1309 := _i16x8_neg
			__tmp906 = __tmp1309
		} else if __tmp907 == 0x82 {
			__tmp1310 := _i16x8_q15mulr_sat_s
			__tmp906 = __tmp1310
		} else if __tmp907 == 0x83 {
			__tmp1311 := _i16x8_all_true
			__tmp906 = __tmp1311
		} else if __tmp907 == 0x84 {
			__tmp1312 := _i16x8_bitmask
			__tmp906 = __tmp1312
		} else if __tmp907 == 0x85 {
			__tmp1313 := _i16x8_narrow_i32x4_s
			__tmp906 = __tmp1313
		} else if __tmp907 == 0x86 {
			__tmp1314 := _i16x8_narrow_i32x4_u
			__tmp906 = __tmp1314
		} else if __tmp907 == 0x87 {
			__tmp1315 := _i16x8_extend_low_i8x16_s
			__tmp906 = __tmp1315
		} else if __tmp907 == 0x88 {
			__tmp1316 := _i16x8_extend_high_i8x16_s
			__tmp906 = __tmp1316
		} else if __tmp907 == 0x89 {
			__tmp1317 := _i16x8_extend_low_i8x16_u
			__tmp906 = __tmp1317
		} else if __tmp907 == 0x8a {
			__tmp1318 := _i16x8_extend_high_i8x16_u
			__tmp906 = __tmp1318
		} else if __tmp907 == 0x8b {
			__tmp1319 := _i16x8_shl
			__tmp906 = __tmp1319
		} else if __tmp907 == 0x8c {
			__tmp1320 := _i16x8_shr_s
			__tmp906 = __tmp1320
		} else if __tmp907 == 0x8d {
			__tmp1321 := _i16x8_shr_u
			__tmp906 = __tmp1321
		} else if __tmp907 == 0x8e {
			__tmp1322 := _i16x8_add
			__tmp906 = __tmp1322
		} else if __tmp907 == 0x8f {
			__tmp1323 := _i16x8_add_sat_s
			__tmp906 = __tmp1323
		} else if __tmp907 == 0x90 {
			__tmp1324 := _i16x8_add_sat_u
			__tmp906 = __tmp1324
		} else if __tmp907 == 0x91 {
			__tmp1325 := _i16x8_sub
			__tmp906 = __tmp1325
		} else if __tmp907 == 0x92 {
			__tmp1326 := _i16x8_sub_sat_s
			__tmp906 = __tmp1326
		} else if __tmp907 == 0x93 {
			__tmp1327 := _i16x8_sub_sat_u
			__tmp906 = __tmp1327
		} else if __tmp907 == 0x94 {
			__tmp1328 := _f64x2_nearest
			__tmp906 = __tmp1328
		} else if __tmp907 == 0x95 {
			__tmp1329 := _i16x8_mul
			__tmp906 = __tmp1329
		} else if __tmp907 == 0x96 {
			__tmp1330 := _i16x8_min_s
			__tmp906 = __tmp1330
		} else if __tmp907 == 0x97 {
			__tmp1331 := _i16x8_min_u
			__tmp906 = __tmp1331
		} else if __tmp907 == 0x98 {
			__tmp1332 := _i16x8_max_s
			__tmp906 = __tmp1332
		} else if __tmp907 == 0x99 {
			__tmp1333 := _i16x8_max_u
			__tmp906 = __tmp1333
		} else if __tmp907 == 0x9a {
			_n := __tmp907
			__tmp1335 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1335
		} else if __tmp907 == 0x9b {
			__tmp1340 := _i16x8_avgr_u
			__tmp906 = __tmp1340
		} else if __tmp907 == 0x9c {
			__tmp1341 := _i16x8_extmul_low_i8x16_s
			__tmp906 = __tmp1341
		} else if __tmp907 == 0x9d {
			__tmp1342 := _i16x8_extmul_high_i8x16_s
			__tmp906 = __tmp1342
		} else if __tmp907 == 0x9e {
			__tmp1343 := _i16x8_extmul_low_i8x16_u
			__tmp906 = __tmp1343
		} else if __tmp907 == 0x9f {
			__tmp1344 := _i16x8_extmul_high_i8x16_u
			__tmp906 = __tmp1344
		} else if __tmp907 == 0xa0 {
			__tmp1345 := _i32x4_abs
			__tmp906 = __tmp1345
		} else if __tmp907 == 0xa1 {
			__tmp1346 := _i32x4_neg
			__tmp906 = __tmp1346
		} else if __tmp907 == 0xa2 {
			_n := __tmp907
			__tmp1348 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1348
		} else if __tmp907 == 0xa3 {
			__tmp1353 := _i32x4_all_true
			__tmp906 = __tmp1353
		} else if __tmp907 == 0xa4 {
			__tmp1354 := _i32x4_bitmask
			__tmp906 = __tmp1354
		} else if __tmp907 == 0xa5 || __tmp907 == 0xa6 {
			_n := __tmp907
			__tmp1356 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1356
		} else if __tmp907 == 0xa7 {
			__tmp1361 := _i32x4_extend_low_i16x8_s
			__tmp906 = __tmp1361
		} else if __tmp907 == 0xa8 {
			__tmp1362 := _i32x4_extend_high_i16x8_s
			__tmp906 = __tmp1362
		} else if __tmp907 == 0xa9 {
			__tmp1363 := _i32x4_extend_low_i16x8_u
			__tmp906 = __tmp1363
		} else if __tmp907 == 0xaa {
			__tmp1364 := _i32x4_extend_high_i16x8_u
			__tmp906 = __tmp1364
		} else if __tmp907 == 0xab {
			__tmp1365 := _i32x4_shl
			__tmp906 = __tmp1365
		} else if __tmp907 == 0xac {
			__tmp1366 := _i32x4_shr_s
			__tmp906 = __tmp1366
		} else if __tmp907 == 0xad {
			__tmp1367 := _i32x4_shr_u
			__tmp906 = __tmp1367
		} else if __tmp907 == 0xae {
			__tmp1368 := _i32x4_add
			__tmp906 = __tmp1368
		} else if __tmp907 == 0xaf || __tmp907 == 0xb0 {
			_n := __tmp907
			__tmp1370 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1370
		} else if __tmp907 == 0xb1 {
			__tmp1375 := _i32x4_sub
			__tmp906 = __tmp1375
		} else if __tmp907 == 0xb2 || __tmp907 == 0xb3 || __tmp907 == 0xb4 {
			_n := __tmp907
			__tmp1377 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1377
		} else if __tmp907 == 0xb5 {
			__tmp1382 := _i32x4_mul
			__tmp906 = __tmp1382
		} else if __tmp907 == 0xb6 {
			__tmp1383 := _i32x4_min_s
			__tmp906 = __tmp1383
		} else if __tmp907 == 0xb7 {
			__tmp1384 := _i32x4_min_u
			__tmp906 = __tmp1384
		} else if __tmp907 == 0xb8 {
			__tmp1385 := _i32x4_max_s
			__tmp906 = __tmp1385
		} else if __tmp907 == 0xb9 {
			__tmp1386 := _i32x4_max_u
			__tmp906 = __tmp1386
		} else if __tmp907 == 0xba {
			__tmp1387 := _i32x4_dot_i16x8_s
			__tmp906 = __tmp1387
		} else if __tmp907 == 0xbc {
			__tmp1388 := _i32x4_extmul_low_i16x8_s
			__tmp906 = __tmp1388
		} else if __tmp907 == 0xbd {
			__tmp1389 := _i32x4_extmul_high_i16x8_s
			__tmp906 = __tmp1389
		} else if __tmp907 == 0xbe {
			__tmp1390 := _i32x4_extmul_low_i16x8_u
			__tmp906 = __tmp1390
		} else if __tmp907 == 0xbf {
			__tmp1391 := _i32x4_extmul_high_i16x8_u
			__tmp906 = __tmp1391
		} else if __tmp907 == 0xc0 {
			__tmp1392 := _i64x2_abs
			__tmp906 = __tmp1392
		} else if __tmp907 == 0xc1 {
			__tmp1393 := _i64x2_neg
			__tmp906 = __tmp1393
		} else if __tmp907 == 0xc2 {
			_n := __tmp907
			__tmp1395 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1395
		} else if __tmp907 == 0xc3 {
			__tmp1400 := _i64x2_all_true
			__tmp906 = __tmp1400
		} else if __tmp907 == 0xc4 {
			__tmp1401 := _i64x2_bitmask
			__tmp906 = __tmp1401
		} else if __tmp907 == 0xc5 || __tmp907 == 0xc6 {
			_n := __tmp907
			__tmp1403 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1403
		} else if __tmp907 == 0xc7 {
			__tmp1408 := _i64x2_extend_low_i32x4_s
			__tmp906 = __tmp1408
		} else if __tmp907 == 0xc8 {
			__tmp1409 := _i64x2_extend_high_i32x4_s
			__tmp906 = __tmp1409
		} else if __tmp907 == 0xc9 {
			__tmp1410 := _i64x2_extend_low_i32x4_u
			__tmp906 = __tmp1410
		} else if __tmp907 == 0xca {
			__tmp1411 := _i64x2_extend_high_i32x4_u
			__tmp906 = __tmp1411
		} else if __tmp907 == 0xcb {
			__tmp1412 := _i64x2_shl
			__tmp906 = __tmp1412
		} else if __tmp907 == 0xcc {
			__tmp1413 := _i64x2_shr_s
			__tmp906 = __tmp1413
		} else if __tmp907 == 0xcd {
			__tmp1414 := _i64x2_shr_u
			__tmp906 = __tmp1414
		} else if __tmp907 == 0xce {
			__tmp1415 := _i64x2_add
			__tmp906 = __tmp1415
		} else if __tmp907 == 0xcf || __tmp907 == 0xd0 {
			_n := __tmp907
			__tmp1417 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1417
		} else if __tmp907 == 0xd1 {
			__tmp1422 := _i64x2_sub
			__tmp906 = __tmp1422
		} else if __tmp907 == 0xd2 || __tmp907 == 0xd3 || __tmp907 == 0xd4 {
			_n := __tmp907
			__tmp1424 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1424
		} else if __tmp907 == 0xd5 {
			__tmp1429 := _i64x2_mul
			__tmp906 = __tmp1429
		} else if __tmp907 == 0xd6 {
			__tmp1430 := _i64x2_eq
			__tmp906 = __tmp1430
		} else if __tmp907 == 0xd7 {
			__tmp1431 := _i64x2_ne
			__tmp906 = __tmp1431
		} else if __tmp907 == 0xd8 {
			__tmp1432 := _i64x2_lt_s
			__tmp906 = __tmp1432
		} else if __tmp907 == 0xd9 {
			__tmp1433 := _i64x2_gt_s
			__tmp906 = __tmp1433
		} else if __tmp907 == 0xda {
			__tmp1434 := _i64x2_le_s
			__tmp906 = __tmp1434
		} else if __tmp907 == 0xdb {
			__tmp1435 := _i64x2_ge_s
			__tmp906 = __tmp1435
		} else if __tmp907 == 0xdc {
			__tmp1436 := _i64x2_extmul_low_i32x4_s
			__tmp906 = __tmp1436
		} else if __tmp907 == 0xdd {
			__tmp1437 := _i64x2_extmul_high_i32x4_s
			__tmp906 = __tmp1437
		} else if __tmp907 == 0xde {
			__tmp1438 := _i64x2_extmul_low_i32x4_u
			__tmp906 = __tmp1438
		} else if __tmp907 == 0xdf {
			__tmp1439 := _i64x2_extmul_high_i32x4_u
			__tmp906 = __tmp1439
		} else if __tmp907 == 0xe0 {
			__tmp1440 := _f32x4_abs
			__tmp906 = __tmp1440
		} else if __tmp907 == 0xe1 {
			__tmp1441 := _f32x4_neg
			__tmp906 = __tmp1441
		} else if __tmp907 == 0xe2 {
			_n := __tmp907
			__tmp1443 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1443
		} else if __tmp907 == 0xe3 {
			__tmp1448 := _f32x4_sqrt
			__tmp906 = __tmp1448
		} else if __tmp907 == 0xe4 {
			__tmp1449 := _f32x4_add
			__tmp906 = __tmp1449
		} else if __tmp907 == 0xe5 {
			__tmp1450 := _f32x4_sub
			__tmp906 = __tmp1450
		} else if __tmp907 == 0xe6 {
			__tmp1451 := _f32x4_mul
			__tmp906 = __tmp1451
		} else if __tmp907 == 0xe7 {
			__tmp1452 := _f32x4_div
			__tmp906 = __tmp1452
		} else if __tmp907 == 0xe8 {
			__tmp1453 := _f32x4_min
			__tmp906 = __tmp1453
		} else if __tmp907 == 0xe9 {
			__tmp1454 := _f32x4_max
			__tmp906 = __tmp1454
		} else if __tmp907 == 0xea {
			__tmp1455 := _f32x4_pmin
			__tmp906 = __tmp1455
		} else if __tmp907 == 0xeb {
			__tmp1456 := _f32x4_pmax
			__tmp906 = __tmp1456
		} else if __tmp907 == 0xec {
			__tmp1457 := _f64x2_abs
			__tmp906 = __tmp1457
		} else if __tmp907 == 0xed {
			__tmp1458 := _f64x2_neg
			__tmp906 = __tmp1458
		} else if __tmp907 == 0xef {
			__tmp1459 := _f64x2_sqrt
			__tmp906 = __tmp1459
		} else if __tmp907 == 0xf0 {
			__tmp1460 := _f64x2_add
			__tmp906 = __tmp1460
		} else if __tmp907 == 0xf1 {
			__tmp1461 := _f64x2_sub
			__tmp906 = __tmp1461
		} else if __tmp907 == 0xf2 {
			__tmp1462 := _f64x2_mul
			__tmp906 = __tmp1462
		} else if __tmp907 == 0xf3 {
			__tmp1463 := _f64x2_div
			__tmp906 = __tmp1463
		} else if __tmp907 == 0xf4 {
			__tmp1464 := _f64x2_min
			__tmp906 = __tmp1464
		} else if __tmp907 == 0xf5 {
			__tmp1465 := _f64x2_max
			__tmp906 = __tmp1465
		} else if __tmp907 == 0xf6 {
			__tmp1466 := _f64x2_pmin
			__tmp906 = __tmp1466
		} else if __tmp907 == 0xf7 {
			__tmp1467 := _f64x2_pmax
			__tmp906 = __tmp1467
		} else if __tmp907 == 0xf8 {
			__tmp1468 := _i32x4_trunc_sat_f32x4_s
			__tmp906 = __tmp1468
		} else if __tmp907 == 0xf9 {
			__tmp1469 := _i32x4_trunc_sat_f32x4_u
			__tmp906 = __tmp1469
		} else if __tmp907 == 0xfa {
			__tmp1470 := _f32x4_convert_i32x4_s
			__tmp906 = __tmp1470
		} else if __tmp907 == 0xfb {
			__tmp1471 := _f32x4_convert_i32x4_u
			__tmp906 = __tmp1471
		} else if __tmp907 == 0xfc {
			__tmp1472 := _i32x4_trunc_sat_f64x2_s_zero
			__tmp906 = __tmp1472
		} else if __tmp907 == 0xfd {
			__tmp1473 := _i32x4_trunc_sat_f64x2_u_zero
			__tmp906 = __tmp1473
		} else if __tmp907 == 0xfe {
			__tmp1474 := _f64x2_convert_low_i32x4_s
			__tmp906 = __tmp1474
		} else if __tmp907 == 0xff {
			__tmp1475 := _f64x2_convert_low_i32x4_u
			__tmp906 = __tmp1475
		} else if __tmp907 == 0x100 {
			__tmp1476 := _i8x16_relaxed_swizzle
			__tmp906 = __tmp1476
		} else if __tmp907 == 0x101 {
			__tmp1477 := _i32x4_relaxed_trunc_f32x4_s
			__tmp906 = __tmp1477
		} else if __tmp907 == 0x102 {
			__tmp1478 := _i32x4_relaxed_trunc_f32x4_u
			__tmp906 = __tmp1478
		} else if __tmp907 == 0x103 {
			__tmp1479 := _i32x4_relaxed_trunc_f64x2_s_zero
			__tmp906 = __tmp1479
		} else if __tmp907 == 0x104 {
			__tmp1480 := _i32x4_relaxed_trunc_f64x2_u_zero
			__tmp906 = __tmp1480
		} else if __tmp907 == 0x105 {
			__tmp1481 := _f32x4_relaxed_madd
			__tmp906 = __tmp1481
		} else if __tmp907 == 0x106 {
			__tmp1482 := _f32x4_relaxed_nmadd
			__tmp906 = __tmp1482
		} else if __tmp907 == 0x107 {
			__tmp1483 := _f64x2_relaxed_madd
			__tmp906 = __tmp1483
		} else if __tmp907 == 0x108 {
			__tmp1484 := _f64x2_relaxed_nmadd
			__tmp906 = __tmp1484
		} else if __tmp907 == 0x109 {
			__tmp1485 := _i8x16_relaxed_laneselect
			__tmp906 = __tmp1485
		} else if __tmp907 == 0x10a {
			__tmp1486 := _i16x8_relaxed_laneselect
			__tmp906 = __tmp1486
		} else if __tmp907 == 0x10b {
			__tmp1487 := _i32x4_relaxed_laneselect
			__tmp906 = __tmp1487
		} else if __tmp907 == 0x10c {
			__tmp1488 := _i64x2_relaxed_laneselect
			__tmp906 = __tmp1488
		} else if __tmp907 == 0x10d {
			__tmp1489 := _f32x4_relaxed_min
			__tmp906 = __tmp1489
		} else if __tmp907 == 0x10e {
			__tmp1490 := _f32x4_relaxed_max
			__tmp906 = __tmp1490
		} else if __tmp907 == 0x10f {
			__tmp1491 := _f64x2_relaxed_min
			__tmp906 = __tmp1491
		} else if __tmp907 == 0x110 {
			__tmp1492 := _f64x2_relaxed_max
			__tmp906 = __tmp1492
		} else if __tmp907 == 0x111 {
			__tmp1493 := _i16x8_relaxed_q15mulr_s
			__tmp906 = __tmp1493
		} else if __tmp907 == 0x112 {
			__tmp1494 := _i16x8_relaxed_dot_i8x16_i7x16_s
			__tmp906 = __tmp1494
		} else if __tmp907 == 0x113 {
			__tmp1495 := _i32x4_relaxed_dot_i8x16_i7x16_add_s
			__tmp906 = __tmp1495
		} else if _n := __tmp907; true {
			_ = _n
			__tmp1498 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp906 = __tmp1498
		}
		__tmp4 = __tmp906
	} else if _b := __tmp5; true {
		_ = _b
		__tmp1505 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp1505
	}
	return __tmp4
}

var _instr = _instr_1

var _magic = 0x6d736100

func __unpack_addr_type___limits(t struct {
	F0 OAddrType
	F1 OLimits
}) (OAddrType, OLimits) {
	return t.F0, t.F1
}

func __unpack_local_idx_phrase___int___int64(t struct {
	F0 *Phrase[OLocalIdx]
	F1 OInt
	F2 OInt64
}) (*Phrase[OLocalIdx], OInt, OInt64) {
	return t.F0, t.F1, t.F2
}
