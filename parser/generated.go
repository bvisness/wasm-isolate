// This file is automatically generated. DO NOT EDIT.
package parser

func _instr(_s *Stream) {
	_pos := _pos(_s)
	switch __switchVal0 := _op(_s); __switchVal0 {
	case 0x00:
		_unreachable
	case 0x01:
		_nop
	case 0x02:
		_bt := _block_type(_s)
		_es_ := _instr_block(_s)
		_end_(_s)
		_block_2(_bt, _es_)

	case 0x03:
		_bt := _block_type(_s)
		_es_ := _instr_block(_s)
		_end_(_s)
		_loop_2(_bt, _es_)

	case 0x04:
		_bt := _block_type(_s)
		_es1 := _instr_block(_s)
		if _peek(_s) == _Some(0x05) {
			_expect_3(0x05, _s, "ELSE or END opcode expected")
			_es2 := _instr_block(_s)
			_end_(_s)
			_if__3(_bt, _es1, _es2)

		} else {
			_end_(_s)
			_if__3(_bt, _es1, nil /* TODO: list_expression */)
		}

	case 0x05:
		_error_3(_s, _pos, "misplaced ELSE opcode")
	case 0x06, 0x07:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0x08:
		_throw(_at_2(_var, _s))
	case 0x09:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0x0a:
		_throw_ref
	case 0x0b:
		_error_3(_s, _pos, "misplaced END opcode")
	case 0x0c:
		_br(_at_2(_var, _s))
	case 0x0d:
		_br_if(_at_2(_var, _s))
	case 0x0e:
		_xs := _vec_2(_at(_var), _s)
		_x := _at_2(_var, _s)
		_br_table_2(_xs, _x)
	case 0x0f:
		_return
	case 0x10:
		_call(_at_2(_var, _s))
	case 0x11:
		_y := _at_2(_var, _s)
		_x := _at_2(_var, _s)
		_call_indirect_2(_x, _y)
	case 0x12:
		_return_call(_at_2(_var, _s))
	case 0x13:
		_y := _at_2(_var, _s)
		_x := _at_2(_var, _s)
		_return_call_indirect_2(_x, _y)
	case 0x14:
		_call_ref(_at_2(_var, _s))
	case 0x15:
		_return_call_ref(_at_2(_var, _s))
	case 0x16, 0x17, 0x18, 0x19:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0x1a:
		_drop
	case 0x1b:
		_select(_None)
	case 0x1c:
		_select(_Some(_vec_2(_val_type, _s)))
	case 0x1d, 0x1e:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0x1f:
		_bt := _block_type(_s)
		_cs := _vec_2(_at(_catch), _s)
		_es := _instr_block(_s)
		_end_(_s)
		_try_table_3(_bt, _cs, _es)

	case 0x20:
		_local_get(_at_2(_var, _s))
	case 0x21:
		_local_set(_at_2(_var, _s))
	case 0x22:
		_local_tee(_at_2(_var, _s))
	case 0x23:
		_global_get(_at_2(_var, _s))
	case 0x24:
		_global_set(_at_2(_var, _s))
	case 0x25:
		_table_get(_at_2(_var, _s))
	case 0x26:
		_table_set(_at_2(_var, _s))
	case 0x27:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0x28:
		_x, _a, _o := _memop(_s)
		_i32_load_3(_x, _a, _o)
	case 0x29:
		_x, _a, _o := _memop(_s)
		_i64_load_3(_x, _a, _o)
	case 0x2a:
		_x, _a, _o := _memop(_s)
		_f32_load_3(_x, _a, _o)
	case 0x2b:
		_x, _a, _o := _memop(_s)
		_f64_load_3(_x, _a, _o)
	case 0x2c:
		_x, _a, _o := _memop(_s)
		_i32_load8_s_3(_x, _a, _o)
	case 0x2d:
		_x, _a, _o := _memop(_s)
		_i32_load8_u_3(_x, _a, _o)
	case 0x2e:
		_x, _a, _o := _memop(_s)
		_i32_load16_s_3(_x, _a, _o)
	case 0x2f:
		_x, _a, _o := _memop(_s)
		_i32_load16_u_3(_x, _a, _o)
	case 0x30:
		_x, _a, _o := _memop(_s)
		_i64_load8_s_3(_x, _a, _o)
	case 0x31:
		_x, _a, _o := _memop(_s)
		_i64_load8_u_3(_x, _a, _o)
	case 0x32:
		_x, _a, _o := _memop(_s)
		_i64_load16_s_3(_x, _a, _o)
	case 0x33:
		_x, _a, _o := _memop(_s)
		_i64_load16_u_3(_x, _a, _o)
	case 0x34:
		_x, _a, _o := _memop(_s)
		_i64_load32_s_3(_x, _a, _o)
	case 0x35:
		_x, _a, _o := _memop(_s)
		_i64_load32_u_3(_x, _a, _o)
	case 0x36:
		_x, _a, _o := _memop(_s)
		_i32_store_3(_x, _a, _o)
	case 0x37:
		_x, _a, _o := _memop(_s)
		_i64_store_3(_x, _a, _o)
	case 0x38:
		_x, _a, _o := _memop(_s)
		_f32_store_3(_x, _a, _o)
	case 0x39:
		_x, _a, _o := _memop(_s)
		_f64_store_3(_x, _a, _o)
	case 0x3a:
		_x, _a, _o := _memop(_s)
		_i32_store8_3(_x, _a, _o)
	case 0x3b:
		_x, _a, _o := _memop(_s)
		_i32_store16_3(_x, _a, _o)
	case 0x3c:
		_x, _a, _o := _memop(_s)
		_i64_store8_3(_x, _a, _o)
	case 0x3d:
		_x, _a, _o := _memop(_s)
		_i64_store16_3(_x, _a, _o)
	case 0x3e:
		_x, _a, _o := _memop(_s)
		_i64_store32_3(_x, _a, _o)
	case 0x3f:
		_memory_size(_at_2(_var, _s))
	case 0x40:
		_memory_grow(_at_2(_var, _s))
	case 0x41:
		_i32_const(_at_2(_s32, _s))
	case 0x42:
		_i64_const(_at_2(_s64, _s))
	case 0x43:
		_f32_const(_at_2(_f32, _s))
	case 0x44:
		_f64_const(_at_2(_f64, _s))
	case 0x45:
		_i32_eqz
	case 0x46:
		_i32_eq
	case 0x47:
		_i32_ne
	case 0x48:
		_i32_lt_s
	case 0x49:
		_i32_lt_u
	case 0x4a:
		_i32_gt_s
	case 0x4b:
		_i32_gt_u
	case 0x4c:
		_i32_le_s
	case 0x4d:
		_i32_le_u
	case 0x4e:
		_i32_ge_s
	case 0x4f:
		_i32_ge_u
	case 0x50:
		_i64_eqz
	case 0x51:
		_i64_eq
	case 0x52:
		_i64_ne
	case 0x53:
		_i64_lt_s
	case 0x54:
		_i64_lt_u
	case 0x55:
		_i64_gt_s
	case 0x56:
		_i64_gt_u
	case 0x57:
		_i64_le_s
	case 0x58:
		_i64_le_u
	case 0x59:
		_i64_ge_s
	case 0x5a:
		_i64_ge_u
	case 0x5b:
		_f32_eq
	case 0x5c:
		_f32_ne
	case 0x5d:
		_f32_lt
	case 0x5e:
		_f32_gt
	case 0x5f:
		_f32_le
	case 0x60:
		_f32_ge
	case 0x61:
		_f64_eq
	case 0x62:
		_f64_ne
	case 0x63:
		_f64_lt
	case 0x64:
		_f64_gt
	case 0x65:
		_f64_le
	case 0x66:
		_f64_ge
	case 0x67:
		_i32_clz
	case 0x68:
		_i32_ctz
	case 0x69:
		_i32_popcnt
	case 0x6a:
		_i32_add
	case 0x6b:
		_i32_sub
	case 0x6c:
		_i32_mul
	case 0x6d:
		_i32_div_s
	case 0x6e:
		_i32_div_u
	case 0x6f:
		_i32_rem_s
	case 0x70:
		_i32_rem_u
	case 0x71:
		_i32_and
	case 0x72:
		_i32_or
	case 0x73:
		_i32_xor
	case 0x74:
		_i32_shl
	case 0x75:
		_i32_shr_s
	case 0x76:
		_i32_shr_u
	case 0x77:
		_i32_rotl
	case 0x78:
		_i32_rotr
	case 0x79:
		_i64_clz
	case 0x7a:
		_i64_ctz
	case 0x7b:
		_i64_popcnt
	case 0x7c:
		_i64_add
	case 0x7d:
		_i64_sub
	case 0x7e:
		_i64_mul
	case 0x7f:
		_i64_div_s
	case 0x80:
		_i64_div_u
	case 0x81:
		_i64_rem_s
	case 0x82:
		_i64_rem_u
	case 0x83:
		_i64_and
	case 0x84:
		_i64_or
	case 0x85:
		_i64_xor
	case 0x86:
		_i64_shl
	case 0x87:
		_i64_shr_s
	case 0x88:
		_i64_shr_u
	case 0x89:
		_i64_rotl
	case 0x8a:
		_i64_rotr
	case 0x8b:
		_f32_abs
	case 0x8c:
		_f32_neg
	case 0x8d:
		_f32_ceil
	case 0x8e:
		_f32_floor
	case 0x8f:
		_f32_trunc
	case 0x90:
		_f32_nearest
	case 0x91:
		_f32_sqrt
	case 0x92:
		_f32_add
	case 0x93:
		_f32_sub
	case 0x94:
		_f32_mul
	case 0x95:
		_f32_div
	case 0x96:
		_f32_min
	case 0x97:
		_f32_max
	case 0x98:
		_f32_copysign
	case 0x99:
		_f64_abs
	case 0x9a:
		_f64_neg
	case 0x9b:
		_f64_ceil
	case 0x9c:
		_f64_floor
	case 0x9d:
		_f64_trunc
	case 0x9e:
		_f64_nearest
	case 0x9f:
		_f64_sqrt
	case 0xa0:
		_f64_add
	case 0xa1:
		_f64_sub
	case 0xa2:
		_f64_mul
	case 0xa3:
		_f64_div
	case 0xa4:
		_f64_min
	case 0xa5:
		_f64_max
	case 0xa6:
		_f64_copysign
	case 0xa7:
		_i32_wrap_i64
	case 0xa8:
		_i32_trunc_f32_s
	case 0xa9:
		_i32_trunc_f32_u
	case 0xaa:
		_i32_trunc_f64_s
	case 0xab:
		_i32_trunc_f64_u
	case 0xac:
		_i64_extend_i32_s
	case 0xad:
		_i64_extend_i32_u
	case 0xae:
		_i64_trunc_f32_s
	case 0xaf:
		_i64_trunc_f32_u
	case 0xb0:
		_i64_trunc_f64_s
	case 0xb1:
		_i64_trunc_f64_u
	case 0xb2:
		_f32_convert_i32_s
	case 0xb3:
		_f32_convert_i32_u
	case 0xb4:
		_f32_convert_i64_s
	case 0xb5:
		_f32_convert_i64_u
	case 0xb6:
		_f32_demote_f64
	case 0xb7:
		_f64_convert_i32_s
	case 0xb8:
		_f64_convert_i32_u
	case 0xb9:
		_f64_convert_i64_s
	case 0xba:
		_f64_convert_i64_u
	case 0xbb:
		_f64_promote_f32
	case 0xbc:
		_i32_reinterpret_f32
	case 0xbd:
		_i64_reinterpret_f64
	case 0xbe:
		_f32_reinterpret_i32
	case 0xbf:
		_f64_reinterpret_i64
	case 0xc0:
		_i32_extend8_s
	case 0xc1:
		_i32_extend16_s
	case 0xc2:
		_i64_extend8_s
	case 0xc3:
		_i64_extend16_s
	case 0xc4:
		_i64_extend32_s
	case 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf:
		_b := __switchVal0
		_illegal_3(_s, _pos, _b)
	case 0xd0:
		_ref_null(_heap_type(_s))
	case 0xd1:
		_ref_is_null
	case 0xd2:
		_ref_func(_at_2(_var, _s))
	case 0xd3:
		_ref_eq
	case 0xd4:
		_ref_as_non_null
	case 0xd5:
		_br_on_null(_at_2(_var, _s))
	case 0xd6:
		_br_on_non_null(_at_2(_var, _s))
	default:
		b := __switchVal0
		_illegal_3(_s, _pos, _b)
	}
}
