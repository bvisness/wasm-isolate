// This file is automatically generated. DO NOT EDIT.
package parser

type OTypes_type_idx = OInt32
type OTypes_local_idx = OInt32
type OTypes_name = string

type OTypes_null_kind int

const (
	KTypes_null_NoNull OTypes_null_kind = iota + 1
	KTypes_null_Null
)

type OTypes_null interface {
	Kind() OTypes_null_kind
}

type SimpleOTypes_null struct {
	kind OTypes_null_kind
}

func (t SimpleOTypes_null) Kind() OTypes_null_kind {
	return t.kind
}

var _Types_null_NoNull OTypes_null = SimpleOTypes_null{KTypes_null_NoNull}
var _Types_null_Null OTypes_null = SimpleOTypes_null{KTypes_null_Null}

type OTypes_mut_kind int

const (
	KTypes_mut_Cons OTypes_mut_kind = iota + 1
	KTypes_mut_Var
)

type OTypes_mut interface {
	Kind() OTypes_mut_kind
}

type SimpleOTypes_mut struct {
	kind OTypes_mut_kind
}

func (t SimpleOTypes_mut) Kind() OTypes_mut_kind {
	return t.kind
}

var _Types_mut_Cons OTypes_mut = SimpleOTypes_mut{KTypes_mut_Cons}
var _Types_mut_Var OTypes_mut = SimpleOTypes_mut{KTypes_mut_Var}

type OTypes_init_kind int

const (
	KTypes_init_Set OTypes_init_kind = iota + 1
	KTypes_init_Unset
)

type OTypes_init interface {
	Kind() OTypes_init_kind
}

type SimpleOTypes_init struct {
	kind OTypes_init_kind
}

func (t SimpleOTypes_init) Kind() OTypes_init_kind {
	return t.kind
}

var _Types_init_Set OTypes_init = SimpleOTypes_init{KTypes_init_Set}
var _Types_init_Unset OTypes_init = SimpleOTypes_init{KTypes_init_Unset}

type OTypes_final_kind int

const (
	KTypes_final_NoFinal OTypes_final_kind = iota + 1
	KTypes_final_Final
)

type OTypes_final interface {
	Kind() OTypes_final_kind
}

type SimpleOTypes_final struct {
	kind OTypes_final_kind
}

func (t SimpleOTypes_final) Kind() OTypes_final_kind {
	return t.kind
}

var _Types_final_NoFinal OTypes_final = SimpleOTypes_final{KTypes_final_NoFinal}
var _Types_final_Final OTypes_final = SimpleOTypes_final{KTypes_final_Final}

type OTypes_limits struct {
	min OInt64
	max *OInt64
}

type OTypes_var_kind int

const (
	KTypes_var_StatX OTypes_var_kind = iota + 1
	KTypes_var_RecX
)

type OTypes_var interface {
	Kind() OTypes_var_kind
}

type SimpleOTypes_var struct {
	kind OTypes_var_kind
}

func (t SimpleOTypes_var) Kind() OTypes_var_kind {
	return t.kind
}

type OTypes_var_StatX struct {
	V OTypes_type_idx
}

func (t OTypes_var_StatX) Kind() OTypes_var_kind {
	return KTypes_var_StatX
}
func Types_StatX_1(v OTypes_type_idx) OTypes_var {
	return OTypes_var_StatX{v}
}

type OTypes_var_RecX struct {
	V OInt32
}

func (t OTypes_var_RecX) Kind() OTypes_var_kind {
	return KTypes_var_RecX
}
func Types_RecX_1(v OInt32) OTypes_var {
	return OTypes_var_RecX{v}
}

type OTypes_addr_type_kind int

const (
	KTypes_addr_type_I32AT OTypes_addr_type_kind = iota + 1
	KTypes_addr_type_I64AT
)

type OTypes_addr_type interface {
	Kind() OTypes_addr_type_kind
}

type SimpleOTypes_addr_type struct {
	kind OTypes_addr_type_kind
}

func (t SimpleOTypes_addr_type) Kind() OTypes_addr_type_kind {
	return t.kind
}

var _Types_addr_type_I32AT OTypes_addr_type = SimpleOTypes_addr_type{KTypes_addr_type_I32AT}
var _Types_addr_type_I64AT OTypes_addr_type = SimpleOTypes_addr_type{KTypes_addr_type_I64AT}

type OTypes_num_type_kind int

const (
	KTypes_num_type_I32T OTypes_num_type_kind = iota + 1
	KTypes_num_type_I64T
	KTypes_num_type_F32T
	KTypes_num_type_F64T
)

type OTypes_num_type interface {
	Kind() OTypes_num_type_kind
}

type SimpleOTypes_num_type struct {
	kind OTypes_num_type_kind
}

func (t SimpleOTypes_num_type) Kind() OTypes_num_type_kind {
	return t.kind
}

var _Types_num_type_I32T OTypes_num_type = SimpleOTypes_num_type{KTypes_num_type_I32T}
var _Types_num_type_I64T OTypes_num_type = SimpleOTypes_num_type{KTypes_num_type_I64T}
var _Types_num_type_F32T OTypes_num_type = SimpleOTypes_num_type{KTypes_num_type_F32T}
var _Types_num_type_F64T OTypes_num_type = SimpleOTypes_num_type{KTypes_num_type_F64T}

type OTypes_vec_type_kind int

const (
	KTypes_vec_type_V128T OTypes_vec_type_kind = iota + 1
)

type OTypes_vec_type interface {
	Kind() OTypes_vec_type_kind
}

type SimpleOTypes_vec_type struct {
	kind OTypes_vec_type_kind
}

func (t SimpleOTypes_vec_type) Kind() OTypes_vec_type_kind {
	return t.kind
}

var _Types_vec_type_V128T OTypes_vec_type = SimpleOTypes_vec_type{KTypes_vec_type_V128T}

type OTypes_heap_type_kind int

const (
	KTypes_heap_type_AnyHT OTypes_heap_type_kind = iota + 1
	KTypes_heap_type_NoneHT
	KTypes_heap_type_EqHT
	KTypes_heap_type_I31HT
	KTypes_heap_type_StructHT
	KTypes_heap_type_ArrayHT
	KTypes_heap_type_FuncHT
	KTypes_heap_type_NoFuncHT
	KTypes_heap_type_ExnHT
	KTypes_heap_type_NoExnHT
	KTypes_heap_type_ExternHT
	KTypes_heap_type_NoExternHT
	KTypes_heap_type_VarHT
	KTypes_heap_type_DefHT
	KTypes_heap_type_BotHT
)

type OTypes_heap_type interface {
	Kind() OTypes_heap_type_kind
}

type SimpleOTypes_heap_type struct {
	kind OTypes_heap_type_kind
}

func (t SimpleOTypes_heap_type) Kind() OTypes_heap_type_kind {
	return t.kind
}

var _Types_heap_type_AnyHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_AnyHT}
var _Types_heap_type_NoneHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_NoneHT}
var _Types_heap_type_EqHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_EqHT}
var _Types_heap_type_I31HT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_I31HT}
var _Types_heap_type_StructHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_StructHT}
var _Types_heap_type_ArrayHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_ArrayHT}
var _Types_heap_type_FuncHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_FuncHT}
var _Types_heap_type_NoFuncHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_NoFuncHT}
var _Types_heap_type_ExnHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_ExnHT}
var _Types_heap_type_NoExnHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_NoExnHT}
var _Types_heap_type_ExternHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_ExternHT}
var _Types_heap_type_NoExternHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_NoExternHT}

type OTypes_heap_type_VarHT struct {
	V OTypes_var
}

func (t OTypes_heap_type_VarHT) Kind() OTypes_heap_type_kind {
	return KTypes_heap_type_VarHT
}
func Types_VarHT_1(v OTypes_var) OTypes_heap_type {
	return OTypes_heap_type_VarHT{v}
}

type OTypes_heap_type_DefHT struct {
	V OTypes_def_type
}

func (t OTypes_heap_type_DefHT) Kind() OTypes_heap_type_kind {
	return KTypes_heap_type_DefHT
}
func Types_DefHT_1(v OTypes_def_type) OTypes_heap_type {
	return OTypes_heap_type_DefHT{v}
}

var _Types_heap_type_BotHT OTypes_heap_type = SimpleOTypes_heap_type{KTypes_heap_type_BotHT}

type OTypes_ref_type struct {
	F0 OTypes_null
	F1 OTypes_heap_type
}

type OTypes_val_type_kind int

const (
	KTypes_val_type_NumT OTypes_val_type_kind = iota + 1
	KTypes_val_type_VecT
	KTypes_val_type_RefT
	KTypes_val_type_BotT
)

type OTypes_val_type interface {
	Kind() OTypes_val_type_kind
}

type SimpleOTypes_val_type struct {
	kind OTypes_val_type_kind
}

func (t SimpleOTypes_val_type) Kind() OTypes_val_type_kind {
	return t.kind
}

type OTypes_val_type_NumT struct {
	V OTypes_num_type
}

func (t OTypes_val_type_NumT) Kind() OTypes_val_type_kind {
	return KTypes_val_type_NumT
}
func Types_NumT_1(v OTypes_num_type) OTypes_val_type {
	return OTypes_val_type_NumT{v}
}

type OTypes_val_type_VecT struct {
	V OTypes_vec_type
}

func (t OTypes_val_type_VecT) Kind() OTypes_val_type_kind {
	return KTypes_val_type_VecT
}
func Types_VecT_1(v OTypes_vec_type) OTypes_val_type {
	return OTypes_val_type_VecT{v}
}

type OTypes_val_type_RefT struct {
	V OTypes_ref_type
}

func (t OTypes_val_type_RefT) Kind() OTypes_val_type_kind {
	return KTypes_val_type_RefT
}
func Types_RefT_1(v OTypes_ref_type) OTypes_val_type {
	return OTypes_val_type_RefT{v}
}

var _Types_val_type_BotT OTypes_val_type = SimpleOTypes_val_type{KTypes_val_type_BotT}

type OTypes_result_type = []OTypes_val_type

type OTypes_instr_type_kind int

const (
	KTypes_instr_type_InstrT OTypes_instr_type_kind = iota + 1
)

type OTypes_instr_type interface {
	Kind() OTypes_instr_type_kind
}

type SimpleOTypes_instr_type struct {
	kind OTypes_instr_type_kind
}

func (t SimpleOTypes_instr_type) Kind() OTypes_instr_type_kind {
	return t.kind
}

type OTypes_instr_type_InstrT struct {
	V struct {
		F0 OTypes_result_type
		F1 OTypes_result_type
		F2 []OTypes_local_idx
	}
}

func (t OTypes_instr_type_InstrT) Kind() OTypes_instr_type_kind {
	return KTypes_instr_type_InstrT
}
func Types_InstrT_1(v struct {
	F0 OTypes_result_type
	F1 OTypes_result_type
	F2 []OTypes_local_idx
}) OTypes_instr_type {
	return OTypes_instr_type_InstrT{v}
}

type OTypes_storage_type_kind int

const (
	KTypes_storage_type_ValStorageT OTypes_storage_type_kind = iota + 1
	KTypes_storage_type_PackStorageT
)

type OTypes_storage_type interface {
	Kind() OTypes_storage_type_kind
}

type SimpleOTypes_storage_type struct {
	kind OTypes_storage_type_kind
}

func (t SimpleOTypes_storage_type) Kind() OTypes_storage_type_kind {
	return t.kind
}

type OTypes_storage_type_ValStorageT struct {
	V OTypes_val_type
}

func (t OTypes_storage_type_ValStorageT) Kind() OTypes_storage_type_kind {
	return KTypes_storage_type_ValStorageT
}
func Types_ValStorageT_1(v OTypes_val_type) OTypes_storage_type {
	return OTypes_storage_type_ValStorageT{v}
}

type OTypes_storage_type_PackStorageT struct {
	V OPack_pack_size
}

func (t OTypes_storage_type_PackStorageT) Kind() OTypes_storage_type_kind {
	return KTypes_storage_type_PackStorageT
}
func Types_PackStorageT_1(v OPack_pack_size) OTypes_storage_type {
	return OTypes_storage_type_PackStorageT{v}
}

type OTypes_field_type_kind int

const (
	KTypes_field_type_FieldT OTypes_field_type_kind = iota + 1
)

type OTypes_field_type interface {
	Kind() OTypes_field_type_kind
}

type SimpleOTypes_field_type struct {
	kind OTypes_field_type_kind
}

func (t SimpleOTypes_field_type) Kind() OTypes_field_type_kind {
	return t.kind
}

type OTypes_field_type_FieldT struct {
	V struct {
		F0 OTypes_mut
		F1 OTypes_storage_type
	}
}

func (t OTypes_field_type_FieldT) Kind() OTypes_field_type_kind {
	return KTypes_field_type_FieldT
}
func Types_FieldT_1(v struct {
	F0 OTypes_mut
	F1 OTypes_storage_type
}) OTypes_field_type {
	return OTypes_field_type_FieldT{v}
}

type OTypes_struct_type_kind int

const (
	KTypes_struct_type_StructT OTypes_struct_type_kind = iota + 1
)

type OTypes_struct_type interface {
	Kind() OTypes_struct_type_kind
}

type SimpleOTypes_struct_type struct {
	kind OTypes_struct_type_kind
}

func (t SimpleOTypes_struct_type) Kind() OTypes_struct_type_kind {
	return t.kind
}

type OTypes_struct_type_StructT struct {
	V []OTypes_field_type
}

func (t OTypes_struct_type_StructT) Kind() OTypes_struct_type_kind {
	return KTypes_struct_type_StructT
}
func Types_StructT_1(v []OTypes_field_type) OTypes_struct_type {
	return OTypes_struct_type_StructT{v}
}

type OTypes_array_type_kind int

const (
	KTypes_array_type_ArrayT OTypes_array_type_kind = iota + 1
)

type OTypes_array_type interface {
	Kind() OTypes_array_type_kind
}

type SimpleOTypes_array_type struct {
	kind OTypes_array_type_kind
}

func (t SimpleOTypes_array_type) Kind() OTypes_array_type_kind {
	return t.kind
}

type OTypes_array_type_ArrayT struct {
	V OTypes_field_type
}

func (t OTypes_array_type_ArrayT) Kind() OTypes_array_type_kind {
	return KTypes_array_type_ArrayT
}
func Types_ArrayT_1(v OTypes_field_type) OTypes_array_type {
	return OTypes_array_type_ArrayT{v}
}

type OTypes_func_type_kind int

const (
	KTypes_func_type_FuncT OTypes_func_type_kind = iota + 1
)

type OTypes_func_type interface {
	Kind() OTypes_func_type_kind
}

type SimpleOTypes_func_type struct {
	kind OTypes_func_type_kind
}

func (t SimpleOTypes_func_type) Kind() OTypes_func_type_kind {
	return t.kind
}

type OTypes_func_type_FuncT struct {
	V struct {
		F0 OTypes_result_type
		F1 OTypes_result_type
	}
}

func (t OTypes_func_type_FuncT) Kind() OTypes_func_type_kind {
	return KTypes_func_type_FuncT
}
func Types_FuncT_1(v struct {
	F0 OTypes_result_type
	F1 OTypes_result_type
}) OTypes_func_type {
	return OTypes_func_type_FuncT{v}
}

type OTypes_str_type_kind int

const (
	KTypes_str_type_DefStructT OTypes_str_type_kind = iota + 1
	KTypes_str_type_DefArrayT
	KTypes_str_type_DefFuncT
)

type OTypes_str_type interface {
	Kind() OTypes_str_type_kind
}

type SimpleOTypes_str_type struct {
	kind OTypes_str_type_kind
}

func (t SimpleOTypes_str_type) Kind() OTypes_str_type_kind {
	return t.kind
}

type OTypes_str_type_DefStructT struct {
	V OTypes_struct_type
}

func (t OTypes_str_type_DefStructT) Kind() OTypes_str_type_kind {
	return KTypes_str_type_DefStructT
}
func Types_DefStructT_1(v OTypes_struct_type) OTypes_str_type {
	return OTypes_str_type_DefStructT{v}
}

type OTypes_str_type_DefArrayT struct {
	V OTypes_array_type
}

func (t OTypes_str_type_DefArrayT) Kind() OTypes_str_type_kind {
	return KTypes_str_type_DefArrayT
}
func Types_DefArrayT_1(v OTypes_array_type) OTypes_str_type {
	return OTypes_str_type_DefArrayT{v}
}

type OTypes_str_type_DefFuncT struct {
	V OTypes_func_type
}

func (t OTypes_str_type_DefFuncT) Kind() OTypes_str_type_kind {
	return KTypes_str_type_DefFuncT
}
func Types_DefFuncT_1(v OTypes_func_type) OTypes_str_type {
	return OTypes_str_type_DefFuncT{v}
}

type OTypes_sub_type_kind int

const (
	KTypes_sub_type_SubT OTypes_sub_type_kind = iota + 1
)

type OTypes_sub_type interface {
	Kind() OTypes_sub_type_kind
}

type SimpleOTypes_sub_type struct {
	kind OTypes_sub_type_kind
}

func (t SimpleOTypes_sub_type) Kind() OTypes_sub_type_kind {
	return t.kind
}

type OTypes_sub_type_SubT struct {
	V struct {
		F0 OTypes_final
		F1 []OTypes_heap_type
		F2 OTypes_str_type
	}
}

func (t OTypes_sub_type_SubT) Kind() OTypes_sub_type_kind {
	return KTypes_sub_type_SubT
}
func Types_SubT_1(v struct {
	F0 OTypes_final
	F1 []OTypes_heap_type
	F2 OTypes_str_type
}) OTypes_sub_type {
	return OTypes_sub_type_SubT{v}
}

type OTypes_rec_type_kind int

const (
	KTypes_rec_type_RecT OTypes_rec_type_kind = iota + 1
)

type OTypes_rec_type interface {
	Kind() OTypes_rec_type_kind
}

type SimpleOTypes_rec_type struct {
	kind OTypes_rec_type_kind
}

func (t SimpleOTypes_rec_type) Kind() OTypes_rec_type_kind {
	return t.kind
}

type OTypes_rec_type_RecT struct {
	V []OTypes_sub_type
}

func (t OTypes_rec_type_RecT) Kind() OTypes_rec_type_kind {
	return KTypes_rec_type_RecT
}
func Types_RecT_1(v []OTypes_sub_type) OTypes_rec_type {
	return OTypes_rec_type_RecT{v}
}

type OTypes_def_type_kind int

const (
	KTypes_def_type_DefT OTypes_def_type_kind = iota + 1
)

type OTypes_def_type interface {
	Kind() OTypes_def_type_kind
}

type SimpleOTypes_def_type struct {
	kind OTypes_def_type_kind
}

func (t SimpleOTypes_def_type) Kind() OTypes_def_type_kind {
	return t.kind
}

type OTypes_def_type_DefT struct {
	V struct {
		F0 OTypes_rec_type
		F1 OInt32
	}
}

func (t OTypes_def_type_DefT) Kind() OTypes_def_type_kind {
	return KTypes_def_type_DefT
}
func Types_DefT_1(v struct {
	F0 OTypes_rec_type
	F1 OInt32
}) OTypes_def_type {
	return OTypes_def_type_DefT{v}
}

type OTypes_table_type_kind int

const (
	KTypes_table_type_TableT OTypes_table_type_kind = iota + 1
)

type OTypes_table_type interface {
	Kind() OTypes_table_type_kind
}

type SimpleOTypes_table_type struct {
	kind OTypes_table_type_kind
}

func (t SimpleOTypes_table_type) Kind() OTypes_table_type_kind {
	return t.kind
}

type OTypes_table_type_TableT struct {
	V struct {
		F0 OTypes_addr_type
		F1 OTypes_limits
		F2 OTypes_ref_type
	}
}

func (t OTypes_table_type_TableT) Kind() OTypes_table_type_kind {
	return KTypes_table_type_TableT
}
func Types_TableT_1(v struct {
	F0 OTypes_addr_type
	F1 OTypes_limits
	F2 OTypes_ref_type
}) OTypes_table_type {
	return OTypes_table_type_TableT{v}
}

type OTypes_memory_type_kind int

const (
	KTypes_memory_type_MemoryT OTypes_memory_type_kind = iota + 1
)

type OTypes_memory_type interface {
	Kind() OTypes_memory_type_kind
}

type SimpleOTypes_memory_type struct {
	kind OTypes_memory_type_kind
}

func (t SimpleOTypes_memory_type) Kind() OTypes_memory_type_kind {
	return t.kind
}

type OTypes_memory_type_MemoryT struct {
	V struct {
		F0 OTypes_addr_type
		F1 OTypes_limits
	}
}

func (t OTypes_memory_type_MemoryT) Kind() OTypes_memory_type_kind {
	return KTypes_memory_type_MemoryT
}
func Types_MemoryT_1(v struct {
	F0 OTypes_addr_type
	F1 OTypes_limits
}) OTypes_memory_type {
	return OTypes_memory_type_MemoryT{v}
}

type OTypes_global_type_kind int

const (
	KTypes_global_type_GlobalT OTypes_global_type_kind = iota + 1
)

type OTypes_global_type interface {
	Kind() OTypes_global_type_kind
}

type SimpleOTypes_global_type struct {
	kind OTypes_global_type_kind
}

func (t SimpleOTypes_global_type) Kind() OTypes_global_type_kind {
	return t.kind
}

type OTypes_global_type_GlobalT struct {
	V struct {
		F0 OTypes_mut
		F1 OTypes_val_type
	}
}

func (t OTypes_global_type_GlobalT) Kind() OTypes_global_type_kind {
	return KTypes_global_type_GlobalT
}
func Types_GlobalT_1(v struct {
	F0 OTypes_mut
	F1 OTypes_val_type
}) OTypes_global_type {
	return OTypes_global_type_GlobalT{v}
}

type OTypes_tag_type_kind int

const (
	KTypes_tag_type_TagT OTypes_tag_type_kind = iota + 1
)

type OTypes_tag_type interface {
	Kind() OTypes_tag_type_kind
}

type SimpleOTypes_tag_type struct {
	kind OTypes_tag_type_kind
}

func (t SimpleOTypes_tag_type) Kind() OTypes_tag_type_kind {
	return t.kind
}

type OTypes_tag_type_TagT struct {
	V OTypes_def_type
}

func (t OTypes_tag_type_TagT) Kind() OTypes_tag_type_kind {
	return KTypes_tag_type_TagT
}
func Types_TagT_1(v OTypes_def_type) OTypes_tag_type {
	return OTypes_tag_type_TagT{v}
}

type OTypes_local_type_kind int

const (
	KTypes_local_type_LocalT OTypes_local_type_kind = iota + 1
)

type OTypes_local_type interface {
	Kind() OTypes_local_type_kind
}

type SimpleOTypes_local_type struct {
	kind OTypes_local_type_kind
}

func (t SimpleOTypes_local_type) Kind() OTypes_local_type_kind {
	return t.kind
}

type OTypes_local_type_LocalT struct {
	V struct {
		F0 OTypes_init
		F1 OTypes_val_type
	}
}

func (t OTypes_local_type_LocalT) Kind() OTypes_local_type_kind {
	return KTypes_local_type_LocalT
}
func Types_LocalT_1(v struct {
	F0 OTypes_init
	F1 OTypes_val_type
}) OTypes_local_type {
	return OTypes_local_type_LocalT{v}
}

type OTypes_extern_type_kind int

const (
	KTypes_extern_type_ExternFuncT OTypes_extern_type_kind = iota + 1
	KTypes_extern_type_ExternTableT
	KTypes_extern_type_ExternMemoryT
	KTypes_extern_type_ExternGlobalT
	KTypes_extern_type_ExternTagT
)

type OTypes_extern_type interface {
	Kind() OTypes_extern_type_kind
}

type SimpleOTypes_extern_type struct {
	kind OTypes_extern_type_kind
}

func (t SimpleOTypes_extern_type) Kind() OTypes_extern_type_kind {
	return t.kind
}

type OTypes_extern_type_ExternFuncT struct {
	V OTypes_def_type
}

func (t OTypes_extern_type_ExternFuncT) Kind() OTypes_extern_type_kind {
	return KTypes_extern_type_ExternFuncT
}
func Types_ExternFuncT_1(v OTypes_def_type) OTypes_extern_type {
	return OTypes_extern_type_ExternFuncT{v}
}

type OTypes_extern_type_ExternTableT struct {
	V OTypes_table_type
}

func (t OTypes_extern_type_ExternTableT) Kind() OTypes_extern_type_kind {
	return KTypes_extern_type_ExternTableT
}
func Types_ExternTableT_1(v OTypes_table_type) OTypes_extern_type {
	return OTypes_extern_type_ExternTableT{v}
}

type OTypes_extern_type_ExternMemoryT struct {
	V OTypes_memory_type
}

func (t OTypes_extern_type_ExternMemoryT) Kind() OTypes_extern_type_kind {
	return KTypes_extern_type_ExternMemoryT
}
func Types_ExternMemoryT_1(v OTypes_memory_type) OTypes_extern_type {
	return OTypes_extern_type_ExternMemoryT{v}
}

type OTypes_extern_type_ExternGlobalT struct {
	V OTypes_global_type
}

func (t OTypes_extern_type_ExternGlobalT) Kind() OTypes_extern_type_kind {
	return KTypes_extern_type_ExternGlobalT
}
func Types_ExternGlobalT_1(v OTypes_global_type) OTypes_extern_type {
	return OTypes_extern_type_ExternGlobalT{v}
}

type OTypes_extern_type_ExternTagT struct {
	V OTypes_tag_type
}

func (t OTypes_extern_type_ExternTagT) Kind() OTypes_extern_type_kind {
	return KTypes_extern_type_ExternTagT
}
func Types_ExternTagT_1(v OTypes_tag_type) OTypes_extern_type {
	return OTypes_extern_type_ExternTagT{v}
}

type OTypes_export_type_kind int

const (
	KTypes_export_type_ExportT OTypes_export_type_kind = iota + 1
)

type OTypes_export_type interface {
	Kind() OTypes_export_type_kind
}

type SimpleOTypes_export_type struct {
	kind OTypes_export_type_kind
}

func (t SimpleOTypes_export_type) Kind() OTypes_export_type_kind {
	return t.kind
}

type OTypes_export_type_ExportT struct {
	V struct {
		F0 OTypes_extern_type
		F1 OTypes_name
	}
}

func (t OTypes_export_type_ExportT) Kind() OTypes_export_type_kind {
	return KTypes_export_type_ExportT
}
func Types_ExportT_1(v struct {
	F0 OTypes_extern_type
	F1 OTypes_name
}) OTypes_export_type {
	return OTypes_export_type_ExportT{v}
}

type OTypes_import_type_kind int

const (
	KTypes_import_type_ImportT OTypes_import_type_kind = iota + 1
)

type OTypes_import_type interface {
	Kind() OTypes_import_type_kind
}

type SimpleOTypes_import_type struct {
	kind OTypes_import_type_kind
}

func (t SimpleOTypes_import_type) Kind() OTypes_import_type_kind {
	return t.kind
}

type OTypes_import_type_ImportT struct {
	V struct {
		F0 OTypes_extern_type
		F1 OTypes_name
		F2 OTypes_name
	}
}

func (t OTypes_import_type_ImportT) Kind() OTypes_import_type_kind {
	return KTypes_import_type_ImportT
}
func Types_ImportT_1(v struct {
	F0 OTypes_extern_type
	F1 OTypes_name
	F2 OTypes_name
}) OTypes_import_type {
	return OTypes_import_type_ImportT{v}
}

type OTypes_module_type_kind int

const (
	KTypes_module_type_ModuleT OTypes_module_type_kind = iota + 1
)

type OTypes_module_type interface {
	Kind() OTypes_module_type_kind
}

type SimpleOTypes_module_type struct {
	kind OTypes_module_type_kind
}

func (t SimpleOTypes_module_type) Kind() OTypes_module_type_kind {
	return t.kind
}

type OTypes_module_type_ModuleT struct {
	V struct {
		F0 []OTypes_import_type
		F1 []OTypes_export_type
	}
}

func (t OTypes_module_type_ModuleT) Kind() OTypes_module_type_kind {
	return KTypes_module_type_ModuleT
}
func Types_ModuleT_1(v struct {
	F0 []OTypes_import_type
	F1 []OTypes_export_type
}) OTypes_module_type {
	return OTypes_module_type_ModuleT{v}
}

type OTypes_subst = func(OTypes_var) OTypes_heap_type

type OValue_op_kind int

const (
	KValue_op_I32 OValue_op_kind = iota + 1
	KValue_op_I64
	KValue_op_F32
	KValue_op_F64
)

type OValue_op[T_i32 any, T_i64 any, T_f32 any, T_f64 any] interface {
	Kind() OValue_op_kind
}

type SimpleOValue_op struct {
	kind OValue_op_kind
}

func (t SimpleOValue_op) Kind() OValue_op_kind {
	return t.kind
}

type OValue_op_I32[T_i32 any, T_i64 any, T_f32 any, T_f64 any] struct {
	V T_i32
}

func (t OValue_op_I32[T_i32, T_i64, T_f32, T_f64]) Kind() OValue_op_kind {
	return KValue_op_I32
}
func Value_I32_1[T_i32 any, T_i64 any, T_f32 any, T_f64 any](v T_i32) OValue_op[T_i32, T_i64, T_f32, T_f64] {
	return OValue_op_I32[T_i32, T_i64, T_f32, T_f64]{v}
}

type OValue_op_I64[T_i32 any, T_i64 any, T_f32 any, T_f64 any] struct {
	V T_i64
}

func (t OValue_op_I64[T_i32, T_i64, T_f32, T_f64]) Kind() OValue_op_kind {
	return KValue_op_I64
}
func Value_I64_1[T_i32 any, T_i64 any, T_f32 any, T_f64 any](v T_i64) OValue_op[T_i32, T_i64, T_f32, T_f64] {
	return OValue_op_I64[T_i32, T_i64, T_f32, T_f64]{v}
}

type OValue_op_F32[T_i32 any, T_i64 any, T_f32 any, T_f64 any] struct {
	V T_f32
}

func (t OValue_op_F32[T_i32, T_i64, T_f32, T_f64]) Kind() OValue_op_kind {
	return KValue_op_F32
}
func Value_F32_1[T_i32 any, T_i64 any, T_f32 any, T_f64 any](v T_f32) OValue_op[T_i32, T_i64, T_f32, T_f64] {
	return OValue_op_F32[T_i32, T_i64, T_f32, T_f64]{v}
}

type OValue_op_F64[T_i32 any, T_i64 any, T_f32 any, T_f64 any] struct {
	V T_f64
}

func (t OValue_op_F64[T_i32, T_i64, T_f32, T_f64]) Kind() OValue_op_kind {
	return KValue_op_F64
}
func Value_F64_1[T_i32 any, T_i64 any, T_f32 any, T_f64 any](v T_f64) OValue_op[T_i32, T_i64, T_f32, T_f64] {
	return OValue_op_F64[T_i32, T_i64, T_f32, T_f64]{v}
}

type OValue_vecop_kind int

const (
	KValue_vecop_V128 OValue_vecop_kind = iota + 1
)

type OValue_vecop[T_v128 any] interface {
	Kind() OValue_vecop_kind
}

type SimpleOValue_vecop struct {
	kind OValue_vecop_kind
}

func (t SimpleOValue_vecop) Kind() OValue_vecop_kind {
	return t.kind
}

type OValue_vecop_V128[T_v128 any] struct {
	V T_v128
}

func (t OValue_vecop_V128[T_v128]) Kind() OValue_vecop_kind {
	return KValue_vecop_V128
}
func Value_V128_1[T_v128 any](v T_v128) OValue_vecop[T_v128] {
	return OValue_vecop_V128[T_v128]{v}
}

type OValue_num = OValue_op[OI32_t, OI64_t, OF32_t, OF64_t]
type OValue_vec = OValue_vecop[V128]

type OValue_value_kind int

const (
	KValue_value_Num OValue_value_kind = iota + 1
	KValue_value_Vec
	KValue_value_Ref
)

type OValue_value interface {
	Kind() OValue_value_kind
}

type SimpleOValue_value struct {
	kind OValue_value_kind
}

func (t SimpleOValue_value) Kind() OValue_value_kind {
	return t.kind
}

type OValue_value_Num struct {
	V OValue_num
}

func (t OValue_value_Num) Kind() OValue_value_kind {
	return KValue_value_Num
}
func Value_Num_1(v OValue_num) OValue_value {
	return OValue_value_Num{v}
}

type OValue_value_Vec struct {
	V OValue_vec
}

func (t OValue_value_Vec) Kind() OValue_value_kind {
	return KValue_value_Vec
}
func Value_Vec_1(v OValue_vec) OValue_value {
	return OValue_value_Vec{v}
}

type OValue_value_Ref struct {
	V OValue_ref_
}

func (t OValue_value_Ref) Kind() OValue_value_kind {
	return KValue_value_Ref
}
func Value_Ref_1(v OValue_ref_) OValue_value {
	return OValue_value_Ref{v}
}

type OValue_t = OValue_value
type OValue_address = OI64_t

// TODO: Unknown type for definition of type_of_ref': Value.ref_ -> Types.heap_type ref

// TODO: Unknown type for definition of eq_ref': Value.ref_ -> Value.ref_ -> bool ref

// TODO: Unknown type for definition of string_of_ref': Value.ref_ -> string ref

type OPack_pack_size_kind int

const (
	KPack_pack_size_Pack8 OPack_pack_size_kind = iota + 1
	KPack_pack_size_Pack16
	KPack_pack_size_Pack32
	KPack_pack_size_Pack64
)

type OPack_pack_size interface {
	Kind() OPack_pack_size_kind
}

type SimpleOPack_pack_size struct {
	kind OPack_pack_size_kind
}

func (t SimpleOPack_pack_size) Kind() OPack_pack_size_kind {
	return t.kind
}

var _Pack_pack_size_Pack8 OPack_pack_size = SimpleOPack_pack_size{KPack_pack_size_Pack8}
var _Pack_pack_size_Pack16 OPack_pack_size = SimpleOPack_pack_size{KPack_pack_size_Pack16}
var _Pack_pack_size_Pack32 OPack_pack_size = SimpleOPack_pack_size{KPack_pack_size_Pack32}
var _Pack_pack_size_Pack64 OPack_pack_size = SimpleOPack_pack_size{KPack_pack_size_Pack64}

type OPack_extension_kind int

const (
	KPack_extension_SX OPack_extension_kind = iota + 1
	KPack_extension_ZX
)

type OPack_extension interface {
	Kind() OPack_extension_kind
}

type SimpleOPack_extension struct {
	kind OPack_extension_kind
}

func (t SimpleOPack_extension) Kind() OPack_extension_kind {
	return t.kind
}

var _Pack_extension_SX OPack_extension = SimpleOPack_extension{KPack_extension_SX}
var _Pack_extension_ZX OPack_extension = SimpleOPack_extension{KPack_extension_ZX}

type OPack_pack_shape_kind int

const (
	KPack_pack_shape_Pack8x8 OPack_pack_shape_kind = iota + 1
	KPack_pack_shape_Pack16x4
	KPack_pack_shape_Pack32x2
)

type OPack_pack_shape interface {
	Kind() OPack_pack_shape_kind
}

type SimpleOPack_pack_shape struct {
	kind OPack_pack_shape_kind
}

func (t SimpleOPack_pack_shape) Kind() OPack_pack_shape_kind {
	return t.kind
}

var _Pack_pack_shape_Pack8x8 OPack_pack_shape = SimpleOPack_pack_shape{KPack_pack_shape_Pack8x8}
var _Pack_pack_shape_Pack16x4 OPack_pack_shape = SimpleOPack_pack_shape{KPack_pack_shape_Pack16x4}
var _Pack_pack_shape_Pack32x2 OPack_pack_shape = SimpleOPack_pack_shape{KPack_pack_shape_Pack32x2}

type OPack_vec_extension_kind int

const (
	KPack_vec_extension_ExtLane OPack_vec_extension_kind = iota + 1
	KPack_vec_extension_ExtSplat
	KPack_vec_extension_ExtZero
)

type OPack_vec_extension interface {
	Kind() OPack_vec_extension_kind
}

type SimpleOPack_vec_extension struct {
	kind OPack_vec_extension_kind
}

func (t SimpleOPack_vec_extension) Kind() OPack_vec_extension_kind {
	return t.kind
}

type OPack_vec_extension_ExtLane struct {
	V struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}
}

func (t OPack_vec_extension_ExtLane) Kind() OPack_vec_extension_kind {
	return KPack_vec_extension_ExtLane
}
func Pack_ExtLane_1(v struct {
	F0 OPack_pack_shape
	F1 OPack_extension
}) OPack_vec_extension {
	return OPack_vec_extension_ExtLane{v}
}

var _Pack_vec_extension_ExtSplat OPack_vec_extension = SimpleOPack_vec_extension{KPack_vec_extension_ExtSplat}
var _Pack_vec_extension_ExtZero OPack_vec_extension = SimpleOPack_vec_extension{KPack_vec_extension_ExtZero}

type OSource_pos struct {
	file   string
	line   OInt
	column OInt
}
type OSource_region struct {
	left  OSource_pos
	right OSource_pos
}
type OSource_phrase[T_a any] struct {
	at OSource_region
	it T_a
}

var Source_no_pos = OSource_pos{file: "", line: 0, column: 0}
var Source_no_region = OSource_region{left: Source_no_pos, right: Source_no_pos}

type OAst_IntOp_unop_kind int

const (
	KAst_IntOp_unop_Clz OAst_IntOp_unop_kind = iota + 1
	KAst_IntOp_unop_Ctz
	KAst_IntOp_unop_Popcnt
	KAst_IntOp_unop_ExtendS
)

type OAst_IntOp_unop interface {
	Kind() OAst_IntOp_unop_kind
}

type SimpleOAst_IntOp_unop struct {
	kind OAst_IntOp_unop_kind
}

func (t SimpleOAst_IntOp_unop) Kind() OAst_IntOp_unop_kind {
	return t.kind
}

var _Ast_IntOp_unop_Clz OAst_IntOp_unop = SimpleOAst_IntOp_unop{KAst_IntOp_unop_Clz}
var _Ast_IntOp_unop_Ctz OAst_IntOp_unop = SimpleOAst_IntOp_unop{KAst_IntOp_unop_Ctz}
var _Ast_IntOp_unop_Popcnt OAst_IntOp_unop = SimpleOAst_IntOp_unop{KAst_IntOp_unop_Popcnt}

type OAst_IntOp_unop_ExtendS struct {
	V OAst_IntOp_pack_size
}

func (t OAst_IntOp_unop_ExtendS) Kind() OAst_IntOp_unop_kind {
	return KAst_IntOp_unop_ExtendS
}
func Ast_IntOp_ExtendS_1(v OAst_IntOp_pack_size) OAst_IntOp_unop {
	return OAst_IntOp_unop_ExtendS{v}
}

type OAst_IntOp_binop_kind int

const (
	KAst_IntOp_binop_Add OAst_IntOp_binop_kind = iota + 1
	KAst_IntOp_binop_Sub
	KAst_IntOp_binop_Mul
	KAst_IntOp_binop_DivS
	KAst_IntOp_binop_DivU
	KAst_IntOp_binop_RemS
	KAst_IntOp_binop_RemU
	KAst_IntOp_binop_And
	KAst_IntOp_binop_Or
	KAst_IntOp_binop_Xor
	KAst_IntOp_binop_Shl
	KAst_IntOp_binop_ShrS
	KAst_IntOp_binop_ShrU
	KAst_IntOp_binop_Rotl
	KAst_IntOp_binop_Rotr
)

type OAst_IntOp_binop interface {
	Kind() OAst_IntOp_binop_kind
}

type SimpleOAst_IntOp_binop struct {
	kind OAst_IntOp_binop_kind
}

func (t SimpleOAst_IntOp_binop) Kind() OAst_IntOp_binop_kind {
	return t.kind
}

var _Ast_IntOp_binop_Add OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Add}
var _Ast_IntOp_binop_Sub OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Sub}
var _Ast_IntOp_binop_Mul OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Mul}
var _Ast_IntOp_binop_DivS OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_DivS}
var _Ast_IntOp_binop_DivU OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_DivU}
var _Ast_IntOp_binop_RemS OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_RemS}
var _Ast_IntOp_binop_RemU OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_RemU}
var _Ast_IntOp_binop_And OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_And}
var _Ast_IntOp_binop_Or OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Or}
var _Ast_IntOp_binop_Xor OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Xor}
var _Ast_IntOp_binop_Shl OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Shl}
var _Ast_IntOp_binop_ShrS OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_ShrS}
var _Ast_IntOp_binop_ShrU OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_ShrU}
var _Ast_IntOp_binop_Rotl OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Rotl}
var _Ast_IntOp_binop_Rotr OAst_IntOp_binop = SimpleOAst_IntOp_binop{KAst_IntOp_binop_Rotr}

type OAst_IntOp_testop_kind int

const (
	KAst_IntOp_testop_Eqz OAst_IntOp_testop_kind = iota + 1
)

type OAst_IntOp_testop interface {
	Kind() OAst_IntOp_testop_kind
}

type SimpleOAst_IntOp_testop struct {
	kind OAst_IntOp_testop_kind
}

func (t SimpleOAst_IntOp_testop) Kind() OAst_IntOp_testop_kind {
	return t.kind
}

var _Ast_IntOp_testop_Eqz OAst_IntOp_testop = SimpleOAst_IntOp_testop{KAst_IntOp_testop_Eqz}

type OAst_IntOp_relop_kind int

const (
	KAst_IntOp_relop_Eq OAst_IntOp_relop_kind = iota + 1
	KAst_IntOp_relop_Ne
	KAst_IntOp_relop_LtS
	KAst_IntOp_relop_LtU
	KAst_IntOp_relop_GtS
	KAst_IntOp_relop_GtU
	KAst_IntOp_relop_LeS
	KAst_IntOp_relop_LeU
	KAst_IntOp_relop_GeS
	KAst_IntOp_relop_GeU
)

type OAst_IntOp_relop interface {
	Kind() OAst_IntOp_relop_kind
}

type SimpleOAst_IntOp_relop struct {
	kind OAst_IntOp_relop_kind
}

func (t SimpleOAst_IntOp_relop) Kind() OAst_IntOp_relop_kind {
	return t.kind
}

var _Ast_IntOp_relop_Eq OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_Eq}
var _Ast_IntOp_relop_Ne OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_Ne}
var _Ast_IntOp_relop_LtS OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_LtS}
var _Ast_IntOp_relop_LtU OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_LtU}
var _Ast_IntOp_relop_GtS OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_GtS}
var _Ast_IntOp_relop_GtU OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_GtU}
var _Ast_IntOp_relop_LeS OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_LeS}
var _Ast_IntOp_relop_LeU OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_LeU}
var _Ast_IntOp_relop_GeS OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_GeS}
var _Ast_IntOp_relop_GeU OAst_IntOp_relop = SimpleOAst_IntOp_relop{KAst_IntOp_relop_GeU}

type OAst_IntOp_cvtop_kind int

const (
	KAst_IntOp_cvtop_ExtendSI32 OAst_IntOp_cvtop_kind = iota + 1
	KAst_IntOp_cvtop_ExtendUI32
	KAst_IntOp_cvtop_WrapI64
	KAst_IntOp_cvtop_TruncSF32
	KAst_IntOp_cvtop_TruncUF32
	KAst_IntOp_cvtop_TruncSF64
	KAst_IntOp_cvtop_TruncUF64
	KAst_IntOp_cvtop_TruncSatSF32
	KAst_IntOp_cvtop_TruncSatUF32
	KAst_IntOp_cvtop_TruncSatSF64
	KAst_IntOp_cvtop_TruncSatUF64
	KAst_IntOp_cvtop_ReinterpretFloat
)

type OAst_IntOp_cvtop interface {
	Kind() OAst_IntOp_cvtop_kind
}

type SimpleOAst_IntOp_cvtop struct {
	kind OAst_IntOp_cvtop_kind
}

func (t SimpleOAst_IntOp_cvtop) Kind() OAst_IntOp_cvtop_kind {
	return t.kind
}

var _Ast_IntOp_cvtop_ExtendSI32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_ExtendSI32}
var _Ast_IntOp_cvtop_ExtendUI32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_ExtendUI32}
var _Ast_IntOp_cvtop_WrapI64 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_WrapI64}
var _Ast_IntOp_cvtop_TruncSF32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSF32}
var _Ast_IntOp_cvtop_TruncUF32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncUF32}
var _Ast_IntOp_cvtop_TruncSF64 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSF64}
var _Ast_IntOp_cvtop_TruncUF64 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncUF64}
var _Ast_IntOp_cvtop_TruncSatSF32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSatSF32}
var _Ast_IntOp_cvtop_TruncSatUF32 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSatUF32}
var _Ast_IntOp_cvtop_TruncSatSF64 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSatSF64}
var _Ast_IntOp_cvtop_TruncSatUF64 OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_TruncSatUF64}
var _Ast_IntOp_cvtop_ReinterpretFloat OAst_IntOp_cvtop = SimpleOAst_IntOp_cvtop{KAst_IntOp_cvtop_ReinterpretFloat}

type OAst_FloatOp_unop_kind int

const (
	KAst_FloatOp_unop_Neg OAst_FloatOp_unop_kind = iota + 1
	KAst_FloatOp_unop_Abs
	KAst_FloatOp_unop_Ceil
	KAst_FloatOp_unop_Floor
	KAst_FloatOp_unop_Trunc
	KAst_FloatOp_unop_Nearest
	KAst_FloatOp_unop_Sqrt
)

type OAst_FloatOp_unop interface {
	Kind() OAst_FloatOp_unop_kind
}

type SimpleOAst_FloatOp_unop struct {
	kind OAst_FloatOp_unop_kind
}

func (t SimpleOAst_FloatOp_unop) Kind() OAst_FloatOp_unop_kind {
	return t.kind
}

var _Ast_FloatOp_unop_Neg OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Neg}
var _Ast_FloatOp_unop_Abs OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Abs}
var _Ast_FloatOp_unop_Ceil OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Ceil}
var _Ast_FloatOp_unop_Floor OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Floor}
var _Ast_FloatOp_unop_Trunc OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Trunc}
var _Ast_FloatOp_unop_Nearest OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Nearest}
var _Ast_FloatOp_unop_Sqrt OAst_FloatOp_unop = SimpleOAst_FloatOp_unop{KAst_FloatOp_unop_Sqrt}

type OAst_FloatOp_binop_kind int

const (
	KAst_FloatOp_binop_Add OAst_FloatOp_binop_kind = iota + 1
	KAst_FloatOp_binop_Sub
	KAst_FloatOp_binop_Mul
	KAst_FloatOp_binop_Div
	KAst_FloatOp_binop_Min
	KAst_FloatOp_binop_Max
	KAst_FloatOp_binop_CopySign
)

type OAst_FloatOp_binop interface {
	Kind() OAst_FloatOp_binop_kind
}

type SimpleOAst_FloatOp_binop struct {
	kind OAst_FloatOp_binop_kind
}

func (t SimpleOAst_FloatOp_binop) Kind() OAst_FloatOp_binop_kind {
	return t.kind
}

var _Ast_FloatOp_binop_Add OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Add}
var _Ast_FloatOp_binop_Sub OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Sub}
var _Ast_FloatOp_binop_Mul OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Mul}
var _Ast_FloatOp_binop_Div OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Div}
var _Ast_FloatOp_binop_Min OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Min}
var _Ast_FloatOp_binop_Max OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_Max}
var _Ast_FloatOp_binop_CopySign OAst_FloatOp_binop = SimpleOAst_FloatOp_binop{KAst_FloatOp_binop_CopySign}

type OAst_FloatOp_testop_kind int

const ()

type OAst_FloatOp_testop interface {
	Kind() OAst_FloatOp_testop_kind
}

type SimpleOAst_FloatOp_testop struct {
	kind OAst_FloatOp_testop_kind
}

func (t SimpleOAst_FloatOp_testop) Kind() OAst_FloatOp_testop_kind {
	return t.kind
}

type OAst_FloatOp_relop_kind int

const (
	KAst_FloatOp_relop_Eq OAst_FloatOp_relop_kind = iota + 1
	KAst_FloatOp_relop_Ne
	KAst_FloatOp_relop_Lt
	KAst_FloatOp_relop_Gt
	KAst_FloatOp_relop_Le
	KAst_FloatOp_relop_Ge
)

type OAst_FloatOp_relop interface {
	Kind() OAst_FloatOp_relop_kind
}

type SimpleOAst_FloatOp_relop struct {
	kind OAst_FloatOp_relop_kind
}

func (t SimpleOAst_FloatOp_relop) Kind() OAst_FloatOp_relop_kind {
	return t.kind
}

var _Ast_FloatOp_relop_Eq OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Eq}
var _Ast_FloatOp_relop_Ne OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Ne}
var _Ast_FloatOp_relop_Lt OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Lt}
var _Ast_FloatOp_relop_Gt OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Gt}
var _Ast_FloatOp_relop_Le OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Le}
var _Ast_FloatOp_relop_Ge OAst_FloatOp_relop = SimpleOAst_FloatOp_relop{KAst_FloatOp_relop_Ge}

type OAst_FloatOp_cvtop_kind int

const (
	KAst_FloatOp_cvtop_ConvertSI32 OAst_FloatOp_cvtop_kind = iota + 1
	KAst_FloatOp_cvtop_ConvertUI32
	KAst_FloatOp_cvtop_ConvertSI64
	KAst_FloatOp_cvtop_ConvertUI64
	KAst_FloatOp_cvtop_PromoteF32
	KAst_FloatOp_cvtop_DemoteF64
	KAst_FloatOp_cvtop_ReinterpretInt
)

type OAst_FloatOp_cvtop interface {
	Kind() OAst_FloatOp_cvtop_kind
}

type SimpleOAst_FloatOp_cvtop struct {
	kind OAst_FloatOp_cvtop_kind
}

func (t SimpleOAst_FloatOp_cvtop) Kind() OAst_FloatOp_cvtop_kind {
	return t.kind
}

var _Ast_FloatOp_cvtop_ConvertSI32 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_ConvertSI32}
var _Ast_FloatOp_cvtop_ConvertUI32 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_ConvertUI32}
var _Ast_FloatOp_cvtop_ConvertSI64 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_ConvertSI64}
var _Ast_FloatOp_cvtop_ConvertUI64 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_ConvertUI64}
var _Ast_FloatOp_cvtop_PromoteF32 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_PromoteF32}
var _Ast_FloatOp_cvtop_DemoteF64 OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_DemoteF64}
var _Ast_FloatOp_cvtop_ReinterpretInt OAst_FloatOp_cvtop = SimpleOAst_FloatOp_cvtop{KAst_FloatOp_cvtop_ReinterpretInt}

type OAst_V128Op_itestop_kind int

const (
	KAst_V128Op_itestop_AllTrue OAst_V128Op_itestop_kind = iota + 1
)

type OAst_V128Op_itestop interface {
	Kind() OAst_V128Op_itestop_kind
}

type SimpleOAst_V128Op_itestop struct {
	kind OAst_V128Op_itestop_kind
}

func (t SimpleOAst_V128Op_itestop) Kind() OAst_V128Op_itestop_kind {
	return t.kind
}

var _Ast_V128Op_itestop_AllTrue OAst_V128Op_itestop = SimpleOAst_V128Op_itestop{KAst_V128Op_itestop_AllTrue}

type OAst_V128Op_iunop_kind int

const (
	KAst_V128Op_iunop_Abs OAst_V128Op_iunop_kind = iota + 1
	KAst_V128Op_iunop_Neg
	KAst_V128Op_iunop_Popcnt
)

type OAst_V128Op_iunop interface {
	Kind() OAst_V128Op_iunop_kind
}

type SimpleOAst_V128Op_iunop struct {
	kind OAst_V128Op_iunop_kind
}

func (t SimpleOAst_V128Op_iunop) Kind() OAst_V128Op_iunop_kind {
	return t.kind
}

var _Ast_V128Op_iunop_Abs OAst_V128Op_iunop = SimpleOAst_V128Op_iunop{KAst_V128Op_iunop_Abs}
var _Ast_V128Op_iunop_Neg OAst_V128Op_iunop = SimpleOAst_V128Op_iunop{KAst_V128Op_iunop_Neg}
var _Ast_V128Op_iunop_Popcnt OAst_V128Op_iunop = SimpleOAst_V128Op_iunop{KAst_V128Op_iunop_Popcnt}

type OAst_V128Op_funop_kind int

const (
	KAst_V128Op_funop_Abs OAst_V128Op_funop_kind = iota + 1
	KAst_V128Op_funop_Neg
	KAst_V128Op_funop_Sqrt
	KAst_V128Op_funop_Ceil
	KAst_V128Op_funop_Floor
	KAst_V128Op_funop_Trunc
	KAst_V128Op_funop_Nearest
)

type OAst_V128Op_funop interface {
	Kind() OAst_V128Op_funop_kind
}

type SimpleOAst_V128Op_funop struct {
	kind OAst_V128Op_funop_kind
}

func (t SimpleOAst_V128Op_funop) Kind() OAst_V128Op_funop_kind {
	return t.kind
}

var _Ast_V128Op_funop_Abs OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Abs}
var _Ast_V128Op_funop_Neg OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Neg}
var _Ast_V128Op_funop_Sqrt OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Sqrt}
var _Ast_V128Op_funop_Ceil OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Ceil}
var _Ast_V128Op_funop_Floor OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Floor}
var _Ast_V128Op_funop_Trunc OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Trunc}
var _Ast_V128Op_funop_Nearest OAst_V128Op_funop = SimpleOAst_V128Op_funop{KAst_V128Op_funop_Nearest}

type OAst_V128Op_ibinop_kind int

const (
	KAst_V128Op_ibinop_Add OAst_V128Op_ibinop_kind = iota + 1
	KAst_V128Op_ibinop_Sub
	KAst_V128Op_ibinop_Mul
	KAst_V128Op_ibinop_MinS
	KAst_V128Op_ibinop_MinU
	KAst_V128Op_ibinop_MaxS
	KAst_V128Op_ibinop_MaxU
	KAst_V128Op_ibinop_AvgrU
	KAst_V128Op_ibinop_AddSatS
	KAst_V128Op_ibinop_AddSatU
	KAst_V128Op_ibinop_SubSatS
	KAst_V128Op_ibinop_SubSatU
	KAst_V128Op_ibinop_DotS
	KAst_V128Op_ibinop_Q15MulRSatS
	KAst_V128Op_ibinop_ExtMulLowS
	KAst_V128Op_ibinop_ExtMulHighS
	KAst_V128Op_ibinop_ExtMulLowU
	KAst_V128Op_ibinop_ExtMulHighU
	KAst_V128Op_ibinop_Swizzle
	KAst_V128Op_ibinop_Shuffle
	KAst_V128Op_ibinop_NarrowS
	KAst_V128Op_ibinop_NarrowU
	KAst_V128Op_ibinop_RelaxedSwizzle
	KAst_V128Op_ibinop_RelaxedQ15MulRS
	KAst_V128Op_ibinop_RelaxedDot
)

type OAst_V128Op_ibinop interface {
	Kind() OAst_V128Op_ibinop_kind
}

type SimpleOAst_V128Op_ibinop struct {
	kind OAst_V128Op_ibinop_kind
}

func (t SimpleOAst_V128Op_ibinop) Kind() OAst_V128Op_ibinop_kind {
	return t.kind
}

var _Ast_V128Op_ibinop_Add OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_Add}
var _Ast_V128Op_ibinop_Sub OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_Sub}
var _Ast_V128Op_ibinop_Mul OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_Mul}
var _Ast_V128Op_ibinop_MinS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_MinS}
var _Ast_V128Op_ibinop_MinU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_MinU}
var _Ast_V128Op_ibinop_MaxS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_MaxS}
var _Ast_V128Op_ibinop_MaxU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_MaxU}
var _Ast_V128Op_ibinop_AvgrU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_AvgrU}
var _Ast_V128Op_ibinop_AddSatS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_AddSatS}
var _Ast_V128Op_ibinop_AddSatU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_AddSatU}
var _Ast_V128Op_ibinop_SubSatS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_SubSatS}
var _Ast_V128Op_ibinop_SubSatU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_SubSatU}
var _Ast_V128Op_ibinop_DotS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_DotS}
var _Ast_V128Op_ibinop_Q15MulRSatS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_Q15MulRSatS}
var _Ast_V128Op_ibinop_ExtMulLowS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_ExtMulLowS}
var _Ast_V128Op_ibinop_ExtMulHighS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_ExtMulHighS}
var _Ast_V128Op_ibinop_ExtMulLowU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_ExtMulLowU}
var _Ast_V128Op_ibinop_ExtMulHighU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_ExtMulHighU}
var _Ast_V128Op_ibinop_Swizzle OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_Swizzle}

type OAst_V128Op_ibinop_Shuffle struct {
	V []OInt
}

func (t OAst_V128Op_ibinop_Shuffle) Kind() OAst_V128Op_ibinop_kind {
	return KAst_V128Op_ibinop_Shuffle
}
func Ast_V128Op_Shuffle_1(v []OInt) OAst_V128Op_ibinop {
	return OAst_V128Op_ibinop_Shuffle{v}
}

var _Ast_V128Op_ibinop_NarrowS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_NarrowS}
var _Ast_V128Op_ibinop_NarrowU OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_NarrowU}
var _Ast_V128Op_ibinop_RelaxedSwizzle OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_RelaxedSwizzle}
var _Ast_V128Op_ibinop_RelaxedQ15MulRS OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_RelaxedQ15MulRS}
var _Ast_V128Op_ibinop_RelaxedDot OAst_V128Op_ibinop = SimpleOAst_V128Op_ibinop{KAst_V128Op_ibinop_RelaxedDot}

type OAst_V128Op_fbinop_kind int

const (
	KAst_V128Op_fbinop_Add OAst_V128Op_fbinop_kind = iota + 1
	KAst_V128Op_fbinop_Sub
	KAst_V128Op_fbinop_Mul
	KAst_V128Op_fbinop_Div
	KAst_V128Op_fbinop_Min
	KAst_V128Op_fbinop_Max
	KAst_V128Op_fbinop_Pmin
	KAst_V128Op_fbinop_Pmax
	KAst_V128Op_fbinop_RelaxedMin
	KAst_V128Op_fbinop_RelaxedMax
)

type OAst_V128Op_fbinop interface {
	Kind() OAst_V128Op_fbinop_kind
}

type SimpleOAst_V128Op_fbinop struct {
	kind OAst_V128Op_fbinop_kind
}

func (t SimpleOAst_V128Op_fbinop) Kind() OAst_V128Op_fbinop_kind {
	return t.kind
}

var _Ast_V128Op_fbinop_Add OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Add}
var _Ast_V128Op_fbinop_Sub OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Sub}
var _Ast_V128Op_fbinop_Mul OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Mul}
var _Ast_V128Op_fbinop_Div OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Div}
var _Ast_V128Op_fbinop_Min OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Min}
var _Ast_V128Op_fbinop_Max OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Max}
var _Ast_V128Op_fbinop_Pmin OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Pmin}
var _Ast_V128Op_fbinop_Pmax OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_Pmax}
var _Ast_V128Op_fbinop_RelaxedMin OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_RelaxedMin}
var _Ast_V128Op_fbinop_RelaxedMax OAst_V128Op_fbinop = SimpleOAst_V128Op_fbinop{KAst_V128Op_fbinop_RelaxedMax}

type OAst_V128Op_iternop_kind int

const (
	KAst_V128Op_iternop_RelaxedLaneselect OAst_V128Op_iternop_kind = iota + 1
	KAst_V128Op_iternop_RelaxedDotAccum
)

type OAst_V128Op_iternop interface {
	Kind() OAst_V128Op_iternop_kind
}

type SimpleOAst_V128Op_iternop struct {
	kind OAst_V128Op_iternop_kind
}

func (t SimpleOAst_V128Op_iternop) Kind() OAst_V128Op_iternop_kind {
	return t.kind
}

var _Ast_V128Op_iternop_RelaxedLaneselect OAst_V128Op_iternop = SimpleOAst_V128Op_iternop{KAst_V128Op_iternop_RelaxedLaneselect}
var _Ast_V128Op_iternop_RelaxedDotAccum OAst_V128Op_iternop = SimpleOAst_V128Op_iternop{KAst_V128Op_iternop_RelaxedDotAccum}

type OAst_V128Op_fternop_kind int

const (
	KAst_V128Op_fternop_RelaxedMadd OAst_V128Op_fternop_kind = iota + 1
	KAst_V128Op_fternop_RelaxedNmadd
)

type OAst_V128Op_fternop interface {
	Kind() OAst_V128Op_fternop_kind
}

type SimpleOAst_V128Op_fternop struct {
	kind OAst_V128Op_fternop_kind
}

func (t SimpleOAst_V128Op_fternop) Kind() OAst_V128Op_fternop_kind {
	return t.kind
}

var _Ast_V128Op_fternop_RelaxedMadd OAst_V128Op_fternop = SimpleOAst_V128Op_fternop{KAst_V128Op_fternop_RelaxedMadd}
var _Ast_V128Op_fternop_RelaxedNmadd OAst_V128Op_fternop = SimpleOAst_V128Op_fternop{KAst_V128Op_fternop_RelaxedNmadd}

type OAst_V128Op_irelop_kind int

const (
	KAst_V128Op_irelop_Eq OAst_V128Op_irelop_kind = iota + 1
	KAst_V128Op_irelop_Ne
	KAst_V128Op_irelop_LtS
	KAst_V128Op_irelop_LtU
	KAst_V128Op_irelop_LeS
	KAst_V128Op_irelop_LeU
	KAst_V128Op_irelop_GtS
	KAst_V128Op_irelop_GtU
	KAst_V128Op_irelop_GeS
	KAst_V128Op_irelop_GeU
)

type OAst_V128Op_irelop interface {
	Kind() OAst_V128Op_irelop_kind
}

type SimpleOAst_V128Op_irelop struct {
	kind OAst_V128Op_irelop_kind
}

func (t SimpleOAst_V128Op_irelop) Kind() OAst_V128Op_irelop_kind {
	return t.kind
}

var _Ast_V128Op_irelop_Eq OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_Eq}
var _Ast_V128Op_irelop_Ne OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_Ne}
var _Ast_V128Op_irelop_LtS OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_LtS}
var _Ast_V128Op_irelop_LtU OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_LtU}
var _Ast_V128Op_irelop_LeS OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_LeS}
var _Ast_V128Op_irelop_LeU OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_LeU}
var _Ast_V128Op_irelop_GtS OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_GtS}
var _Ast_V128Op_irelop_GtU OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_GtU}
var _Ast_V128Op_irelop_GeS OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_GeS}
var _Ast_V128Op_irelop_GeU OAst_V128Op_irelop = SimpleOAst_V128Op_irelop{KAst_V128Op_irelop_GeU}

type OAst_V128Op_frelop_kind int

const (
	KAst_V128Op_frelop_Eq OAst_V128Op_frelop_kind = iota + 1
	KAst_V128Op_frelop_Ne
	KAst_V128Op_frelop_Lt
	KAst_V128Op_frelop_Le
	KAst_V128Op_frelop_Gt
	KAst_V128Op_frelop_Ge
)

type OAst_V128Op_frelop interface {
	Kind() OAst_V128Op_frelop_kind
}

type SimpleOAst_V128Op_frelop struct {
	kind OAst_V128Op_frelop_kind
}

func (t SimpleOAst_V128Op_frelop) Kind() OAst_V128Op_frelop_kind {
	return t.kind
}

var _Ast_V128Op_frelop_Eq OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Eq}
var _Ast_V128Op_frelop_Ne OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Ne}
var _Ast_V128Op_frelop_Lt OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Lt}
var _Ast_V128Op_frelop_Le OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Le}
var _Ast_V128Op_frelop_Gt OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Gt}
var _Ast_V128Op_frelop_Ge OAst_V128Op_frelop = SimpleOAst_V128Op_frelop{KAst_V128Op_frelop_Ge}

type OAst_V128Op_icvtop_kind int

const (
	KAst_V128Op_icvtop_ExtendLowS OAst_V128Op_icvtop_kind = iota + 1
	KAst_V128Op_icvtop_ExtendLowU
	KAst_V128Op_icvtop_ExtendHighS
	KAst_V128Op_icvtop_ExtendHighU
	KAst_V128Op_icvtop_ExtAddPairwiseS
	KAst_V128Op_icvtop_ExtAddPairwiseU
	KAst_V128Op_icvtop_TruncSatSF32x4
	KAst_V128Op_icvtop_TruncSatUF32x4
	KAst_V128Op_icvtop_TruncSatSZeroF64x2
	KAst_V128Op_icvtop_TruncSatUZeroF64x2
	KAst_V128Op_icvtop_RelaxedTruncSF32x4
	KAst_V128Op_icvtop_RelaxedTruncUF32x4
	KAst_V128Op_icvtop_RelaxedTruncSZeroF64x2
	KAst_V128Op_icvtop_RelaxedTruncUZeroF64x2
)

type OAst_V128Op_icvtop interface {
	Kind() OAst_V128Op_icvtop_kind
}

type SimpleOAst_V128Op_icvtop struct {
	kind OAst_V128Op_icvtop_kind
}

func (t SimpleOAst_V128Op_icvtop) Kind() OAst_V128Op_icvtop_kind {
	return t.kind
}

var _Ast_V128Op_icvtop_ExtendLowS OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtendLowS}
var _Ast_V128Op_icvtop_ExtendLowU OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtendLowU}
var _Ast_V128Op_icvtop_ExtendHighS OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtendHighS}
var _Ast_V128Op_icvtop_ExtendHighU OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtendHighU}
var _Ast_V128Op_icvtop_ExtAddPairwiseS OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtAddPairwiseS}
var _Ast_V128Op_icvtop_ExtAddPairwiseU OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_ExtAddPairwiseU}
var _Ast_V128Op_icvtop_TruncSatSF32x4 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_TruncSatSF32x4}
var _Ast_V128Op_icvtop_TruncSatUF32x4 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_TruncSatUF32x4}
var _Ast_V128Op_icvtop_TruncSatSZeroF64x2 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_TruncSatSZeroF64x2}
var _Ast_V128Op_icvtop_TruncSatUZeroF64x2 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_TruncSatUZeroF64x2}
var _Ast_V128Op_icvtop_RelaxedTruncSF32x4 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_RelaxedTruncSF32x4}
var _Ast_V128Op_icvtop_RelaxedTruncUF32x4 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_RelaxedTruncUF32x4}
var _Ast_V128Op_icvtop_RelaxedTruncSZeroF64x2 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_RelaxedTruncSZeroF64x2}
var _Ast_V128Op_icvtop_RelaxedTruncUZeroF64x2 OAst_V128Op_icvtop = SimpleOAst_V128Op_icvtop{KAst_V128Op_icvtop_RelaxedTruncUZeroF64x2}

type OAst_V128Op_fcvtop_kind int

const (
	KAst_V128Op_fcvtop_DemoteZeroF64x2 OAst_V128Op_fcvtop_kind = iota + 1
	KAst_V128Op_fcvtop_PromoteLowF32x4
	KAst_V128Op_fcvtop_ConvertSI32x4
	KAst_V128Op_fcvtop_ConvertUI32x4
)

type OAst_V128Op_fcvtop interface {
	Kind() OAst_V128Op_fcvtop_kind
}

type SimpleOAst_V128Op_fcvtop struct {
	kind OAst_V128Op_fcvtop_kind
}

func (t SimpleOAst_V128Op_fcvtop) Kind() OAst_V128Op_fcvtop_kind {
	return t.kind
}

var _Ast_V128Op_fcvtop_DemoteZeroF64x2 OAst_V128Op_fcvtop = SimpleOAst_V128Op_fcvtop{KAst_V128Op_fcvtop_DemoteZeroF64x2}
var _Ast_V128Op_fcvtop_PromoteLowF32x4 OAst_V128Op_fcvtop = SimpleOAst_V128Op_fcvtop{KAst_V128Op_fcvtop_PromoteLowF32x4}
var _Ast_V128Op_fcvtop_ConvertSI32x4 OAst_V128Op_fcvtop = SimpleOAst_V128Op_fcvtop{KAst_V128Op_fcvtop_ConvertSI32x4}
var _Ast_V128Op_fcvtop_ConvertUI32x4 OAst_V128Op_fcvtop = SimpleOAst_V128Op_fcvtop{KAst_V128Op_fcvtop_ConvertUI32x4}

type OAst_V128Op_ishiftop_kind int

const (
	KAst_V128Op_ishiftop_Shl OAst_V128Op_ishiftop_kind = iota + 1
	KAst_V128Op_ishiftop_ShrS
	KAst_V128Op_ishiftop_ShrU
)

type OAst_V128Op_ishiftop interface {
	Kind() OAst_V128Op_ishiftop_kind
}

type SimpleOAst_V128Op_ishiftop struct {
	kind OAst_V128Op_ishiftop_kind
}

func (t SimpleOAst_V128Op_ishiftop) Kind() OAst_V128Op_ishiftop_kind {
	return t.kind
}

var _Ast_V128Op_ishiftop_Shl OAst_V128Op_ishiftop = SimpleOAst_V128Op_ishiftop{KAst_V128Op_ishiftop_Shl}
var _Ast_V128Op_ishiftop_ShrS OAst_V128Op_ishiftop = SimpleOAst_V128Op_ishiftop{KAst_V128Op_ishiftop_ShrS}
var _Ast_V128Op_ishiftop_ShrU OAst_V128Op_ishiftop = SimpleOAst_V128Op_ishiftop{KAst_V128Op_ishiftop_ShrU}

type OAst_V128Op_ibitmaskop_kind int

const (
	KAst_V128Op_ibitmaskop_Bitmask OAst_V128Op_ibitmaskop_kind = iota + 1
)

type OAst_V128Op_ibitmaskop interface {
	Kind() OAst_V128Op_ibitmaskop_kind
}

type SimpleOAst_V128Op_ibitmaskop struct {
	kind OAst_V128Op_ibitmaskop_kind
}

func (t SimpleOAst_V128Op_ibitmaskop) Kind() OAst_V128Op_ibitmaskop_kind {
	return t.kind
}

var _Ast_V128Op_ibitmaskop_Bitmask OAst_V128Op_ibitmaskop = SimpleOAst_V128Op_ibitmaskop{KAst_V128Op_ibitmaskop_Bitmask}

type OAst_V128Op_vtestop_kind int

const (
	KAst_V128Op_vtestop_AnyTrue OAst_V128Op_vtestop_kind = iota + 1
)

type OAst_V128Op_vtestop interface {
	Kind() OAst_V128Op_vtestop_kind
}

type SimpleOAst_V128Op_vtestop struct {
	kind OAst_V128Op_vtestop_kind
}

func (t SimpleOAst_V128Op_vtestop) Kind() OAst_V128Op_vtestop_kind {
	return t.kind
}

var _Ast_V128Op_vtestop_AnyTrue OAst_V128Op_vtestop = SimpleOAst_V128Op_vtestop{KAst_V128Op_vtestop_AnyTrue}

type OAst_V128Op_vunop_kind int

const (
	KAst_V128Op_vunop_Not OAst_V128Op_vunop_kind = iota + 1
)

type OAst_V128Op_vunop interface {
	Kind() OAst_V128Op_vunop_kind
}

type SimpleOAst_V128Op_vunop struct {
	kind OAst_V128Op_vunop_kind
}

func (t SimpleOAst_V128Op_vunop) Kind() OAst_V128Op_vunop_kind {
	return t.kind
}

var _Ast_V128Op_vunop_Not OAst_V128Op_vunop = SimpleOAst_V128Op_vunop{KAst_V128Op_vunop_Not}

type OAst_V128Op_vbinop_kind int

const (
	KAst_V128Op_vbinop_And OAst_V128Op_vbinop_kind = iota + 1
	KAst_V128Op_vbinop_Or
	KAst_V128Op_vbinop_Xor
	KAst_V128Op_vbinop_AndNot
)

type OAst_V128Op_vbinop interface {
	Kind() OAst_V128Op_vbinop_kind
}

type SimpleOAst_V128Op_vbinop struct {
	kind OAst_V128Op_vbinop_kind
}

func (t SimpleOAst_V128Op_vbinop) Kind() OAst_V128Op_vbinop_kind {
	return t.kind
}

var _Ast_V128Op_vbinop_And OAst_V128Op_vbinop = SimpleOAst_V128Op_vbinop{KAst_V128Op_vbinop_And}
var _Ast_V128Op_vbinop_Or OAst_V128Op_vbinop = SimpleOAst_V128Op_vbinop{KAst_V128Op_vbinop_Or}
var _Ast_V128Op_vbinop_Xor OAst_V128Op_vbinop = SimpleOAst_V128Op_vbinop{KAst_V128Op_vbinop_Xor}
var _Ast_V128Op_vbinop_AndNot OAst_V128Op_vbinop = SimpleOAst_V128Op_vbinop{KAst_V128Op_vbinop_AndNot}

type OAst_V128Op_vternop_kind int

const (
	KAst_V128Op_vternop_Bitselect OAst_V128Op_vternop_kind = iota + 1
)

type OAst_V128Op_vternop interface {
	Kind() OAst_V128Op_vternop_kind
}

type SimpleOAst_V128Op_vternop struct {
	kind OAst_V128Op_vternop_kind
}

func (t SimpleOAst_V128Op_vternop) Kind() OAst_V128Op_vternop_kind {
	return t.kind
}

var _Ast_V128Op_vternop_Bitselect OAst_V128Op_vternop = SimpleOAst_V128Op_vternop{KAst_V128Op_vternop_Bitselect}

type OAst_V128Op_testop = OV128_laneop
type OAst_V128Op_unop = OV128_laneop
type OAst_V128Op_binop = OV128_laneop
type OAst_V128Op_ternop = OV128_laneop
type OAst_V128Op_relop = OV128_laneop
type OAst_V128Op_cvtop = OV128_laneop
type OAst_V128Op_shiftop = OV128_laneop
type OAst_V128Op_bitmaskop = OV128_laneop

type OAst_V128Op_nsplatop_kind int

const (
	KAst_V128Op_nsplatop_Splat OAst_V128Op_nsplatop_kind = iota + 1
)

type OAst_V128Op_nsplatop interface {
	Kind() OAst_V128Op_nsplatop_kind
}

type SimpleOAst_V128Op_nsplatop struct {
	kind OAst_V128Op_nsplatop_kind
}

func (t SimpleOAst_V128Op_nsplatop) Kind() OAst_V128Op_nsplatop_kind {
	return t.kind
}

var _Ast_V128Op_nsplatop_Splat OAst_V128Op_nsplatop = SimpleOAst_V128Op_nsplatop{KAst_V128Op_nsplatop_Splat}

type OAst_V128Op_nextractop_kind int

const (
	KAst_V128Op_nextractop_Extract OAst_V128Op_nextractop_kind = iota + 1
)

type OAst_V128Op_nextractop[T_a any] interface {
	Kind() OAst_V128Op_nextractop_kind
}

type SimpleOAst_V128Op_nextractop struct {
	kind OAst_V128Op_nextractop_kind
}

func (t SimpleOAst_V128Op_nextractop) Kind() OAst_V128Op_nextractop_kind {
	return t.kind
}

type OAst_V128Op_nextractop_Extract[T_a any] struct {
	V struct {
		F0 OInt
		F1 T_a
	}
}

func (t OAst_V128Op_nextractop_Extract[T_a]) Kind() OAst_V128Op_nextractop_kind {
	return KAst_V128Op_nextractop_Extract
}
func Ast_V128Op_Extract_1[T_a any](v struct {
	F0 OInt
	F1 T_a
}) OAst_V128Op_nextractop[T_a] {
	return OAst_V128Op_nextractop_Extract[T_a]{v}
}

type OAst_V128Op_nreplaceop_kind int

const (
	KAst_V128Op_nreplaceop_Replace OAst_V128Op_nreplaceop_kind = iota + 1
)

type OAst_V128Op_nreplaceop interface {
	Kind() OAst_V128Op_nreplaceop_kind
}

type SimpleOAst_V128Op_nreplaceop struct {
	kind OAst_V128Op_nreplaceop_kind
}

func (t SimpleOAst_V128Op_nreplaceop) Kind() OAst_V128Op_nreplaceop_kind {
	return t.kind
}

type OAst_V128Op_nreplaceop_Replace struct {
	V OInt
}

func (t OAst_V128Op_nreplaceop_Replace) Kind() OAst_V128Op_nreplaceop_kind {
	return KAst_V128Op_nreplaceop_Replace
}
func Ast_V128Op_Replace_1(v OInt) OAst_V128Op_nreplaceop {
	return OAst_V128Op_nreplaceop_Replace{v}
}

type OAst_V128Op_splatop = OV128_laneop
type OAst_V128Op_extractop = OV128_laneop
type OAst_V128Op_replaceop = OV128_laneop
type OAst_testop = OValue_op[OAst_IntOp_testop, OAst_IntOp_testop, OAst_FloatOp_testop, OAst_FloatOp_testop]
type OAst_unop = OValue_op[OAst_IntOp_unop, OAst_IntOp_unop, OAst_FloatOp_unop, OAst_FloatOp_unop]
type OAst_binop = OValue_op[OAst_IntOp_binop, OAst_IntOp_binop, OAst_FloatOp_binop, OAst_FloatOp_binop]
type OAst_relop = OValue_op[OAst_IntOp_relop, OAst_IntOp_relop, OAst_FloatOp_relop, OAst_FloatOp_relop]
type OAst_cvtop = OValue_op[OAst_IntOp_cvtop, OAst_IntOp_cvtop, OAst_FloatOp_cvtop, OAst_FloatOp_cvtop]
type OAst_vec_testop = OValue_vecop[OAst_V128Op_testop]
type OAst_vec_relop = OValue_vecop[OAst_V128Op_relop]
type OAst_vec_unop = OValue_vecop[OAst_V128Op_unop]
type OAst_vec_binop = OValue_vecop[OAst_V128Op_binop]
type OAst_vec_ternop = OValue_vecop[OAst_V128Op_ternop]
type OAst_vec_cvtop = OValue_vecop[OAst_V128Op_cvtop]
type OAst_vec_shiftop = OValue_vecop[OAst_V128Op_shiftop]
type OAst_vec_bitmaskop = OValue_vecop[OAst_V128Op_bitmaskop]
type OAst_vec_vtestop = OValue_vecop[OAst_V128Op_vtestop]
type OAst_vec_vunop = OValue_vecop[OAst_V128Op_vunop]
type OAst_vec_vbinop = OValue_vecop[OAst_V128Op_vbinop]
type OAst_vec_vternop = OValue_vecop[OAst_V128Op_vternop]
type OAst_vec_splatop = OValue_vecop[OAst_V128Op_splatop]
type OAst_vec_extractop = OValue_vecop[OAst_V128Op_extractop]
type OAst_vec_replaceop = OValue_vecop[OAst_V128Op_replaceop]
type OAst_memop[T_t any, T_p any] struct {
	ty     T_t
	align  OInt
	offset OInt64
	pack   T_p
}
type OAst_loadop = OAst_memop[OTypes_num_type, *struct {
	F0 OPack_pack_size
	F1 OPack_extension
}]
type OAst_storeop = OAst_memop[OTypes_num_type, *OPack_pack_size]
type OAst_vec_loadop = OAst_memop[OTypes_vec_type, *struct {
	F0 OPack_pack_size
	F1 OPack_vec_extension
}]
type OAst_vec_storeop = OAst_memop[OTypes_vec_type, OUnit]
type OAst_vec_laneop = OAst_memop[OTypes_vec_type, OPack_pack_size]

type OAst_initop_kind int

const (
	KAst_initop_Explicit OAst_initop_kind = iota + 1
	KAst_initop_Implicit
)

type OAst_initop interface {
	Kind() OAst_initop_kind
}

type SimpleOAst_initop struct {
	kind OAst_initop_kind
}

func (t SimpleOAst_initop) Kind() OAst_initop_kind {
	return t.kind
}

var _Ast_initop_Explicit OAst_initop = SimpleOAst_initop{KAst_initop_Explicit}
var _Ast_initop_Implicit OAst_initop = SimpleOAst_initop{KAst_initop_Implicit}

type OAst_externop_kind int

const (
	KAst_externop_Internalize OAst_externop_kind = iota + 1
	KAst_externop_Externalize
)

type OAst_externop interface {
	Kind() OAst_externop_kind
}

type SimpleOAst_externop struct {
	kind OAst_externop_kind
}

func (t SimpleOAst_externop) Kind() OAst_externop_kind {
	return t.kind
}

var _Ast_externop_Internalize OAst_externop = SimpleOAst_externop{KAst_externop_Internalize}
var _Ast_externop_Externalize OAst_externop = SimpleOAst_externop{KAst_externop_Externalize}

type OAst_idx = OSource_phrase[OInt32]
type OAst_num = OSource_phrase[OValue_num]
type OAst_vec = OSource_phrase[OValue_vec]
type OAst_name = string

type OAst_block_type_kind int

const (
	KAst_block_type_VarBlockType OAst_block_type_kind = iota + 1
	KAst_block_type_ValBlockType
)

type OAst_block_type interface {
	Kind() OAst_block_type_kind
}

type SimpleOAst_block_type struct {
	kind OAst_block_type_kind
}

func (t SimpleOAst_block_type) Kind() OAst_block_type_kind {
	return t.kind
}

type OAst_block_type_VarBlockType struct {
	V OAst_idx
}

func (t OAst_block_type_VarBlockType) Kind() OAst_block_type_kind {
	return KAst_block_type_VarBlockType
}
func Ast_VarBlockType_1(v OAst_idx) OAst_block_type {
	return OAst_block_type_VarBlockType{v}
}

type OAst_block_type_ValBlockType struct {
	V *OTypes_val_type
}

func (t OAst_block_type_ValBlockType) Kind() OAst_block_type_kind {
	return KAst_block_type_ValBlockType
}
func Ast_ValBlockType_1(v *OTypes_val_type) OAst_block_type {
	return OAst_block_type_ValBlockType{v}
}

type OAst_instr = OSource_phrase[OAst_instr_]

type OAst_instr__kind int

const (
	KAst_instr__Unreachable OAst_instr__kind = iota + 1
	KAst_instr__Nop
	KAst_instr__Drop
	KAst_instr__Select
	KAst_instr__Block
	KAst_instr__Loop
	KAst_instr__If
	KAst_instr__Br
	KAst_instr__BrIf
	KAst_instr__BrTable
	KAst_instr__BrOnNull
	KAst_instr__BrOnNonNull
	KAst_instr__BrOnCast
	KAst_instr__BrOnCastFail
	KAst_instr__Return
	KAst_instr__Call
	KAst_instr__CallRef
	KAst_instr__CallIndirect
	KAst_instr__ReturnCall
	KAst_instr__ReturnCallRef
	KAst_instr__ReturnCallIndirect
	KAst_instr__Throw
	KAst_instr__ThrowRef
	KAst_instr__TryTable
	KAst_instr__LocalGet
	KAst_instr__LocalSet
	KAst_instr__LocalTee
	KAst_instr__GlobalGet
	KAst_instr__GlobalSet
	KAst_instr__TableGet
	KAst_instr__TableSet
	KAst_instr__TableSize
	KAst_instr__TableGrow
	KAst_instr__TableFill
	KAst_instr__TableCopy
	KAst_instr__TableInit
	KAst_instr__ElemDrop
	KAst_instr__Load
	KAst_instr__Store
	KAst_instr__VecLoad
	KAst_instr__VecStore
	KAst_instr__VecLoadLane
	KAst_instr__VecStoreLane
	KAst_instr__MemorySize
	KAst_instr__MemoryGrow
	KAst_instr__MemoryFill
	KAst_instr__MemoryCopy
	KAst_instr__MemoryInit
	KAst_instr__DataDrop
	KAst_instr__Const
	KAst_instr__Test
	KAst_instr__Compare
	KAst_instr__Unary
	KAst_instr__Binary
	KAst_instr__Convert
	KAst_instr__RefNull
	KAst_instr__RefFunc
	KAst_instr__RefIsNull
	KAst_instr__RefAsNonNull
	KAst_instr__RefTest
	KAst_instr__RefCast
	KAst_instr__RefEq
	KAst_instr__RefI31
	KAst_instr__I31Get
	KAst_instr__StructNew
	KAst_instr__StructGet
	KAst_instr__StructSet
	KAst_instr__ArrayNew
	KAst_instr__ArrayNewFixed
	KAst_instr__ArrayNewElem
	KAst_instr__ArrayNewData
	KAst_instr__ArrayGet
	KAst_instr__ArraySet
	KAst_instr__ArrayLen
	KAst_instr__ArrayCopy
	KAst_instr__ArrayFill
	KAst_instr__ArrayInitData
	KAst_instr__ArrayInitElem
	KAst_instr__ExternConvert
	KAst_instr__VecConst
	KAst_instr__VecTest
	KAst_instr__VecCompare
	KAst_instr__VecUnary
	KAst_instr__VecBinary
	KAst_instr__VecTernary
	KAst_instr__VecConvert
	KAst_instr__VecShift
	KAst_instr__VecBitmask
	KAst_instr__VecTestBits
	KAst_instr__VecUnaryBits
	KAst_instr__VecBinaryBits
	KAst_instr__VecTernaryBits
	KAst_instr__VecSplat
	KAst_instr__VecExtract
	KAst_instr__VecReplace
)

type OAst_instr_ interface {
	Kind() OAst_instr__kind
}

type SimpleOAst_instr_ struct {
	kind OAst_instr__kind
}

func (t SimpleOAst_instr_) Kind() OAst_instr__kind {
	return t.kind
}

var _Ast_instr__Unreachable OAst_instr_ = SimpleOAst_instr_{KAst_instr__Unreachable}
var _Ast_instr__Nop OAst_instr_ = SimpleOAst_instr_{KAst_instr__Nop}
var _Ast_instr__Drop OAst_instr_ = SimpleOAst_instr_{KAst_instr__Drop}

type OAst_instr__Select struct {
	V *[]OTypes_val_type
}

func (t OAst_instr__Select) Kind() OAst_instr__kind {
	return KAst_instr__Select
}
func Ast_Select_1(v *[]OTypes_val_type) OAst_instr_ {
	return OAst_instr__Select{v}
}

type OAst_instr__Block struct {
	V struct {
		F0 OAst_block_type
		F1 []OAst_instr
	}
}

func (t OAst_instr__Block) Kind() OAst_instr__kind {
	return KAst_instr__Block
}
func Ast_Block_1(v struct {
	F0 OAst_block_type
	F1 []OAst_instr
}) OAst_instr_ {
	return OAst_instr__Block{v}
}

type OAst_instr__Loop struct {
	V struct {
		F0 OAst_block_type
		F1 []OAst_instr
	}
}

func (t OAst_instr__Loop) Kind() OAst_instr__kind {
	return KAst_instr__Loop
}
func Ast_Loop_1(v struct {
	F0 OAst_block_type
	F1 []OAst_instr
}) OAst_instr_ {
	return OAst_instr__Loop{v}
}

type OAst_instr__If struct {
	V struct {
		F0 OAst_block_type
		F1 []OAst_instr
		F2 []OAst_instr
	}
}

func (t OAst_instr__If) Kind() OAst_instr__kind {
	return KAst_instr__If
}
func Ast_If_1(v struct {
	F0 OAst_block_type
	F1 []OAst_instr
	F2 []OAst_instr
}) OAst_instr_ {
	return OAst_instr__If{v}
}

type OAst_instr__Br struct {
	V OAst_idx
}

func (t OAst_instr__Br) Kind() OAst_instr__kind {
	return KAst_instr__Br
}
func Ast_Br_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__Br{v}
}

type OAst_instr__BrIf struct {
	V OAst_idx
}

func (t OAst_instr__BrIf) Kind() OAst_instr__kind {
	return KAst_instr__BrIf
}
func Ast_BrIf_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__BrIf{v}
}

type OAst_instr__BrTable struct {
	V struct {
		F0 []OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__BrTable) Kind() OAst_instr__kind {
	return KAst_instr__BrTable
}
func Ast_BrTable_1(v struct {
	F0 []OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__BrTable{v}
}

type OAst_instr__BrOnNull struct {
	V OAst_idx
}

func (t OAst_instr__BrOnNull) Kind() OAst_instr__kind {
	return KAst_instr__BrOnNull
}
func Ast_BrOnNull_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__BrOnNull{v}
}

type OAst_instr__BrOnNonNull struct {
	V OAst_idx
}

func (t OAst_instr__BrOnNonNull) Kind() OAst_instr__kind {
	return KAst_instr__BrOnNonNull
}
func Ast_BrOnNonNull_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__BrOnNonNull{v}
}

type OAst_instr__BrOnCast struct {
	V struct {
		F0 OAst_idx
		F1 OTypes_ref_type
		F2 OTypes_ref_type
	}
}

func (t OAst_instr__BrOnCast) Kind() OAst_instr__kind {
	return KAst_instr__BrOnCast
}
func Ast_BrOnCast_1(v struct {
	F0 OAst_idx
	F1 OTypes_ref_type
	F2 OTypes_ref_type
}) OAst_instr_ {
	return OAst_instr__BrOnCast{v}
}

type OAst_instr__BrOnCastFail struct {
	V struct {
		F0 OAst_idx
		F1 OTypes_ref_type
		F2 OTypes_ref_type
	}
}

func (t OAst_instr__BrOnCastFail) Kind() OAst_instr__kind {
	return KAst_instr__BrOnCastFail
}
func Ast_BrOnCastFail_1(v struct {
	F0 OAst_idx
	F1 OTypes_ref_type
	F2 OTypes_ref_type
}) OAst_instr_ {
	return OAst_instr__BrOnCastFail{v}
}

var _Ast_instr__Return OAst_instr_ = SimpleOAst_instr_{KAst_instr__Return}

type OAst_instr__Call struct {
	V OAst_idx
}

func (t OAst_instr__Call) Kind() OAst_instr__kind {
	return KAst_instr__Call
}
func Ast_Call_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__Call{v}
}

type OAst_instr__CallRef struct {
	V OAst_idx
}

func (t OAst_instr__CallRef) Kind() OAst_instr__kind {
	return KAst_instr__CallRef
}
func Ast_CallRef_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__CallRef{v}
}

type OAst_instr__CallIndirect struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__CallIndirect) Kind() OAst_instr__kind {
	return KAst_instr__CallIndirect
}
func Ast_CallIndirect_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__CallIndirect{v}
}

type OAst_instr__ReturnCall struct {
	V OAst_idx
}

func (t OAst_instr__ReturnCall) Kind() OAst_instr__kind {
	return KAst_instr__ReturnCall
}
func Ast_ReturnCall_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__ReturnCall{v}
}

type OAst_instr__ReturnCallRef struct {
	V OAst_idx
}

func (t OAst_instr__ReturnCallRef) Kind() OAst_instr__kind {
	return KAst_instr__ReturnCallRef
}
func Ast_ReturnCallRef_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__ReturnCallRef{v}
}

type OAst_instr__ReturnCallIndirect struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ReturnCallIndirect) Kind() OAst_instr__kind {
	return KAst_instr__ReturnCallIndirect
}
func Ast_ReturnCallIndirect_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ReturnCallIndirect{v}
}

type OAst_instr__Throw struct {
	V OAst_idx
}

func (t OAst_instr__Throw) Kind() OAst_instr__kind {
	return KAst_instr__Throw
}
func Ast_Throw_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__Throw{v}
}

var _Ast_instr__ThrowRef OAst_instr_ = SimpleOAst_instr_{KAst_instr__ThrowRef}

type OAst_instr__TryTable struct {
	V struct {
		F0 OAst_block_type
		F1 []OAst_catch
		F2 []OAst_instr
	}
}

func (t OAst_instr__TryTable) Kind() OAst_instr__kind {
	return KAst_instr__TryTable
}
func Ast_TryTable_1(v struct {
	F0 OAst_block_type
	F1 []OAst_catch
	F2 []OAst_instr
}) OAst_instr_ {
	return OAst_instr__TryTable{v}
}

type OAst_instr__LocalGet struct {
	V OAst_idx
}

func (t OAst_instr__LocalGet) Kind() OAst_instr__kind {
	return KAst_instr__LocalGet
}
func Ast_LocalGet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__LocalGet{v}
}

type OAst_instr__LocalSet struct {
	V OAst_idx
}

func (t OAst_instr__LocalSet) Kind() OAst_instr__kind {
	return KAst_instr__LocalSet
}
func Ast_LocalSet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__LocalSet{v}
}

type OAst_instr__LocalTee struct {
	V OAst_idx
}

func (t OAst_instr__LocalTee) Kind() OAst_instr__kind {
	return KAst_instr__LocalTee
}
func Ast_LocalTee_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__LocalTee{v}
}

type OAst_instr__GlobalGet struct {
	V OAst_idx
}

func (t OAst_instr__GlobalGet) Kind() OAst_instr__kind {
	return KAst_instr__GlobalGet
}
func Ast_GlobalGet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__GlobalGet{v}
}

type OAst_instr__GlobalSet struct {
	V OAst_idx
}

func (t OAst_instr__GlobalSet) Kind() OAst_instr__kind {
	return KAst_instr__GlobalSet
}
func Ast_GlobalSet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__GlobalSet{v}
}

type OAst_instr__TableGet struct {
	V OAst_idx
}

func (t OAst_instr__TableGet) Kind() OAst_instr__kind {
	return KAst_instr__TableGet
}
func Ast_TableGet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__TableGet{v}
}

type OAst_instr__TableSet struct {
	V OAst_idx
}

func (t OAst_instr__TableSet) Kind() OAst_instr__kind {
	return KAst_instr__TableSet
}
func Ast_TableSet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__TableSet{v}
}

type OAst_instr__TableSize struct {
	V OAst_idx
}

func (t OAst_instr__TableSize) Kind() OAst_instr__kind {
	return KAst_instr__TableSize
}
func Ast_TableSize_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__TableSize{v}
}

type OAst_instr__TableGrow struct {
	V OAst_idx
}

func (t OAst_instr__TableGrow) Kind() OAst_instr__kind {
	return KAst_instr__TableGrow
}
func Ast_TableGrow_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__TableGrow{v}
}

type OAst_instr__TableFill struct {
	V OAst_idx
}

func (t OAst_instr__TableFill) Kind() OAst_instr__kind {
	return KAst_instr__TableFill
}
func Ast_TableFill_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__TableFill{v}
}

type OAst_instr__TableCopy struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__TableCopy) Kind() OAst_instr__kind {
	return KAst_instr__TableCopy
}
func Ast_TableCopy_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__TableCopy{v}
}

type OAst_instr__TableInit struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__TableInit) Kind() OAst_instr__kind {
	return KAst_instr__TableInit
}
func Ast_TableInit_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__TableInit{v}
}

type OAst_instr__ElemDrop struct {
	V OAst_idx
}

func (t OAst_instr__ElemDrop) Kind() OAst_instr__kind {
	return KAst_instr__ElemDrop
}
func Ast_ElemDrop_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__ElemDrop{v}
}

type OAst_instr__Load struct {
	V struct {
		F0 OAst_idx
		F1 OAst_loadop
	}
}

func (t OAst_instr__Load) Kind() OAst_instr__kind {
	return KAst_instr__Load
}
func Ast_Load_1(v struct {
	F0 OAst_idx
	F1 OAst_loadop
}) OAst_instr_ {
	return OAst_instr__Load{v}
}

type OAst_instr__Store struct {
	V struct {
		F0 OAst_idx
		F1 OAst_storeop
	}
}

func (t OAst_instr__Store) Kind() OAst_instr__kind {
	return KAst_instr__Store
}
func Ast_Store_1(v struct {
	F0 OAst_idx
	F1 OAst_storeop
}) OAst_instr_ {
	return OAst_instr__Store{v}
}

type OAst_instr__VecLoad struct {
	V struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}
}

func (t OAst_instr__VecLoad) Kind() OAst_instr__kind {
	return KAst_instr__VecLoad
}
func Ast_VecLoad_1(v struct {
	F0 OAst_idx
	F1 OAst_vec_loadop
}) OAst_instr_ {
	return OAst_instr__VecLoad{v}
}

type OAst_instr__VecStore struct {
	V struct {
		F0 OAst_idx
		F1 OAst_vec_storeop
	}
}

func (t OAst_instr__VecStore) Kind() OAst_instr__kind {
	return KAst_instr__VecStore
}
func Ast_VecStore_1(v struct {
	F0 OAst_idx
	F1 OAst_vec_storeop
}) OAst_instr_ {
	return OAst_instr__VecStore{v}
}

type OAst_instr__VecLoadLane struct {
	V struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}
}

func (t OAst_instr__VecLoadLane) Kind() OAst_instr__kind {
	return KAst_instr__VecLoadLane
}
func Ast_VecLoadLane_1(v struct {
	F0 OAst_idx
	F1 OAst_vec_laneop
	F2 OInt
}) OAst_instr_ {
	return OAst_instr__VecLoadLane{v}
}

type OAst_instr__VecStoreLane struct {
	V struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}
}

func (t OAst_instr__VecStoreLane) Kind() OAst_instr__kind {
	return KAst_instr__VecStoreLane
}
func Ast_VecStoreLane_1(v struct {
	F0 OAst_idx
	F1 OAst_vec_laneop
	F2 OInt
}) OAst_instr_ {
	return OAst_instr__VecStoreLane{v}
}

type OAst_instr__MemorySize struct {
	V OAst_idx
}

func (t OAst_instr__MemorySize) Kind() OAst_instr__kind {
	return KAst_instr__MemorySize
}
func Ast_MemorySize_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__MemorySize{v}
}

type OAst_instr__MemoryGrow struct {
	V OAst_idx
}

func (t OAst_instr__MemoryGrow) Kind() OAst_instr__kind {
	return KAst_instr__MemoryGrow
}
func Ast_MemoryGrow_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__MemoryGrow{v}
}

type OAst_instr__MemoryFill struct {
	V OAst_idx
}

func (t OAst_instr__MemoryFill) Kind() OAst_instr__kind {
	return KAst_instr__MemoryFill
}
func Ast_MemoryFill_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__MemoryFill{v}
}

type OAst_instr__MemoryCopy struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__MemoryCopy) Kind() OAst_instr__kind {
	return KAst_instr__MemoryCopy
}
func Ast_MemoryCopy_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__MemoryCopy{v}
}

type OAst_instr__MemoryInit struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__MemoryInit) Kind() OAst_instr__kind {
	return KAst_instr__MemoryInit
}
func Ast_MemoryInit_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__MemoryInit{v}
}

type OAst_instr__DataDrop struct {
	V OAst_idx
}

func (t OAst_instr__DataDrop) Kind() OAst_instr__kind {
	return KAst_instr__DataDrop
}
func Ast_DataDrop_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__DataDrop{v}
}

type OAst_instr__Const struct {
	V OAst_num
}

func (t OAst_instr__Const) Kind() OAst_instr__kind {
	return KAst_instr__Const
}
func Ast_Const_1(v OAst_num) OAst_instr_ {
	return OAst_instr__Const{v}
}

type OAst_instr__Test struct {
	V OAst_testop
}

func (t OAst_instr__Test) Kind() OAst_instr__kind {
	return KAst_instr__Test
}
func Ast_Test_1(v OAst_testop) OAst_instr_ {
	return OAst_instr__Test{v}
}

type OAst_instr__Compare struct {
	V OAst_relop
}

func (t OAst_instr__Compare) Kind() OAst_instr__kind {
	return KAst_instr__Compare
}
func Ast_Compare_1(v OAst_relop) OAst_instr_ {
	return OAst_instr__Compare{v}
}

type OAst_instr__Unary struct {
	V OAst_unop
}

func (t OAst_instr__Unary) Kind() OAst_instr__kind {
	return KAst_instr__Unary
}
func Ast_Unary_1(v OAst_unop) OAst_instr_ {
	return OAst_instr__Unary{v}
}

type OAst_instr__Binary struct {
	V OAst_binop
}

func (t OAst_instr__Binary) Kind() OAst_instr__kind {
	return KAst_instr__Binary
}
func Ast_Binary_1(v OAst_binop) OAst_instr_ {
	return OAst_instr__Binary{v}
}

type OAst_instr__Convert struct {
	V OAst_cvtop
}

func (t OAst_instr__Convert) Kind() OAst_instr__kind {
	return KAst_instr__Convert
}
func Ast_Convert_1(v OAst_cvtop) OAst_instr_ {
	return OAst_instr__Convert{v}
}

type OAst_instr__RefNull struct {
	V OTypes_heap_type
}

func (t OAst_instr__RefNull) Kind() OAst_instr__kind {
	return KAst_instr__RefNull
}
func Ast_RefNull_1(v OTypes_heap_type) OAst_instr_ {
	return OAst_instr__RefNull{v}
}

type OAst_instr__RefFunc struct {
	V OAst_idx
}

func (t OAst_instr__RefFunc) Kind() OAst_instr__kind {
	return KAst_instr__RefFunc
}
func Ast_RefFunc_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__RefFunc{v}
}

var _Ast_instr__RefIsNull OAst_instr_ = SimpleOAst_instr_{KAst_instr__RefIsNull}
var _Ast_instr__RefAsNonNull OAst_instr_ = SimpleOAst_instr_{KAst_instr__RefAsNonNull}

type OAst_instr__RefTest struct {
	V OTypes_ref_type
}

func (t OAst_instr__RefTest) Kind() OAst_instr__kind {
	return KAst_instr__RefTest
}
func Ast_RefTest_1(v OTypes_ref_type) OAst_instr_ {
	return OAst_instr__RefTest{v}
}

type OAst_instr__RefCast struct {
	V OTypes_ref_type
}

func (t OAst_instr__RefCast) Kind() OAst_instr__kind {
	return KAst_instr__RefCast
}
func Ast_RefCast_1(v OTypes_ref_type) OAst_instr_ {
	return OAst_instr__RefCast{v}
}

var _Ast_instr__RefEq OAst_instr_ = SimpleOAst_instr_{KAst_instr__RefEq}
var _Ast_instr__RefI31 OAst_instr_ = SimpleOAst_instr_{KAst_instr__RefI31}

type OAst_instr__I31Get struct {
	V OPack_extension
}

func (t OAst_instr__I31Get) Kind() OAst_instr__kind {
	return KAst_instr__I31Get
}
func Ast_I31Get_1(v OPack_extension) OAst_instr_ {
	return OAst_instr__I31Get{v}
}

type OAst_instr__StructNew struct {
	V struct {
		F0 OAst_idx
		F1 OAst_initop
	}
}

func (t OAst_instr__StructNew) Kind() OAst_instr__kind {
	return KAst_instr__StructNew
}
func Ast_StructNew_1(v struct {
	F0 OAst_idx
	F1 OAst_initop
}) OAst_instr_ {
	return OAst_instr__StructNew{v}
}

type OAst_instr__StructGet struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
		F2 *OPack_extension
	}
}

func (t OAst_instr__StructGet) Kind() OAst_instr__kind {
	return KAst_instr__StructGet
}
func Ast_StructGet_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
	F2 *OPack_extension
}) OAst_instr_ {
	return OAst_instr__StructGet{v}
}

type OAst_instr__StructSet struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__StructSet) Kind() OAst_instr__kind {
	return KAst_instr__StructSet
}
func Ast_StructSet_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__StructSet{v}
}

type OAst_instr__ArrayNew struct {
	V struct {
		F0 OAst_idx
		F1 OAst_initop
	}
}

func (t OAst_instr__ArrayNew) Kind() OAst_instr__kind {
	return KAst_instr__ArrayNew
}
func Ast_ArrayNew_1(v struct {
	F0 OAst_idx
	F1 OAst_initop
}) OAst_instr_ {
	return OAst_instr__ArrayNew{v}
}

type OAst_instr__ArrayNewFixed struct {
	V struct {
		F0 OAst_idx
		F1 OInt32
	}
}

func (t OAst_instr__ArrayNewFixed) Kind() OAst_instr__kind {
	return KAst_instr__ArrayNewFixed
}
func Ast_ArrayNewFixed_1(v struct {
	F0 OAst_idx
	F1 OInt32
}) OAst_instr_ {
	return OAst_instr__ArrayNewFixed{v}
}

type OAst_instr__ArrayNewElem struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ArrayNewElem) Kind() OAst_instr__kind {
	return KAst_instr__ArrayNewElem
}
func Ast_ArrayNewElem_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ArrayNewElem{v}
}

type OAst_instr__ArrayNewData struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ArrayNewData) Kind() OAst_instr__kind {
	return KAst_instr__ArrayNewData
}
func Ast_ArrayNewData_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ArrayNewData{v}
}

type OAst_instr__ArrayGet struct {
	V struct {
		F0 OAst_idx
		F1 *OPack_extension
	}
}

func (t OAst_instr__ArrayGet) Kind() OAst_instr__kind {
	return KAst_instr__ArrayGet
}
func Ast_ArrayGet_1(v struct {
	F0 OAst_idx
	F1 *OPack_extension
}) OAst_instr_ {
	return OAst_instr__ArrayGet{v}
}

type OAst_instr__ArraySet struct {
	V OAst_idx
}

func (t OAst_instr__ArraySet) Kind() OAst_instr__kind {
	return KAst_instr__ArraySet
}
func Ast_ArraySet_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__ArraySet{v}
}

var _Ast_instr__ArrayLen OAst_instr_ = SimpleOAst_instr_{KAst_instr__ArrayLen}

type OAst_instr__ArrayCopy struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ArrayCopy) Kind() OAst_instr__kind {
	return KAst_instr__ArrayCopy
}
func Ast_ArrayCopy_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ArrayCopy{v}
}

type OAst_instr__ArrayFill struct {
	V OAst_idx
}

func (t OAst_instr__ArrayFill) Kind() OAst_instr__kind {
	return KAst_instr__ArrayFill
}
func Ast_ArrayFill_1(v OAst_idx) OAst_instr_ {
	return OAst_instr__ArrayFill{v}
}

type OAst_instr__ArrayInitData struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ArrayInitData) Kind() OAst_instr__kind {
	return KAst_instr__ArrayInitData
}
func Ast_ArrayInitData_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ArrayInitData{v}
}

type OAst_instr__ArrayInitElem struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_instr__ArrayInitElem) Kind() OAst_instr__kind {
	return KAst_instr__ArrayInitElem
}
func Ast_ArrayInitElem_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_instr_ {
	return OAst_instr__ArrayInitElem{v}
}

type OAst_instr__ExternConvert struct {
	V OAst_externop
}

func (t OAst_instr__ExternConvert) Kind() OAst_instr__kind {
	return KAst_instr__ExternConvert
}
func Ast_ExternConvert_1(v OAst_externop) OAst_instr_ {
	return OAst_instr__ExternConvert{v}
}

type OAst_instr__VecConst struct {
	V OAst_vec
}

func (t OAst_instr__VecConst) Kind() OAst_instr__kind {
	return KAst_instr__VecConst
}
func Ast_VecConst_1(v OAst_vec) OAst_instr_ {
	return OAst_instr__VecConst{v}
}

type OAst_instr__VecTest struct {
	V OAst_vec_testop
}

func (t OAst_instr__VecTest) Kind() OAst_instr__kind {
	return KAst_instr__VecTest
}
func Ast_VecTest_1(v OAst_vec_testop) OAst_instr_ {
	return OAst_instr__VecTest{v}
}

type OAst_instr__VecCompare struct {
	V OAst_vec_relop
}

func (t OAst_instr__VecCompare) Kind() OAst_instr__kind {
	return KAst_instr__VecCompare
}
func Ast_VecCompare_1(v OAst_vec_relop) OAst_instr_ {
	return OAst_instr__VecCompare{v}
}

type OAst_instr__VecUnary struct {
	V OAst_vec_unop
}

func (t OAst_instr__VecUnary) Kind() OAst_instr__kind {
	return KAst_instr__VecUnary
}
func Ast_VecUnary_1(v OAst_vec_unop) OAst_instr_ {
	return OAst_instr__VecUnary{v}
}

type OAst_instr__VecBinary struct {
	V OAst_vec_binop
}

func (t OAst_instr__VecBinary) Kind() OAst_instr__kind {
	return KAst_instr__VecBinary
}
func Ast_VecBinary_1(v OAst_vec_binop) OAst_instr_ {
	return OAst_instr__VecBinary{v}
}

type OAst_instr__VecTernary struct {
	V OAst_vec_ternop
}

func (t OAst_instr__VecTernary) Kind() OAst_instr__kind {
	return KAst_instr__VecTernary
}
func Ast_VecTernary_1(v OAst_vec_ternop) OAst_instr_ {
	return OAst_instr__VecTernary{v}
}

type OAst_instr__VecConvert struct {
	V OAst_vec_cvtop
}

func (t OAst_instr__VecConvert) Kind() OAst_instr__kind {
	return KAst_instr__VecConvert
}
func Ast_VecConvert_1(v OAst_vec_cvtop) OAst_instr_ {
	return OAst_instr__VecConvert{v}
}

type OAst_instr__VecShift struct {
	V OAst_vec_shiftop
}

func (t OAst_instr__VecShift) Kind() OAst_instr__kind {
	return KAst_instr__VecShift
}
func Ast_VecShift_1(v OAst_vec_shiftop) OAst_instr_ {
	return OAst_instr__VecShift{v}
}

type OAst_instr__VecBitmask struct {
	V OAst_vec_bitmaskop
}

func (t OAst_instr__VecBitmask) Kind() OAst_instr__kind {
	return KAst_instr__VecBitmask
}
func Ast_VecBitmask_1(v OAst_vec_bitmaskop) OAst_instr_ {
	return OAst_instr__VecBitmask{v}
}

type OAst_instr__VecTestBits struct {
	V OAst_vec_vtestop
}

func (t OAst_instr__VecTestBits) Kind() OAst_instr__kind {
	return KAst_instr__VecTestBits
}
func Ast_VecTestBits_1(v OAst_vec_vtestop) OAst_instr_ {
	return OAst_instr__VecTestBits{v}
}

type OAst_instr__VecUnaryBits struct {
	V OAst_vec_vunop
}

func (t OAst_instr__VecUnaryBits) Kind() OAst_instr__kind {
	return KAst_instr__VecUnaryBits
}
func Ast_VecUnaryBits_1(v OAst_vec_vunop) OAst_instr_ {
	return OAst_instr__VecUnaryBits{v}
}

type OAst_instr__VecBinaryBits struct {
	V OAst_vec_vbinop
}

func (t OAst_instr__VecBinaryBits) Kind() OAst_instr__kind {
	return KAst_instr__VecBinaryBits
}
func Ast_VecBinaryBits_1(v OAst_vec_vbinop) OAst_instr_ {
	return OAst_instr__VecBinaryBits{v}
}

type OAst_instr__VecTernaryBits struct {
	V OAst_vec_vternop
}

func (t OAst_instr__VecTernaryBits) Kind() OAst_instr__kind {
	return KAst_instr__VecTernaryBits
}
func Ast_VecTernaryBits_1(v OAst_vec_vternop) OAst_instr_ {
	return OAst_instr__VecTernaryBits{v}
}

type OAst_instr__VecSplat struct {
	V OAst_vec_splatop
}

func (t OAst_instr__VecSplat) Kind() OAst_instr__kind {
	return KAst_instr__VecSplat
}
func Ast_VecSplat_1(v OAst_vec_splatop) OAst_instr_ {
	return OAst_instr__VecSplat{v}
}

type OAst_instr__VecExtract struct {
	V OAst_vec_extractop
}

func (t OAst_instr__VecExtract) Kind() OAst_instr__kind {
	return KAst_instr__VecExtract
}
func Ast_VecExtract_1(v OAst_vec_extractop) OAst_instr_ {
	return OAst_instr__VecExtract{v}
}

type OAst_instr__VecReplace struct {
	V OAst_vec_replaceop
}

func (t OAst_instr__VecReplace) Kind() OAst_instr__kind {
	return KAst_instr__VecReplace
}
func Ast_VecReplace_1(v OAst_vec_replaceop) OAst_instr_ {
	return OAst_instr__VecReplace{v}
}

type OAst_catch = OSource_phrase[OAst_catch_]

type OAst_catch__kind int

const (
	KAst_catch__Catch OAst_catch__kind = iota + 1
	KAst_catch__CatchRef
	KAst_catch__CatchAll
	KAst_catch__CatchAllRef
)

type OAst_catch_ interface {
	Kind() OAst_catch__kind
}

type SimpleOAst_catch_ struct {
	kind OAst_catch__kind
}

func (t SimpleOAst_catch_) Kind() OAst_catch__kind {
	return t.kind
}

type OAst_catch__Catch struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_catch__Catch) Kind() OAst_catch__kind {
	return KAst_catch__Catch
}
func Ast_Catch_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_catch_ {
	return OAst_catch__Catch{v}
}

type OAst_catch__CatchRef struct {
	V struct {
		F0 OAst_idx
		F1 OAst_idx
	}
}

func (t OAst_catch__CatchRef) Kind() OAst_catch__kind {
	return KAst_catch__CatchRef
}
func Ast_CatchRef_1(v struct {
	F0 OAst_idx
	F1 OAst_idx
}) OAst_catch_ {
	return OAst_catch__CatchRef{v}
}

type OAst_catch__CatchAll struct {
	V OAst_idx
}

func (t OAst_catch__CatchAll) Kind() OAst_catch__kind {
	return KAst_catch__CatchAll
}
func Ast_CatchAll_1(v OAst_idx) OAst_catch_ {
	return OAst_catch__CatchAll{v}
}

type OAst_catch__CatchAllRef struct {
	V OAst_idx
}

func (t OAst_catch__CatchAllRef) Kind() OAst_catch__kind {
	return KAst_catch__CatchAllRef
}
func Ast_CatchAllRef_1(v OAst_idx) OAst_catch_ {
	return OAst_catch__CatchAllRef{v}
}

type OAst_const = OSource_phrase[[]OAst_instr]
type OAst_local = OSource_phrase[OAst_local_]
type OAst_local_ struct {
	ltype OTypes_val_type
}
type OAst_global = OSource_phrase[OAst_global_]
type OAst_global_ struct {
	gtype OTypes_global_type
	ginit OAst_const
}
type OAst_func = OSource_phrase[OAst_func_]
type OAst_func_ struct {
	ftype  OAst_idx
	locals []OAst_local
	body   []OAst_instr
}
type OAst_table = OSource_phrase[OAst_table_]
type OAst_table_ struct {
	ttype OTypes_table_type
	tinit OAst_const
}
type OAst_memory = OSource_phrase[OAst_memory_]
type OAst_memory_ struct {
	mtype OTypes_memory_type
}
type OAst_tag = OSource_phrase[OAst_tag_]
type OAst_tag_ struct {
	tgtype OAst_idx
}
type OAst_segment_mode = OSource_phrase[OAst_segment_mode_]

type OAst_segment_mode__kind int

const (
	KAst_segment_mode__Passive OAst_segment_mode__kind = iota + 1
	KAst_segment_mode__Active
	KAst_segment_mode__Declarative
)

type OAst_segment_mode_ interface {
	Kind() OAst_segment_mode__kind
}

type SimpleOAst_segment_mode_ struct {
	kind OAst_segment_mode__kind
}

func (t SimpleOAst_segment_mode_) Kind() OAst_segment_mode__kind {
	return t.kind
}

var _Ast_segment_mode__Passive OAst_segment_mode_ = SimpleOAst_segment_mode_{KAst_segment_mode__Passive}

type OAst_segment_mode__Active struct {
	V struct {
		index  OAst_idx
		offset OAst_const
	}
}

func (t OAst_segment_mode__Active) Kind() OAst_segment_mode__kind {
	return KAst_segment_mode__Active
}
func Ast_Active_1(v struct {
	index  OAst_idx
	offset OAst_const
}) OAst_segment_mode_ {
	return OAst_segment_mode__Active{v}
}

var _Ast_segment_mode__Declarative OAst_segment_mode_ = SimpleOAst_segment_mode_{KAst_segment_mode__Declarative}

type OAst_elem_segment = OSource_phrase[OAst_elem_segment_]
type OAst_elem_segment_ struct {
	etype OTypes_ref_type
	einit []OAst_const
	emode OAst_segment_mode
}
type OAst_data_segment = OSource_phrase[OAst_data_segment_]
type OAst_data_segment_ struct {
	dinit string
	dmode OAst_segment_mode
}
type OAst_type_ = OSource_phrase[OTypes_rec_type]
type OAst_export_desc = OSource_phrase[OAst_export_desc_]

type OAst_export_desc__kind int

const (
	KAst_export_desc__FuncExport OAst_export_desc__kind = iota + 1
	KAst_export_desc__TableExport
	KAst_export_desc__MemoryExport
	KAst_export_desc__GlobalExport
	KAst_export_desc__TagExport
)

type OAst_export_desc_ interface {
	Kind() OAst_export_desc__kind
}

type SimpleOAst_export_desc_ struct {
	kind OAst_export_desc__kind
}

func (t SimpleOAst_export_desc_) Kind() OAst_export_desc__kind {
	return t.kind
}

type OAst_export_desc__FuncExport struct {
	V OAst_idx
}

func (t OAst_export_desc__FuncExport) Kind() OAst_export_desc__kind {
	return KAst_export_desc__FuncExport
}
func Ast_FuncExport_1(v OAst_idx) OAst_export_desc_ {
	return OAst_export_desc__FuncExport{v}
}

type OAst_export_desc__TableExport struct {
	V OAst_idx
}

func (t OAst_export_desc__TableExport) Kind() OAst_export_desc__kind {
	return KAst_export_desc__TableExport
}
func Ast_TableExport_1(v OAst_idx) OAst_export_desc_ {
	return OAst_export_desc__TableExport{v}
}

type OAst_export_desc__MemoryExport struct {
	V OAst_idx
}

func (t OAst_export_desc__MemoryExport) Kind() OAst_export_desc__kind {
	return KAst_export_desc__MemoryExport
}
func Ast_MemoryExport_1(v OAst_idx) OAst_export_desc_ {
	return OAst_export_desc__MemoryExport{v}
}

type OAst_export_desc__GlobalExport struct {
	V OAst_idx
}

func (t OAst_export_desc__GlobalExport) Kind() OAst_export_desc__kind {
	return KAst_export_desc__GlobalExport
}
func Ast_GlobalExport_1(v OAst_idx) OAst_export_desc_ {
	return OAst_export_desc__GlobalExport{v}
}

type OAst_export_desc__TagExport struct {
	V OAst_idx
}

func (t OAst_export_desc__TagExport) Kind() OAst_export_desc__kind {
	return KAst_export_desc__TagExport
}
func Ast_TagExport_1(v OAst_idx) OAst_export_desc_ {
	return OAst_export_desc__TagExport{v}
}

type OAst_export = OSource_phrase[OAst_export_]
type OAst_export_ struct {
	name  OAst_name
	edesc OAst_export_desc
}
type OAst_import_desc = OSource_phrase[OAst_import_desc_]

type OAst_import_desc__kind int

const (
	KAst_import_desc__FuncImport OAst_import_desc__kind = iota + 1
	KAst_import_desc__TableImport
	KAst_import_desc__MemoryImport
	KAst_import_desc__GlobalImport
	KAst_import_desc__TagImport
)

type OAst_import_desc_ interface {
	Kind() OAst_import_desc__kind
}

type SimpleOAst_import_desc_ struct {
	kind OAst_import_desc__kind
}

func (t SimpleOAst_import_desc_) Kind() OAst_import_desc__kind {
	return t.kind
}

type OAst_import_desc__FuncImport struct {
	V OAst_idx
}

func (t OAst_import_desc__FuncImport) Kind() OAst_import_desc__kind {
	return KAst_import_desc__FuncImport
}
func Ast_FuncImport_1(v OAst_idx) OAst_import_desc_ {
	return OAst_import_desc__FuncImport{v}
}

type OAst_import_desc__TableImport struct {
	V OTypes_table_type
}

func (t OAst_import_desc__TableImport) Kind() OAst_import_desc__kind {
	return KAst_import_desc__TableImport
}
func Ast_TableImport_1(v OTypes_table_type) OAst_import_desc_ {
	return OAst_import_desc__TableImport{v}
}

type OAst_import_desc__MemoryImport struct {
	V OTypes_memory_type
}

func (t OAst_import_desc__MemoryImport) Kind() OAst_import_desc__kind {
	return KAst_import_desc__MemoryImport
}
func Ast_MemoryImport_1(v OTypes_memory_type) OAst_import_desc_ {
	return OAst_import_desc__MemoryImport{v}
}

type OAst_import_desc__GlobalImport struct {
	V OTypes_global_type
}

func (t OAst_import_desc__GlobalImport) Kind() OAst_import_desc__kind {
	return KAst_import_desc__GlobalImport
}
func Ast_GlobalImport_1(v OTypes_global_type) OAst_import_desc_ {
	return OAst_import_desc__GlobalImport{v}
}

type OAst_import_desc__TagImport struct {
	V OAst_idx
}

func (t OAst_import_desc__TagImport) Kind() OAst_import_desc__kind {
	return KAst_import_desc__TagImport
}
func Ast_TagImport_1(v OAst_idx) OAst_import_desc_ {
	return OAst_import_desc__TagImport{v}
}

type OAst_import = OSource_phrase[OAst_import_]
type OAst_import_ struct {
	module_name OAst_name
	item_name   OAst_name
	idesc       OAst_import_desc
}
type OAst_start = OSource_phrase[OAst_start_]
type OAst_start_ struct {
	sfunc OAst_idx
}
type OAst_module_ = OSource_phrase[OAst_module__]
type OAst_module__ struct {
	types    []OAst_type_
	globals  []OAst_global
	tables   []OAst_table
	memories []OAst_memory
	tags     []OAst_tag
	funcs    []OAst_func
	start    *OAst_start
	elems    []OAst_elem_segment
	datas    []OAst_data_segment
	imports  []OAst_import
	exports  []OAst_export
}

var Ast_empty_module = OAst_module__{types: []OAst_type_{}, globals: []OAst_global{}, tables: []OAst_table{}, memories: []OAst_memory{}, tags: []OAst_tag{}, funcs: []OAst_func{}, start: nil, elems: []OAst_elem_segment{}, datas: []OAst_data_segment{}, imports: []OAst_import{}, exports: []OAst_export{}}

func Operators_i32_const_1(_n OSource_phrase[OTypes_type_idx]) OAst_instr_ {
	__tmp1 := Ast_Const_1(_operatorAtAt_2(Value_I32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_i32_const = Operators_i32_const_1

func Operators_i64_const_1(_n OSource_phrase[OValue_address]) OAst_instr_ {
	__tmp1 := Ast_Const_1(_operatorAtAt_2(Value_I64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_i64_const = Operators_i64_const_1

func Operators_f32_const_1(_n OSource_phrase[OValue_t]) OAst_instr_ {
	__tmp1 := Ast_Const_1(_operatorAtAt_2(Value_F32_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_f32_const = Operators_f32_const_1

func Operators_f64_const_1(_n OSource_phrase[OValue_t]) OAst_instr_ {
	__tmp1 := Ast_Const_1(_operatorAtAt_2(Value_F64_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_f64_const = Operators_f64_const_1

func Operators_v128_const_1(_n OSource_phrase[OValue_t]) OAst_instr_ {
	__tmp1 := Ast_VecConst_1(_operatorAtAt_2(Value_V128_1(nil /* TODO: field_get_expression */), nil /* TODO: field_get_expression */))
	return __tmp1
}

var Operators_v128_const = Operators_v128_const_1

func Operators_ref_null_1(_t OTypes_heap_type) OAst_instr_ {
	__tmp1 := Ast_RefNull_1(_t)
	return __tmp1
}

var Operators_ref_null = Operators_ref_null_1

func Operators_ref_func_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_RefFunc_1(_x)
	return __tmp1
}

var Operators_ref_func = Operators_ref_func_1

func Operators_at_const_0() func(OTypes_addr_type) func(OSource_phrase[OValue_address]) OAst_instr_ {
	TODO /* unknown expression type function_expression */
}

var Operators_at_const = Operators_at_const_0

var Operators_unreachable = Ast_Unreachable
var Operators_nop = Ast_Nop
var Operators_drop = Ast_Drop

func Operators_select_1(_t *[]OTypes_val_type) OAst_instr_ {
	__tmp1 := Ast_Select_1(_t)
	return __tmp1
}

var Operators_select = Operators_select_1

func Operators_block_2(_bt OAst_block_type, _es []OAst_instr) OAst_instr_ {
	__tmp1 := Ast_Block_1(struct {
		F0 OAst_block_type
		F1 []OAst_instr
	}{_bt, _es})
	return __tmp1
}

func Operators_block_1(_bt OAst_block_type) func(_es []OAst_instr) OAst_instr_ {
	return func(_es []OAst_instr) OAst_instr_ {
		return Operators_block_2(_bt, _es)
	}
}

var Operators_block = Operators_block_2

func Operators_loop_2(_bt OAst_block_type, _es []OAst_instr) OAst_instr_ {
	__tmp1 := Ast_Loop_1(struct {
		F0 OAst_block_type
		F1 []OAst_instr
	}{_bt, _es})
	return __tmp1
}

func Operators_loop_1(_bt OAst_block_type) func(_es []OAst_instr) OAst_instr_ {
	return func(_es []OAst_instr) OAst_instr_ {
		return Operators_loop_2(_bt, _es)
	}
}

var Operators_loop = Operators_loop_2

func Operators_if__3(_bt OAst_block_type, _es1 []OAst_instr, _es2 []OAst_instr) OAst_instr_ {
	__tmp1 := Ast_If_1(struct {
		F0 OAst_block_type
		F1 []OAst_instr
		F2 []OAst_instr
	}{_bt, _es1, _es2})
	return __tmp1
}

func Operators_if__2(_bt OAst_block_type, _es1 []OAst_instr) func(_es2 []OAst_instr) OAst_instr_ {
	return func(_es2 []OAst_instr) OAst_instr_ {
		return Operators_if__3(_bt, _es1, _es2)
	}
}

func Operators_if__1(_bt OAst_block_type) func(_es1 []OAst_instr, _es2 []OAst_instr) OAst_instr_ {
	return func(_es1 []OAst_instr, _es2 []OAst_instr) OAst_instr_ {
		return Operators_if__3(_bt, _es1, _es2)
	}
}

var Operators_if_ = Operators_if__3

func Operators_br_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_Br_1(_x)
	return __tmp1
}

var Operators_br = Operators_br_1

func Operators_br_if_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_BrIf_1(_x)
	return __tmp1
}

var Operators_br_if = Operators_br_if_1

func Operators_br_table_2(_xs []OAst_idx, _x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_BrTable_1(struct {
		F0 []OAst_idx
		F1 OAst_idx
	}{_xs, _x})
	return __tmp1
}

func Operators_br_table_1(_xs []OAst_idx) func(_x OAst_idx) OAst_instr_ {
	return func(_x OAst_idx) OAst_instr_ {
		return Operators_br_table_2(_xs, _x)
	}
}

var Operators_br_table = Operators_br_table_2

func Operators_br_on_null_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_BrOnNull_1(_x)
	return __tmp1
}

var Operators_br_on_null = Operators_br_on_null_1

func Operators_br_on_non_null_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_BrOnNonNull_1(_x)
	return __tmp1
}

var Operators_br_on_non_null = Operators_br_on_non_null_1

func Operators_br_on_cast_3(_x OAst_idx, _t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
	__tmp1 := Ast_BrOnCast_1(struct {
		F0 OAst_idx
		F1 OTypes_ref_type
		F2 OTypes_ref_type
	}{_x, _t1, _t2})
	return __tmp1
}

func Operators_br_on_cast_2(_x OAst_idx, _t1 OTypes_ref_type) func(_t2 OTypes_ref_type) OAst_instr_ {
	return func(_t2 OTypes_ref_type) OAst_instr_ {
		return Operators_br_on_cast_3(_x, _t1, _t2)
	}
}

func Operators_br_on_cast_1(_x OAst_idx) func(_t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
	return func(_t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
		return Operators_br_on_cast_3(_x, _t1, _t2)
	}
}

var Operators_br_on_cast = Operators_br_on_cast_3

func Operators_br_on_cast_fail_3(_x OAst_idx, _t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
	__tmp1 := Ast_BrOnCastFail_1(struct {
		F0 OAst_idx
		F1 OTypes_ref_type
		F2 OTypes_ref_type
	}{_x, _t1, _t2})
	return __tmp1
}

func Operators_br_on_cast_fail_2(_x OAst_idx, _t1 OTypes_ref_type) func(_t2 OTypes_ref_type) OAst_instr_ {
	return func(_t2 OTypes_ref_type) OAst_instr_ {
		return Operators_br_on_cast_fail_3(_x, _t1, _t2)
	}
}

func Operators_br_on_cast_fail_1(_x OAst_idx) func(_t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
	return func(_t1 OTypes_ref_type, _t2 OTypes_ref_type) OAst_instr_ {
		return Operators_br_on_cast_fail_3(_x, _t1, _t2)
	}
}

var Operators_br_on_cast_fail = Operators_br_on_cast_fail_3

func Operators_catch_2(_x1 OAst_idx, _x2 OAst_idx) OAst_catch_ {
	__tmp1 := Ast_Catch_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x1, _x2})
	return __tmp1
}

func Operators_catch_1(_x1 OAst_idx) func(_x2 OAst_idx) OAst_catch_ {
	return func(_x2 OAst_idx) OAst_catch_ {
		return Operators_catch_2(_x1, _x2)
	}
}

var Operators_catch = Operators_catch_2

func Operators_catch_ref_2(_x1 OAst_idx, _x2 OAst_idx) OAst_catch_ {
	__tmp1 := Ast_CatchRef_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x1, _x2})
	return __tmp1
}

func Operators_catch_ref_1(_x1 OAst_idx) func(_x2 OAst_idx) OAst_catch_ {
	return func(_x2 OAst_idx) OAst_catch_ {
		return Operators_catch_ref_2(_x1, _x2)
	}
}

var Operators_catch_ref = Operators_catch_ref_2

func Operators_catch_all_1(_x OAst_idx) OAst_catch_ {
	__tmp1 := Ast_CatchAll_1(_x)
	return __tmp1
}

var Operators_catch_all = Operators_catch_all_1

func Operators_catch_all_ref_1(_x OAst_idx) OAst_catch_ {
	__tmp1 := Ast_CatchAllRef_1(_x)
	return __tmp1
}

var Operators_catch_all_ref = Operators_catch_all_ref_1

var Operators_return = Ast_Return

func Operators_call_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_Call_1(_x)
	return __tmp1
}

var Operators_call = Operators_call_1

func Operators_call_ref_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_CallRef_1(_x)
	return __tmp1
}

var Operators_call_ref = Operators_call_ref_1

func Operators_call_indirect_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_CallIndirect_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_call_indirect_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_call_indirect_2(_x, _y)
	}
}

var Operators_call_indirect = Operators_call_indirect_2

func Operators_return_call_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ReturnCall_1(_x)
	return __tmp1
}

var Operators_return_call = Operators_return_call_1

func Operators_return_call_ref_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ReturnCallRef_1(_x)
	return __tmp1
}

var Operators_return_call_ref = Operators_return_call_ref_1

func Operators_return_call_indirect_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ReturnCallIndirect_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_return_call_indirect_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_return_call_indirect_2(_x, _y)
	}
}

var Operators_return_call_indirect = Operators_return_call_indirect_2

func Operators_throw_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_Throw_1(_x)
	return __tmp1
}

var Operators_throw = Operators_throw_1

var Operators_throw_ref = Ast_ThrowRef

func Operators_try_table_3(_bt OAst_block_type, _cs []OAst_catch, _es []OAst_instr) OAst_instr_ {
	__tmp1 := Ast_TryTable_1(struct {
		F0 OAst_block_type
		F1 []OAst_catch
		F2 []OAst_instr
	}{_bt, _cs, _es})
	return __tmp1
}

func Operators_try_table_2(_bt OAst_block_type, _cs []OAst_catch) func(_es []OAst_instr) OAst_instr_ {
	return func(_es []OAst_instr) OAst_instr_ {
		return Operators_try_table_3(_bt, _cs, _es)
	}
}

func Operators_try_table_1(_bt OAst_block_type) func(_cs []OAst_catch, _es []OAst_instr) OAst_instr_ {
	return func(_cs []OAst_catch, _es []OAst_instr) OAst_instr_ {
		return Operators_try_table_3(_bt, _cs, _es)
	}
}

var Operators_try_table = Operators_try_table_3

func Operators_local_get_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_LocalGet_1(_x)
	return __tmp1
}

var Operators_local_get = Operators_local_get_1

func Operators_local_set_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_LocalSet_1(_x)
	return __tmp1
}

var Operators_local_set = Operators_local_set_1

func Operators_local_tee_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_LocalTee_1(_x)
	return __tmp1
}

var Operators_local_tee = Operators_local_tee_1

func Operators_global_get_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_GlobalGet_1(_x)
	return __tmp1
}

var Operators_global_get = Operators_global_get_1

func Operators_global_set_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_GlobalSet_1(_x)
	return __tmp1
}

var Operators_global_set = Operators_global_set_1

func Operators_table_get_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableGet_1(_x)
	return __tmp1
}

var Operators_table_get = Operators_table_get_1

func Operators_table_set_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableSet_1(_x)
	return __tmp1
}

var Operators_table_set = Operators_table_set_1

func Operators_table_size_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableSize_1(_x)
	return __tmp1
}

var Operators_table_size = Operators_table_size_1

func Operators_table_grow_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableGrow_1(_x)
	return __tmp1
}

var Operators_table_grow = Operators_table_grow_1

func Operators_table_fill_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableFill_1(_x)
	return __tmp1
}

var Operators_table_fill = Operators_table_fill_1

func Operators_table_copy_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableCopy_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_table_copy_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_table_copy_2(_x, _y)
	}
}

var Operators_table_copy = Operators_table_copy_2

func Operators_table_init_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_TableInit_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_table_init_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_table_init_2(_x, _y)
	}
}

var Operators_table_init = Operators_table_init_2

func Operators_elem_drop_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ElemDrop_1(_x)
	return __tmp1
}

var Operators_elem_drop = Operators_elem_drop_1

func Operators_i32_load_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I32T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_i32_load_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_load_3(_x, _align, _offset)
	}
}

func Operators_i32_load_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_load_3(_x, _align, _offset)
	}
}

var Operators_i32_load = Operators_i32_load_3

func Operators_i64_load_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_i64_load_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load_3(_x, _align, _offset)
	}
}

func Operators_i64_load_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load_3(_x, _align, _offset)
	}
}

var Operators_i64_load = Operators_i64_load_3

func Operators_f32_load_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_F32T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_f32_load_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_f32_load_3(_x, _align, _offset)
	}
}

func Operators_f32_load_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_f32_load_3(_x, _align, _offset)
	}
}

var Operators_f32_load = Operators_f32_load_3

func Operators_f64_load_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_F64T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_f64_load_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_f64_load_3(_x, _align, _offset)
	}
}

func Operators_f64_load_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_f64_load_3(_x, _align, _offset)
	}
}

var Operators_f64_load = Operators_f64_load_3

func Operators_i32_load8_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack8, Pack_SX})}})
	return __tmp1
}

func Operators_i32_load8_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_load8_s_3(_x, _align, _offset)
	}
}

func Operators_i32_load8_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_load8_s_3(_x, _align, _offset)
	}
}

var Operators_i32_load8_s = Operators_i32_load8_s_3

func Operators_i32_load8_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack8, Pack_ZX})}})
	return __tmp1
}

func Operators_i32_load8_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_load8_u_3(_x, _align, _offset)
	}
}

func Operators_i32_load8_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_load8_u_3(_x, _align, _offset)
	}
}

var Operators_i32_load8_u = Operators_i32_load8_u_3

func Operators_i32_load16_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack16, Pack_SX})}})
	return __tmp1
}

func Operators_i32_load16_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_load16_s_3(_x, _align, _offset)
	}
}

func Operators_i32_load16_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_load16_s_3(_x, _align, _offset)
	}
}

var Operators_i32_load16_s = Operators_i32_load16_s_3

func Operators_i32_load16_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack16, Pack_ZX})}})
	return __tmp1
}

func Operators_i32_load16_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_load16_u_3(_x, _align, _offset)
	}
}

func Operators_i32_load16_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_load16_u_3(_x, _align, _offset)
	}
}

var Operators_i32_load16_u = Operators_i32_load16_u_3

func Operators_i64_load8_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack8, Pack_SX})}})
	return __tmp1
}

func Operators_i64_load8_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load8_s_3(_x, _align, _offset)
	}
}

func Operators_i64_load8_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load8_s_3(_x, _align, _offset)
	}
}

var Operators_i64_load8_s = Operators_i64_load8_s_3

func Operators_i64_load8_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack8, Pack_ZX})}})
	return __tmp1
}

func Operators_i64_load8_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load8_u_3(_x, _align, _offset)
	}
}

func Operators_i64_load8_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load8_u_3(_x, _align, _offset)
	}
}

var Operators_i64_load8_u = Operators_i64_load8_u_3

func Operators_i64_load16_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack16, Pack_SX})}})
	return __tmp1
}

func Operators_i64_load16_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load16_s_3(_x, _align, _offset)
	}
}

func Operators_i64_load16_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load16_s_3(_x, _align, _offset)
	}
}

var Operators_i64_load16_s = Operators_i64_load16_s_3

func Operators_i64_load16_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack16, Pack_ZX})}})
	return __tmp1
}

func Operators_i64_load16_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load16_u_3(_x, _align, _offset)
	}
}

func Operators_i64_load16_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load16_u_3(_x, _align, _offset)
	}
}

var Operators_i64_load16_u = Operators_i64_load16_u_3

func Operators_i64_load32_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack32, Pack_SX})}})
	return __tmp1
}

func Operators_i64_load32_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load32_s_3(_x, _align, _offset)
	}
}

func Operators_i64_load32_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load32_s_3(_x, _align, _offset)
	}
}

var Operators_i64_load32_s = Operators_i64_load32_s_3

func Operators_i64_load32_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Load_1(struct {
		F0 OAst_idx
		F1 OAst_loadop
	}{_x, OAst_loadop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_extension
	}{Pack_Pack32, Pack_ZX})}})
	return __tmp1
}

func Operators_i64_load32_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_load32_u_3(_x, _align, _offset)
	}
}

func Operators_i64_load32_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_load32_u_3(_x, _align, _offset)
	}
}

var Operators_i64_load32_u = Operators_i64_load32_u_3

func Operators_i32_store_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I32T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_i32_store_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_store_3(_x, _align, _offset)
	}
}

func Operators_i32_store_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_store_3(_x, _align, _offset)
	}
}

var Operators_i32_store = Operators_i32_store_3

func Operators_i64_store_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I64T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_i64_store_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_store_3(_x, _align, _offset)
	}
}

func Operators_i64_store_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_store_3(_x, _align, _offset)
	}
}

var Operators_i64_store = Operators_i64_store_3

func Operators_f32_store_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_F32T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_f32_store_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_f32_store_3(_x, _align, _offset)
	}
}

func Operators_f32_store_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_f32_store_3(_x, _align, _offset)
	}
}

var Operators_f32_store = Operators_f32_store_3

func Operators_f64_store_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_F64T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_f64_store_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_f64_store_3(_x, _align, _offset)
	}
}

func Operators_f64_store_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_f64_store_3(_x, _align, _offset)
	}
}

var Operators_f64_store = Operators_f64_store_3

func Operators_i32_store8_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(Pack_Pack8)}})
	return __tmp1
}

func Operators_i32_store8_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_store8_3(_x, _align, _offset)
	}
}

func Operators_i32_store8_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_store8_3(_x, _align, _offset)
	}
}

var Operators_i32_store8 = Operators_i32_store8_3

func Operators_i32_store16_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I32T, align: _align, offset: _offset, pack: Some_1(Pack_Pack16)}})
	return __tmp1
}

func Operators_i32_store16_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i32_store16_3(_x, _align, _offset)
	}
}

func Operators_i32_store16_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i32_store16_3(_x, _align, _offset)
	}
}

var Operators_i32_store16 = Operators_i32_store16_3

func Operators_i64_store8_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(Pack_Pack8)}})
	return __tmp1
}

func Operators_i64_store8_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_store8_3(_x, _align, _offset)
	}
}

func Operators_i64_store8_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_store8_3(_x, _align, _offset)
	}
}

var Operators_i64_store8 = Operators_i64_store8_3

func Operators_i64_store16_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(Pack_Pack16)}})
	return __tmp1
}

func Operators_i64_store16_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_store16_3(_x, _align, _offset)
	}
}

func Operators_i64_store16_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_store16_3(_x, _align, _offset)
	}
}

var Operators_i64_store16 = Operators_i64_store16_3

func Operators_i64_store32_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_Store_1(struct {
		F0 OAst_idx
		F1 OAst_storeop
	}{_x, OAst_storeop{ty: Types_I64T, align: _align, offset: _offset, pack: Some_1(Pack_Pack32)}})
	return __tmp1
}

func Operators_i64_store32_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_i64_store32_3(_x, _align, _offset)
	}
}

func Operators_i64_store32_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_i64_store32_3(_x, _align, _offset)
	}
}

var Operators_i64_store32 = Operators_i64_store32_3

func Operators_v128_load_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: nil}})
	return __tmp1
}

func Operators_v128_load_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load_3(_x, _align, _offset)
	}
}

func Operators_v128_load_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load_3(_x, _align, _offset)
	}
}

var Operators_v128_load = Operators_v128_load_3

func Operators_v128_load8x8_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack8x8, Pack_SX})})}})
	return __tmp1
}

func Operators_v128_load8x8_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load8x8_s_3(_x, _align, _offset)
	}
}

func Operators_v128_load8x8_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load8x8_s_3(_x, _align, _offset)
	}
}

var Operators_v128_load8x8_s = Operators_v128_load8x8_s_3

func Operators_v128_load8x8_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack8x8, Pack_ZX})})}})
	return __tmp1
}

func Operators_v128_load8x8_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load8x8_u_3(_x, _align, _offset)
	}
}

func Operators_v128_load8x8_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load8x8_u_3(_x, _align, _offset)
	}
}

var Operators_v128_load8x8_u = Operators_v128_load8x8_u_3

func Operators_v128_load16x4_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack16x4, Pack_SX})})}})
	return __tmp1
}

func Operators_v128_load16x4_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load16x4_s_3(_x, _align, _offset)
	}
}

func Operators_v128_load16x4_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load16x4_s_3(_x, _align, _offset)
	}
}

var Operators_v128_load16x4_s = Operators_v128_load16x4_s_3

func Operators_v128_load16x4_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack16x4, Pack_ZX})})}})
	return __tmp1
}

func Operators_v128_load16x4_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load16x4_u_3(_x, _align, _offset)
	}
}

func Operators_v128_load16x4_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load16x4_u_3(_x, _align, _offset)
	}
}

var Operators_v128_load16x4_u = Operators_v128_load16x4_u_3

func Operators_v128_load32x2_s_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack32x2, Pack_SX})})}})
	return __tmp1
}

func Operators_v128_load32x2_s_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load32x2_s_3(_x, _align, _offset)
	}
}

func Operators_v128_load32x2_s_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load32x2_s_3(_x, _align, _offset)
	}
}

var Operators_v128_load32x2_s = Operators_v128_load32x2_s_3

func Operators_v128_load32x2_u_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 func(struct {
			F0 OPack_pack_shape
			F1 OPack_extension
		}) OPack_vec_extension
	}{Pack_Pack64, Pack_ExtLane_1(struct {
		F0 OPack_pack_shape
		F1 OPack_extension
	}{Pack_Pack32x2, Pack_ZX})})}})
	return __tmp1
}

func Operators_v128_load32x2_u_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load32x2_u_3(_x, _align, _offset)
	}
}

func Operators_v128_load32x2_u_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load32x2_u_3(_x, _align, _offset)
	}
}

var Operators_v128_load32x2_u = Operators_v128_load32x2_u_3

func Operators_v128_load8_splat_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack8, Pack_ExtSplat})}})
	return __tmp1
}

func Operators_v128_load8_splat_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load8_splat_3(_x, _align, _offset)
	}
}

func Operators_v128_load8_splat_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load8_splat_3(_x, _align, _offset)
	}
}

var Operators_v128_load8_splat = Operators_v128_load8_splat_3

func Operators_v128_load16_splat_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack16, Pack_ExtSplat})}})
	return __tmp1
}

func Operators_v128_load16_splat_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load16_splat_3(_x, _align, _offset)
	}
}

func Operators_v128_load16_splat_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load16_splat_3(_x, _align, _offset)
	}
}

var Operators_v128_load16_splat = Operators_v128_load16_splat_3

func Operators_v128_load32_splat_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack32, Pack_ExtSplat})}})
	return __tmp1
}

func Operators_v128_load32_splat_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load32_splat_3(_x, _align, _offset)
	}
}

func Operators_v128_load32_splat_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load32_splat_3(_x, _align, _offset)
	}
}

var Operators_v128_load32_splat = Operators_v128_load32_splat_3

func Operators_v128_load64_splat_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack64, Pack_ExtSplat})}})
	return __tmp1
}

func Operators_v128_load64_splat_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load64_splat_3(_x, _align, _offset)
	}
}

func Operators_v128_load64_splat_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load64_splat_3(_x, _align, _offset)
	}
}

var Operators_v128_load64_splat = Operators_v128_load64_splat_3

func Operators_v128_load32_zero_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack32, Pack_ExtZero})}})
	return __tmp1
}

func Operators_v128_load32_zero_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load32_zero_3(_x, _align, _offset)
	}
}

func Operators_v128_load32_zero_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load32_zero_3(_x, _align, _offset)
	}
}

var Operators_v128_load32_zero = Operators_v128_load32_zero_3

func Operators_v128_load64_zero_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecLoad_1(struct {
		F0 OAst_idx
		F1 OAst_vec_loadop
	}{_x, OAst_vec_loadop{ty: Types_V128T, align: _align, offset: _offset, pack: Some_1(struct {
		F0 OPack_pack_size
		F1 OPack_vec_extension
	}{Pack_Pack64, Pack_ExtZero})}})
	return __tmp1
}

func Operators_v128_load64_zero_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_load64_zero_3(_x, _align, _offset)
	}
}

func Operators_v128_load64_zero_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_load64_zero_3(_x, _align, _offset)
	}
}

var Operators_v128_load64_zero = Operators_v128_load64_zero_3

func Operators_v128_load8_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecLoadLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack8}, _i})
	return __tmp1
}

func Operators_v128_load8_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load8_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load8_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load8_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_load8_lane = Operators_v128_load8_lane_4

func Operators_v128_load16_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecLoadLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack16}, _i})
	return __tmp1
}

func Operators_v128_load16_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load16_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load16_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load16_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_load16_lane = Operators_v128_load16_lane_4

func Operators_v128_load32_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecLoadLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack32}, _i})
	return __tmp1
}

func Operators_v128_load32_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load32_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load32_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load32_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_load32_lane = Operators_v128_load32_lane_4

func Operators_v128_load64_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecLoadLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack64}, _i})
	return __tmp1
}

func Operators_v128_load64_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load64_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_load64_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_load64_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_load64_lane = Operators_v128_load64_lane_4

func Operators_v128_store_3(_x OAst_idx, _align OInt, _offset OValue_address) OAst_instr_ {
	__tmp1 := Ast_VecStore_1(struct {
		F0 OAst_idx
		F1 OAst_vec_storeop
	}{_x, OAst_vec_storeop{ty: Types_V128T, align: _align, offset: _offset, pack: TODO /* unknown expression type unit */}})
	return __tmp1
}

func Operators_v128_store_2(_x OAst_idx, _align OInt) func(_offset OValue_address) OAst_instr_ {
	return func(_offset OValue_address) OAst_instr_ {
		return Operators_v128_store_3(_x, _align, _offset)
	}
}

func Operators_v128_store_1(_x OAst_idx) func(_align OInt, _offset OValue_address) OAst_instr_ {
	return func(_align OInt, _offset OValue_address) OAst_instr_ {
		return Operators_v128_store_3(_x, _align, _offset)
	}
}

var Operators_v128_store = Operators_v128_store_3

func Operators_v128_store8_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecStoreLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack8}, _i})
	return __tmp1
}

func Operators_v128_store8_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store8_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store8_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store8_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_store8_lane = Operators_v128_store8_lane_4

func Operators_v128_store16_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecStoreLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack16}, _i})
	return __tmp1
}

func Operators_v128_store16_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store16_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store16_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store16_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_store16_lane = Operators_v128_store16_lane_4

func Operators_v128_store32_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecStoreLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack32}, _i})
	return __tmp1
}

func Operators_v128_store32_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store32_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store32_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store32_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_store32_lane = Operators_v128_store32_lane_4

func Operators_v128_store64_lane_4(_x OAst_idx, _align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	__tmp1 := Ast_VecStoreLane_1(struct {
		F0 OAst_idx
		F1 OAst_vec_laneop
		F2 OInt
	}{_x, OAst_vec_laneop{ty: Types_V128T, align: _align, offset: _offset, pack: Pack_Pack64}, _i})
	return __tmp1
}

func Operators_v128_store64_lane_3(_x OAst_idx, _align OInt, _offset OValue_address) func(_i OInt) OAst_instr_ {
	return func(_i OInt) OAst_instr_ {
		return Operators_v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store64_lane_2(_x OAst_idx, _align OInt) func(_offset OValue_address, _i OInt) OAst_instr_ {
	return func(_offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

func Operators_v128_store64_lane_1(_x OAst_idx) func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
	return func(_align OInt, _offset OValue_address, _i OInt) OAst_instr_ {
		return Operators_v128_store64_lane_4(_x, _align, _offset, _i)
	}
}

var Operators_v128_store64_lane = Operators_v128_store64_lane_4

func Operators_memory_size_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_MemorySize_1(_x)
	return __tmp1
}

var Operators_memory_size = Operators_memory_size_1

func Operators_memory_grow_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_MemoryGrow_1(_x)
	return __tmp1
}

var Operators_memory_grow = Operators_memory_grow_1

func Operators_memory_fill_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_MemoryFill_1(_x)
	return __tmp1
}

var Operators_memory_fill = Operators_memory_fill_1

func Operators_memory_copy_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_MemoryCopy_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_memory_copy_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_memory_copy_2(_x, _y)
	}
}

var Operators_memory_copy = Operators_memory_copy_2

func Operators_memory_init_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_MemoryInit_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_memory_init_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_memory_init_2(_x, _y)
	}
}

var Operators_memory_init = Operators_memory_init_2

func Operators_data_drop_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_DataDrop_1(_x)
	return __tmp1
}

var Operators_data_drop = Operators_data_drop_1

var Operators_ref_is_null = Ast_RefIsNull
var Operators_ref_as_non_null = Ast_RefAsNonNull

func Operators_ref_test_1(_t OTypes_ref_type) OAst_instr_ {
	__tmp1 := Ast_RefTest_1(_t)
	return __tmp1
}

var Operators_ref_test = Operators_ref_test_1

func Operators_ref_cast_1(_t OTypes_ref_type) OAst_instr_ {
	__tmp1 := Ast_RefCast_1(_t)
	return __tmp1
}

var Operators_ref_cast = Operators_ref_cast_1

var Operators_ref_eq = Ast_RefEq
var Operators_ref_i31 = Ast_RefI31
var Operators_i31_get_u = Ast_I31Get_1(Pack_ZX)
var Operators_i31_get_s = Ast_I31Get_1(Pack_SX)

func Operators_struct_new_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructNew_1(struct {
		F0 OAst_idx
		F1 OAst_initop
	}{_x, Ast_Explicit})
	return __tmp1
}

var Operators_struct_new = Operators_struct_new_1

func Operators_struct_new_default_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructNew_1(struct {
		F0 OAst_idx
		F1 OAst_initop
	}{_x, Ast_Implicit})
	return __tmp1
}

var Operators_struct_new_default = Operators_struct_new_default_1

func Operators_struct_get_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructGet_1(struct {
		F0 OAst_idx
		F1 OAst_idx
		F2 *OPack_extension
	}{_x, _y, nil})
	return __tmp1
}

func Operators_struct_get_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_struct_get_2(_x, _y)
	}
}

var Operators_struct_get = Operators_struct_get_2

func Operators_struct_get_u_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructGet_1(struct {
		F0 OAst_idx
		F1 OAst_idx
		F2 *OPack_extension
	}{_x, _y, Some_1(Pack_ZX)})
	return __tmp1
}

func Operators_struct_get_u_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_struct_get_u_2(_x, _y)
	}
}

var Operators_struct_get_u = Operators_struct_get_u_2

func Operators_struct_get_s_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructGet_1(struct {
		F0 OAst_idx
		F1 OAst_idx
		F2 *OPack_extension
	}{_x, _y, Some_1(Pack_SX)})
	return __tmp1
}

func Operators_struct_get_s_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_struct_get_s_2(_x, _y)
	}
}

var Operators_struct_get_s = Operators_struct_get_s_2

func Operators_struct_set_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_StructSet_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_struct_set_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_struct_set_2(_x, _y)
	}
}

var Operators_struct_set = Operators_struct_set_2

func Operators_array_new_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayNew_1(struct {
		F0 OAst_idx
		F1 OAst_initop
	}{_x, Ast_Explicit})
	return __tmp1
}

var Operators_array_new = Operators_array_new_1

func Operators_array_new_default_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayNew_1(struct {
		F0 OAst_idx
		F1 OAst_initop
	}{_x, Ast_Implicit})
	return __tmp1
}

var Operators_array_new_default = Operators_array_new_default_1

func Operators_array_new_fixed_2(_x OAst_idx, _n OTypes_type_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayNewFixed_1(struct {
		F0 OAst_idx
		F1 OTypes_type_idx
	}{_x, _n})
	return __tmp1
}

func Operators_array_new_fixed_1(_x OAst_idx) func(_n OTypes_type_idx) OAst_instr_ {
	return func(_n OTypes_type_idx) OAst_instr_ {
		return Operators_array_new_fixed_2(_x, _n)
	}
}

var Operators_array_new_fixed = Operators_array_new_fixed_2

func Operators_array_new_elem_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayNewElem_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_array_new_elem_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_array_new_elem_2(_x, _y)
	}
}

var Operators_array_new_elem = Operators_array_new_elem_2

func Operators_array_new_data_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayNewData_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_array_new_data_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_array_new_data_2(_x, _y)
	}
}

var Operators_array_new_data = Operators_array_new_data_2

func Operators_array_get_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayGet_1(struct {
		F0 OAst_idx
		F1 *OPack_extension
	}{_x, nil})
	return __tmp1
}

var Operators_array_get = Operators_array_get_1

func Operators_array_get_u_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayGet_1(struct {
		F0 OAst_idx
		F1 *OPack_extension
	}{_x, Some_1(Pack_ZX)})
	return __tmp1
}

var Operators_array_get_u = Operators_array_get_u_1

func Operators_array_get_s_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayGet_1(struct {
		F0 OAst_idx
		F1 *OPack_extension
	}{_x, Some_1(Pack_SX)})
	return __tmp1
}

var Operators_array_get_s = Operators_array_get_s_1

func Operators_array_set_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArraySet_1(_x)
	return __tmp1
}

var Operators_array_set = Operators_array_set_1

var Operators_array_len = Ast_ArrayLen

func Operators_array_copy_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayCopy_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_array_copy_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_array_copy_2(_x, _y)
	}
}

var Operators_array_copy = Operators_array_copy_2

func Operators_array_fill_1(_x OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayFill_1(_x)
	return __tmp1
}

var Operators_array_fill = Operators_array_fill_1

func Operators_array_init_data_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayInitData_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_array_init_data_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_array_init_data_2(_x, _y)
	}
}

var Operators_array_init_data = Operators_array_init_data_2

func Operators_array_init_elem_2(_x OAst_idx, _y OAst_idx) OAst_instr_ {
	__tmp1 := Ast_ArrayInitElem_1(struct {
		F0 OAst_idx
		F1 OAst_idx
	}{_x, _y})
	return __tmp1
}

func Operators_array_init_elem_1(_x OAst_idx) func(_y OAst_idx) OAst_instr_ {
	return func(_y OAst_idx) OAst_instr_ {
		return Operators_array_init_elem_2(_x, _y)
	}
}

var Operators_array_init_elem = Operators_array_init_elem_2

var Operators_any_convert_extern = Ast_ExternConvert_1(Ast_Internalize)
var Operators_extern_convert_any = Ast_ExternConvert_1(Ast_Externalize)
var Operators_i32_clz = Ast_Unary_1(Value_I32_1( /*I32Op.*/ _Clz))
var Operators_i32_ctz = Ast_Unary_1(Value_I32_1( /*I32Op.*/ _Ctz))
var Operators_i32_popcnt = Ast_Unary_1(Value_I32_1( /*I32Op.*/ _Popcnt))
var Operators_i64_clz = Ast_Unary_1(Value_I64_1( /*I64Op.*/ _Clz))
var Operators_i64_ctz = Ast_Unary_1(Value_I64_1( /*I64Op.*/ _Ctz))
var Operators_i64_popcnt = Ast_Unary_1(Value_I64_1( /*I64Op.*/ _Popcnt))
var Operators_f32_neg = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Neg))
var Operators_f32_abs = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Abs))
var Operators_f32_sqrt = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Sqrt))
var Operators_f32_ceil = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Ceil))
var Operators_f32_floor = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Floor))
var Operators_f32_trunc = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Trunc))
var Operators_f32_nearest = Ast_Unary_1(Value_F32_1( /*F32Op.*/ _Nearest))
var Operators_f64_neg = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Neg))
var Operators_f64_abs = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Abs))
var Operators_f64_sqrt = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Sqrt))
var Operators_f64_ceil = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Ceil))
var Operators_f64_floor = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Floor))
var Operators_f64_trunc = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Trunc))
var Operators_f64_nearest = Ast_Unary_1(Value_F64_1( /*F64Op.*/ _Nearest))
var Operators_i32_add = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Add))
var Operators_i32_sub = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Sub))
var Operators_i32_mul = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Mul))
var Operators_i32_div_s = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _DivS))
var Operators_i32_div_u = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _DivU))
var Operators_i32_rem_s = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _RemS))
var Operators_i32_rem_u = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _RemU))
var Operators_i32_and = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _And))
var Operators_i32_or = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Or))
var Operators_i32_xor = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Xor))
var Operators_i32_shl = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Shl))
var Operators_i32_shr_s = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _ShrS))
var Operators_i32_shr_u = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _ShrU))
var Operators_i32_rotl = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Rotl))
var Operators_i32_rotr = Ast_Binary_1(Value_I32_1( /*I32Op.*/ _Rotr))
var Operators_i64_add = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Add))
var Operators_i64_sub = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Sub))
var Operators_i64_mul = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Mul))
var Operators_i64_div_s = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _DivS))
var Operators_i64_div_u = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _DivU))
var Operators_i64_rem_s = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _RemS))
var Operators_i64_rem_u = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _RemU))
var Operators_i64_and = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _And))
var Operators_i64_or = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Or))
var Operators_i64_xor = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Xor))
var Operators_i64_shl = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Shl))
var Operators_i64_shr_s = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _ShrS))
var Operators_i64_shr_u = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _ShrU))
var Operators_i64_rotl = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Rotl))
var Operators_i64_rotr = Ast_Binary_1(Value_I64_1( /*I64Op.*/ _Rotr))
var Operators_f32_add = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Add))
var Operators_f32_sub = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Sub))
var Operators_f32_mul = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Mul))
var Operators_f32_div = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Div))
var Operators_f32_min = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Min))
var Operators_f32_max = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _Max))
var Operators_f32_copysign = Ast_Binary_1(Value_F32_1( /*F32Op.*/ _CopySign))
var Operators_f64_add = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Add))
var Operators_f64_sub = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Sub))
var Operators_f64_mul = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Mul))
var Operators_f64_div = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Div))
var Operators_f64_min = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Min))
var Operators_f64_max = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _Max))
var Operators_f64_copysign = Ast_Binary_1(Value_F64_1( /*F64Op.*/ _CopySign))
var Operators_i32_eqz = Ast_Test_1(Value_I32_1( /*I32Op.*/ _Eqz))
var Operators_i64_eqz = Ast_Test_1(Value_I64_1( /*I64Op.*/ _Eqz))
var Operators_i32_eq = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _Eq))
var Operators_i32_ne = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _Ne))
var Operators_i32_lt_s = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _LtS))
var Operators_i32_lt_u = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _LtU))
var Operators_i32_le_s = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _LeS))
var Operators_i32_le_u = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _LeU))
var Operators_i32_gt_s = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _GtS))
var Operators_i32_gt_u = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _GtU))
var Operators_i32_ge_s = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _GeS))
var Operators_i32_ge_u = Ast_Compare_1(Value_I32_1( /*I32Op.*/ _GeU))
var Operators_i64_eq = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _Eq))
var Operators_i64_ne = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _Ne))
var Operators_i64_lt_s = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _LtS))
var Operators_i64_lt_u = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _LtU))
var Operators_i64_le_s = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _LeS))
var Operators_i64_le_u = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _LeU))
var Operators_i64_gt_s = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _GtS))
var Operators_i64_gt_u = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _GtU))
var Operators_i64_ge_s = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _GeS))
var Operators_i64_ge_u = Ast_Compare_1(Value_I64_1( /*I64Op.*/ _GeU))
var Operators_f32_eq = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Eq))
var Operators_f32_ne = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Ne))
var Operators_f32_lt = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Lt))
var Operators_f32_le = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Le))
var Operators_f32_gt = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Gt))
var Operators_f32_ge = Ast_Compare_1(Value_F32_1( /*F32Op.*/ _Ge))
var Operators_f64_eq = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Eq))
var Operators_f64_ne = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Ne))
var Operators_f64_lt = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Lt))
var Operators_f64_le = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Le))
var Operators_f64_gt = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Gt))
var Operators_f64_ge = Ast_Compare_1(Value_F64_1( /*F64Op.*/ _Ge))
var Operators_i32_extend8_s = Ast_Unary_1(Value_I32_1(I32Op_ExtendS_1(Pack_Pack8)))
var Operators_i32_extend16_s = Ast_Unary_1(Value_I32_1(I32Op_ExtendS_1(Pack_Pack16)))
var Operators_i64_extend8_s = Ast_Unary_1(Value_I64_1(I64Op_ExtendS_1(Pack_Pack8)))
var Operators_i64_extend16_s = Ast_Unary_1(Value_I64_1(I64Op_ExtendS_1(Pack_Pack16)))
var Operators_i64_extend32_s = Ast_Unary_1(Value_I64_1(I64Op_ExtendS_1(Pack_Pack32)))
var Operators_i32_wrap_i64 = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _WrapI64))
var Operators_i32_trunc_f32_s = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSF32))
var Operators_i32_trunc_f32_u = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncUF32))
var Operators_i32_trunc_f64_s = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSF64))
var Operators_i32_trunc_f64_u = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncUF64))
var Operators_i32_trunc_sat_f32_s = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSatSF32))
var Operators_i32_trunc_sat_f32_u = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSatUF32))
var Operators_i32_trunc_sat_f64_s = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSatSF64))
var Operators_i32_trunc_sat_f64_u = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _TruncSatUF64))
var Operators_i64_extend_i32_s = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _ExtendSI32))
var Operators_i64_extend_i32_u = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _ExtendUI32))
var Operators_i64_trunc_f32_s = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSF32))
var Operators_i64_trunc_f32_u = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncUF32))
var Operators_i64_trunc_f64_s = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSF64))
var Operators_i64_trunc_f64_u = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncUF64))
var Operators_f32_convert_i32_s = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _ConvertSI32))
var Operators_f32_convert_i32_u = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _ConvertUI32))
var Operators_f32_convert_i64_s = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _ConvertSI64))
var Operators_f32_convert_i64_u = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _ConvertUI64))
var Operators_i64_trunc_sat_f32_s = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSatSF32))
var Operators_i64_trunc_sat_f32_u = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSatUF32))
var Operators_i64_trunc_sat_f64_s = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSatSF64))
var Operators_i64_trunc_sat_f64_u = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _TruncSatUF64))
var Operators_f32_demote_f64 = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _DemoteF64))
var Operators_f64_convert_i32_s = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _ConvertSI32))
var Operators_f64_convert_i32_u = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _ConvertUI32))
var Operators_f64_convert_i64_s = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _ConvertSI64))
var Operators_f64_convert_i64_u = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _ConvertUI64))
var Operators_f64_promote_f32 = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _PromoteF32))
var Operators_i32_reinterpret_f32 = Ast_Convert_1(Value_I32_1( /*I32Op.*/ _ReinterpretFloat))
var Operators_i64_reinterpret_f64 = Ast_Convert_1(Value_I64_1( /*I64Op.*/ _ReinterpretFloat))
var Operators_f32_reinterpret_i32 = Ast_Convert_1(Value_F32_1( /*F32Op.*/ _ReinterpretInt))
var Operators_f64_reinterpret_i64 = Ast_Convert_1(Value_F64_1( /*F64Op.*/ _ReinterpretInt))
var Operators_v128_not = Ast_VecUnaryBits_1(Value_V128_1( /*V128Op.*/ _Not))
var Operators_v128_and = Ast_VecBinaryBits_1(Value_V128_1( /*V128Op.*/ _And))
var Operators_v128_andnot = Ast_VecBinaryBits_1(Value_V128_1( /*V128Op.*/ _AndNot))
var Operators_v128_or = Ast_VecBinaryBits_1(Value_V128_1( /*V128Op.*/ _Or))
var Operators_v128_xor = Ast_VecBinaryBits_1(Value_V128_1( /*V128Op.*/ _Xor))
var Operators_v128_bitselect = Ast_VecTernaryBits_1(Value_V128_1( /*V128Op.*/ _Bitselect))
var Operators_v128_any_true = Ast_VecTestBits_1(Value_V128_1( /*V128Op.*/ _AnyTrue))
var Operators_i8x16_swizzle = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Swizzle)))

func Operators_i8x16_shuffle_1(_is []OInt) OAst_instr_ {
	__tmp1 := Ast_VecBinary_1(Value_V128_1(I8x16_1(V128Op_Shuffle_1(_is))))
	return __tmp1
}

var Operators_i8x16_shuffle = Operators_i8x16_shuffle_1

var Operators_i8x16_splat = Ast_VecSplat_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Splat)))

func Operators_i8x16_extract_lane_s_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I8x16_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, Pack_SX}))))
	return __tmp1
}

var Operators_i8x16_extract_lane_s = Operators_i8x16_extract_lane_s_1

func Operators_i8x16_extract_lane_u_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I8x16_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, Pack_ZX}))))
	return __tmp1
}

var Operators_i8x16_extract_lane_u = Operators_i8x16_extract_lane_u_1

func Operators_i8x16_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(I8x16_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_i8x16_replace_lane = Operators_i8x16_replace_lane_1

var Operators_i8x16_eq = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Eq)))
var Operators_i8x16_ne = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Ne)))
var Operators_i8x16_lt_s = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _LtS)))
var Operators_i8x16_lt_u = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _LtU)))
var Operators_i8x16_le_s = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _LeS)))
var Operators_i8x16_le_u = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _LeU)))
var Operators_i8x16_gt_s = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _GtS)))
var Operators_i8x16_gt_u = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _GtU)))
var Operators_i8x16_ge_s = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _GeS)))
var Operators_i8x16_ge_u = Ast_VecCompare_1(Value_V128_1(I8x16_1( /*V128Op.*/ _GeU)))
var Operators_i8x16_neg = Ast_VecUnary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Neg)))
var Operators_i8x16_bitmask = Ast_VecBitmask_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Bitmask)))
var Operators_i8x16_all_true = Ast_VecTest_1(Value_V128_1(I8x16_1( /*V128Op.*/ _AllTrue)))
var Operators_i8x16_narrow_i16x8_s = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _NarrowS)))
var Operators_i8x16_narrow_i16x8_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _NarrowU)))
var Operators_i16x8_extend_low_i8x16_s = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtendLowS)))
var Operators_i16x8_extend_high_i8x16_s = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtendHighS)))
var Operators_i16x8_extend_low_i8x16_u = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtendLowU)))
var Operators_i16x8_extend_high_i8x16_u = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtendHighU)))
var Operators_i8x16_shl = Ast_VecShift_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Shl)))
var Operators_i8x16_shr_s = Ast_VecShift_1(Value_V128_1(I8x16_1( /*V128Op.*/ _ShrS)))
var Operators_i8x16_shr_u = Ast_VecShift_1(Value_V128_1(I8x16_1( /*V128Op.*/ _ShrU)))
var Operators_i8x16_add = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Add)))
var Operators_i8x16_add_sat_s = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _AddSatS)))
var Operators_i8x16_add_sat_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _AddSatU)))
var Operators_i8x16_sub = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Sub)))
var Operators_i8x16_sub_sat_s = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _SubSatS)))
var Operators_i8x16_sub_sat_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _SubSatU)))
var Operators_i8x16_abs = Ast_VecUnary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Abs)))
var Operators_i8x16_popcnt = Ast_VecUnary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _Popcnt)))
var Operators_i8x16_min_s = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _MinS)))
var Operators_i8x16_min_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _MinU)))
var Operators_i8x16_max_s = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _MaxS)))
var Operators_i8x16_max_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _MaxU)))
var Operators_i8x16_avgr_u = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _AvgrU)))
var Operators_i16x8_splat = Ast_VecSplat_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Splat)))

func Operators_i16x8_extract_lane_s_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I16x8_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, Pack_SX}))))
	return __tmp1
}

var Operators_i16x8_extract_lane_s = Operators_i16x8_extract_lane_s_1

func Operators_i16x8_extract_lane_u_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I16x8_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, Pack_ZX}))))
	return __tmp1
}

var Operators_i16x8_extract_lane_u = Operators_i16x8_extract_lane_u_1

func Operators_i16x8_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(I16x8_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_i16x8_replace_lane = Operators_i16x8_replace_lane_1

var Operators_i16x8_eq = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Eq)))
var Operators_i16x8_ne = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Ne)))
var Operators_i16x8_lt_s = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _LtS)))
var Operators_i16x8_lt_u = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _LtU)))
var Operators_i16x8_le_s = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _LeS)))
var Operators_i16x8_le_u = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _LeU)))
var Operators_i16x8_gt_s = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _GtS)))
var Operators_i16x8_gt_u = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _GtU)))
var Operators_i16x8_ge_s = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _GeS)))
var Operators_i16x8_ge_u = Ast_VecCompare_1(Value_V128_1(I16x8_1( /*V128Op.*/ _GeU)))
var Operators_i16x8_neg = Ast_VecUnary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Neg)))
var Operators_i16x8_bitmask = Ast_VecBitmask_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Bitmask)))
var Operators_i16x8_all_true = Ast_VecTest_1(Value_V128_1(I16x8_1( /*V128Op.*/ _AllTrue)))
var Operators_i16x8_narrow_i32x4_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _NarrowS)))
var Operators_i16x8_narrow_i32x4_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _NarrowU)))
var Operators_i16x8_shl = Ast_VecShift_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Shl)))
var Operators_i16x8_shr_s = Ast_VecShift_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ShrS)))
var Operators_i16x8_shr_u = Ast_VecShift_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ShrU)))
var Operators_i16x8_add = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Add)))
var Operators_i16x8_add_sat_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _AddSatS)))
var Operators_i16x8_add_sat_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _AddSatU)))
var Operators_i16x8_sub = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Sub)))
var Operators_i16x8_sub_sat_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _SubSatS)))
var Operators_i16x8_sub_sat_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _SubSatU)))
var Operators_i16x8_mul = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Mul)))
var Operators_i16x8_abs = Ast_VecUnary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Abs)))
var Operators_i16x8_min_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _MinS)))
var Operators_i16x8_min_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _MinU)))
var Operators_i16x8_max_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _MaxS)))
var Operators_i16x8_max_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _MaxU)))
var Operators_i16x8_avgr_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _AvgrU)))
var Operators_i16x8_extmul_low_i8x16_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtMulLowS)))
var Operators_i16x8_extmul_high_i8x16_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtMulHighS)))
var Operators_i16x8_extmul_low_i8x16_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtMulLowU)))
var Operators_i16x8_extmul_high_i8x16_u = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtMulHighU)))
var Operators_i16x8_q15mulr_sat_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _Q15MulRSatS)))
var Operators_i16x8_extadd_pairwise_i8x16_s = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtAddPairwiseS)))
var Operators_i16x8_extadd_pairwise_i8x16_u = Ast_VecConvert_1(Value_V128_1(I16x8_1( /*V128Op.*/ _ExtAddPairwiseU)))
var Operators_i32x4_splat = Ast_VecSplat_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Splat)))

func Operators_i32x4_extract_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I32x4_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_i32x4_extract_lane = Operators_i32x4_extract_lane_1

func Operators_i32x4_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(I32x4_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_i32x4_replace_lane = Operators_i32x4_replace_lane_1

var Operators_i32x4_eq = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Eq)))
var Operators_i32x4_ne = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Ne)))
var Operators_i32x4_lt_s = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _LtS)))
var Operators_i32x4_lt_u = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _LtU)))
var Operators_i32x4_le_s = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _LeS)))
var Operators_i32x4_le_u = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _LeU)))
var Operators_i32x4_gt_s = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _GtS)))
var Operators_i32x4_gt_u = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _GtU)))
var Operators_i32x4_ge_s = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _GeS)))
var Operators_i32x4_ge_u = Ast_VecCompare_1(Value_V128_1(I32x4_1( /*V128Op.*/ _GeU)))
var Operators_i32x4_abs = Ast_VecUnary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Abs)))
var Operators_i32x4_neg = Ast_VecUnary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Neg)))
var Operators_i32x4_bitmask = Ast_VecBitmask_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Bitmask)))
var Operators_i32x4_all_true = Ast_VecTest_1(Value_V128_1(I32x4_1( /*V128Op.*/ _AllTrue)))
var Operators_i32x4_extend_low_i16x8_s = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtendLowS)))
var Operators_i32x4_extend_high_i16x8_s = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtendHighS)))
var Operators_i32x4_extend_low_i16x8_u = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtendLowU)))
var Operators_i32x4_extend_high_i16x8_u = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtendHighU)))
var Operators_i32x4_shl = Ast_VecShift_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Shl)))
var Operators_i32x4_shr_s = Ast_VecShift_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ShrS)))
var Operators_i32x4_shr_u = Ast_VecShift_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ShrU)))
var Operators_i32x4_add = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Add)))
var Operators_i32x4_sub = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Sub)))
var Operators_i32x4_min_s = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _MinS)))
var Operators_i32x4_min_u = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _MinU)))
var Operators_i32x4_max_s = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _MaxS)))
var Operators_i32x4_max_u = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _MaxU)))
var Operators_i32x4_mul = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _Mul)))
var Operators_i32x4_dot_i16x8_s = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _DotS)))
var Operators_i32x4_trunc_sat_f32x4_s = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _TruncSatSF32x4)))
var Operators_i32x4_trunc_sat_f32x4_u = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _TruncSatUF32x4)))
var Operators_i32x4_trunc_sat_f64x2_s_zero = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _TruncSatSZeroF64x2)))
var Operators_i32x4_trunc_sat_f64x2_u_zero = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _TruncSatUZeroF64x2)))
var Operators_i32x4_extmul_low_i16x8_s = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtMulLowS)))
var Operators_i32x4_extmul_high_i16x8_s = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtMulHighS)))
var Operators_i32x4_extmul_low_i16x8_u = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtMulLowU)))
var Operators_i32x4_extmul_high_i16x8_u = Ast_VecBinary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtMulHighU)))
var Operators_i32x4_extadd_pairwise_i16x8_s = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtAddPairwiseS)))
var Operators_i32x4_extadd_pairwise_i16x8_u = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _ExtAddPairwiseU)))
var Operators_i64x2_splat = Ast_VecSplat_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Splat)))

func Operators_i64x2_extract_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(I64x2_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_i64x2_extract_lane = Operators_i64x2_extract_lane_1

func Operators_i64x2_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(I64x2_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_i64x2_replace_lane = Operators_i64x2_replace_lane_1

var Operators_i64x2_extend_low_i32x4_s = Ast_VecConvert_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtendLowS)))
var Operators_i64x2_extend_high_i32x4_s = Ast_VecConvert_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtendHighS)))
var Operators_i64x2_extend_low_i32x4_u = Ast_VecConvert_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtendLowU)))
var Operators_i64x2_extend_high_i32x4_u = Ast_VecConvert_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtendHighU)))
var Operators_i64x2_eq = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Eq)))
var Operators_i64x2_ne = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Ne)))
var Operators_i64x2_lt_s = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _LtS)))
var Operators_i64x2_le_s = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _LeS)))
var Operators_i64x2_gt_s = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _GtS)))
var Operators_i64x2_ge_s = Ast_VecCompare_1(Value_V128_1(I64x2_1( /*V128Op.*/ _GeS)))
var Operators_i64x2_abs = Ast_VecUnary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Abs)))
var Operators_i64x2_neg = Ast_VecUnary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Neg)))
var Operators_i64x2_bitmask = Ast_VecBitmask_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Bitmask)))
var Operators_i64x2_all_true = Ast_VecTest_1(Value_V128_1(I64x2_1( /*V128Op.*/ _AllTrue)))
var Operators_i64x2_add = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Add)))
var Operators_i64x2_sub = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Sub)))
var Operators_i64x2_mul = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Mul)))
var Operators_i64x2_shl = Ast_VecShift_1(Value_V128_1(I64x2_1( /*V128Op.*/ _Shl)))
var Operators_i64x2_shr_s = Ast_VecShift_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ShrS)))
var Operators_i64x2_shr_u = Ast_VecShift_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ShrU)))
var Operators_i64x2_extmul_low_i32x4_s = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtMulLowS)))
var Operators_i64x2_extmul_high_i32x4_s = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtMulHighS)))
var Operators_i64x2_extmul_low_i32x4_u = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtMulLowU)))
var Operators_i64x2_extmul_high_i32x4_u = Ast_VecBinary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _ExtMulHighU)))
var Operators_f32x4_splat = Ast_VecSplat_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Splat)))

func Operators_f32x4_extract_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(F32x4_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_f32x4_extract_lane = Operators_f32x4_extract_lane_1

func Operators_f32x4_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(F32x4_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_f32x4_replace_lane = Operators_f32x4_replace_lane_1

var Operators_f32x4_eq = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Eq)))
var Operators_f32x4_ne = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Ne)))
var Operators_f32x4_lt = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Lt)))
var Operators_f32x4_le = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Le)))
var Operators_f32x4_gt = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Gt)))
var Operators_f32x4_ge = Ast_VecCompare_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Ge)))
var Operators_f32x4_abs = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Abs)))
var Operators_f32x4_neg = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Neg)))
var Operators_f32x4_sqrt = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Sqrt)))
var Operators_f32x4_ceil = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Ceil)))
var Operators_f32x4_floor = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Floor)))
var Operators_f32x4_trunc = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Trunc)))
var Operators_f32x4_nearest = Ast_VecUnary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Nearest)))
var Operators_f32x4_add = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Add)))
var Operators_f32x4_sub = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Sub)))
var Operators_f32x4_mul = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Mul)))
var Operators_f32x4_div = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Div)))
var Operators_f32x4_min = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Min)))
var Operators_f32x4_max = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Max)))
var Operators_f32x4_pmin = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Pmin)))
var Operators_f32x4_pmax = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _Pmax)))
var Operators_f32x4_demote_f64x2_zero = Ast_VecConvert_1(Value_V128_1(F32x4_1( /*V128Op.*/ _DemoteZeroF64x2)))
var Operators_f32x4_convert_i32x4_s = Ast_VecConvert_1(Value_V128_1(F32x4_1( /*V128Op.*/ _ConvertSI32x4)))
var Operators_f32x4_convert_i32x4_u = Ast_VecConvert_1(Value_V128_1(F32x4_1( /*V128Op.*/ _ConvertUI32x4)))
var Operators_f64x2_splat = Ast_VecSplat_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Splat)))

func Operators_f64x2_extract_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecExtract_1(Value_V128_1(F64x2_1(V128Op_Extract_1(struct {
		F0 OInt
		F1 O_a
	}{_i, TODO /* unknown expression type unit */}))))
	return __tmp1
}

var Operators_f64x2_extract_lane = Operators_f64x2_extract_lane_1

func Operators_f64x2_replace_lane_1(_i OInt) OAst_instr_ {
	__tmp1 := Ast_VecReplace_1(Value_V128_1(F64x2_1(V128Op_Replace_1(_i))))
	return __tmp1
}

var Operators_f64x2_replace_lane = Operators_f64x2_replace_lane_1

var Operators_f64x2_eq = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Eq)))
var Operators_f64x2_ne = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Ne)))
var Operators_f64x2_lt = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Lt)))
var Operators_f64x2_le = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Le)))
var Operators_f64x2_gt = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Gt)))
var Operators_f64x2_ge = Ast_VecCompare_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Ge)))
var Operators_f64x2_neg = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Neg)))
var Operators_f64x2_sqrt = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Sqrt)))
var Operators_f64x2_ceil = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Ceil)))
var Operators_f64x2_floor = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Floor)))
var Operators_f64x2_trunc = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Trunc)))
var Operators_f64x2_nearest = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Nearest)))
var Operators_f64x2_add = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Add)))
var Operators_f64x2_sub = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Sub)))
var Operators_f64x2_mul = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Mul)))
var Operators_f64x2_div = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Div)))
var Operators_f64x2_min = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Min)))
var Operators_f64x2_max = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Max)))
var Operators_f64x2_abs = Ast_VecUnary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Abs)))
var Operators_f64x2_pmin = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Pmin)))
var Operators_f64x2_pmax = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _Pmax)))
var Operators_f64x2_promote_low_f32x4 = Ast_VecConvert_1(Value_V128_1(F64x2_1( /*V128Op.*/ _PromoteLowF32x4)))
var Operators_f64x2_convert_low_i32x4_s = Ast_VecConvert_1(Value_V128_1(F64x2_1( /*V128Op.*/ _ConvertSI32x4)))
var Operators_f64x2_convert_low_i32x4_u = Ast_VecConvert_1(Value_V128_1(F64x2_1( /*V128Op.*/ _ConvertUI32x4)))
var Operators_i8x16_relaxed_swizzle = Ast_VecBinary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _RelaxedSwizzle)))
var Operators_i8x16_relaxed_laneselect = Ast_VecTernary_1(Value_V128_1(I8x16_1( /*V128Op.*/ _RelaxedLaneselect)))
var Operators_i16x8_relaxed_q15mulr_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _RelaxedQ15MulRS)))
var Operators_i16x8_relaxed_laneselect = Ast_VecTernary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _RelaxedLaneselect)))
var Operators_i32x4_relaxed_trunc_f32x4_s = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedTruncSF32x4)))
var Operators_i32x4_relaxed_trunc_f32x4_u = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedTruncUF32x4)))
var Operators_i32x4_relaxed_trunc_f64x2_s_zero = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedTruncSZeroF64x2)))
var Operators_i32x4_relaxed_trunc_f64x2_u_zero = Ast_VecConvert_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedTruncUZeroF64x2)))
var Operators_i32x4_relaxed_laneselect = Ast_VecTernary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedLaneselect)))
var Operators_i64x2_relaxed_laneselect = Ast_VecTernary_1(Value_V128_1(I64x2_1( /*V128Op.*/ _RelaxedLaneselect)))
var Operators_f32x4_relaxed_madd = Ast_VecTernary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _RelaxedMadd)))
var Operators_f32x4_relaxed_nmadd = Ast_VecTernary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _RelaxedNmadd)))
var Operators_f32x4_relaxed_min = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _RelaxedMin)))
var Operators_f32x4_relaxed_max = Ast_VecBinary_1(Value_V128_1(F32x4_1( /*V128Op.*/ _RelaxedMax)))
var Operators_f64x2_relaxed_madd = Ast_VecTernary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _RelaxedMadd)))
var Operators_f64x2_relaxed_nmadd = Ast_VecTernary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _RelaxedNmadd)))
var Operators_f64x2_relaxed_min = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _RelaxedMin)))
var Operators_f64x2_relaxed_max = Ast_VecBinary_1(Value_V128_1(F64x2_1( /*V128Op.*/ _RelaxedMax)))
var Operators_i16x8_relaxed_dot_i8x16_i7x16_s = Ast_VecBinary_1(Value_V128_1(I16x8_1( /*V128Op.*/ _RelaxedDot)))
var Operators_i32x4_relaxed_dot_i8x16_i7x16_add_s = Ast_VecTernary_1(Value_V128_1(I32x4_1( /*V128Op.*/ _RelaxedDotAccum)))

type ODecode_stream struct {
	name  string
	bytes string
	pos   ODecode_ref
}

func Decode_bit_2(_i OInt, _n OInt) bool {
	__tmp1 := _operatorNotEq_2(_operatorland_2(_n, _operatorlsl_2(1, _i)), 0)
	return __tmp1
}

func Decode_bit_1(_i OInt) func(_n OInt) bool {
	return func(_n OInt) bool {
		return Decode_bit_2(_i, _n)
	}
}

var Decode_bit = Decode_bit_2

func Decode_byte_1(_s ODecode_stream) OInt {
	__tmp1 := Decode_get_1(_s)
	return __tmp1
}

var Decode_byte = Decode_byte_1

func Decode_word16_1(_s ODecode_stream) OInt {
	__tmp1 := Decode_byte_1(_s)
	_lo := __tmp1
	__tmp4 := Decode_byte_1(_s)
	_hi := __tmp4
	__tmp7 := _operatorPlus_2(_operatorlsl_2(_hi, 8), _lo)
	return __tmp7
}

var Decode_word16 = Decode_word16_1

func Decode_word32_1(_s ODecode_stream) OInt32 {
	__tmp1 := Int32_of_int_1(Decode_word16_1(_s))
	_lo := __tmp1
	__tmp5 := Int32_of_int_1(Decode_word16_1(_s))
	_hi := __tmp5
	__tmp9 := add_2(_lo, shift_left_2(_hi, 16))
	return __tmp9
}

var Decode_word32 = Decode_word32_1

func Decode_word64_1(_s ODecode_stream) OInt64 {
	__tmp1 := I64_convert_extend_i32_u_1(Decode_word32_1(_s))
	_lo := __tmp1
	__tmp5 := I64_convert_extend_i32_u_1(Decode_word32_1(_s))
	_hi := __tmp5
	__tmp9 := add_2(_lo, shift_left_2(_hi, 32))
	return __tmp9
}

var Decode_word64 = Decode_word64_1

func Decode_uN_2(_n OInt, _s ODecode_stream) OInt64 {
	__tmp1 := Decode_require_4(_operatorGt_2(_n, 0), _s, Decode_pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := Decode_byte_1(_s)
	_b := __tmp7
	__tmp10 := Decode_require_4(_operatorOr_2(_operatorGte_2(_n, 7), _operatorLt_2(_operatorland_2(_b, 0x7f), _operatorlsl_2(1, _n))), _s, _operatorMinus_2(Decode_pos_1(_s), 1), "integer too large")
	_ = __tmp10
	__tmp23 := Int64_of_int_1(_operatorland_2(_b, 0x7f))
	_x := __tmp23
	var __tmp27 OInt64
	if _operatorEq_2(_operatorland_2(_b, 0x80), 0) {
		__tmp31 := _x
		__tmp27 = __tmp31
	} else {
		__tmp32 := logor_2(_x, shift_left_2(uN_2(_operatorMinus_2(_n, 7), _s), 7))
		__tmp27 = __tmp32
	}
	return __tmp27

}

func Decode_uN_1(_n OInt) func(_s ODecode_stream) OInt64 {
	return func(_s ODecode_stream) OInt64 {
		return Decode_uN_2(_n, _s)
	}
}

var Decode_uN = Decode_uN_2

func Decode_sN_2(_n OInt, _s ODecode_stream) OInt64 {
	__tmp1 := Decode_require_4(_operatorGt_2(_n, 0), _s, Decode_pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := Decode_byte_1(_s)
	_b := __tmp7
	__tmp10 := _operatorland_2(_operatorlsl_2(-(1), _operatorMinus_2(_n, 1)), 0x7f)
	_mask := __tmp10
	__tmp15 := Decode_require_4(_operatorOr_2(_operatorGte_2(_n, 7), _operatorOr_2(_operatorEq_2(_operatorland_2(_b, _mask), 0), _operatorEq_2(_operatorland_2(_b, _mask), _mask))), _s, _operatorMinus_2(Decode_pos_1(_s), 1), "integer too large")
	_ = __tmp15
	__tmp33 := Int64_of_int_1(_operatorland_2(_b, 0x7f))
	_x := __tmp33
	var __tmp37 OInt64
	if _operatorEq_2(_operatorland_2(_b, 0x80), 0) {
		var __tmp41 OInt64
		if _operatorEq_2(_operatorland_2(_b, 0x40), 0) {
			__tmp45 := _x
			__tmp41 = __tmp45
		} else {
			__tmp46 := logor_2(_x, logxor_2(-(1), 0x7f))
			__tmp41 = __tmp46
		}
		__tmp37 = __tmp41
	} else {
		__tmp49 := logor_2(_x, shift_left_2(sN_2(_operatorMinus_2(_n, 7), _s), 7))
		__tmp37 = __tmp49
	}
	return __tmp37

}

func Decode_sN_1(_n OInt) func(_s ODecode_stream) OInt64 {
	return func(_s ODecode_stream) OInt64 {
		return Decode_sN_2(_n, _s)
	}
}

var Decode_sN = Decode_sN_2

func Decode_u32_1(_s ODecode_stream) OInt32 {
	__tmp1 := Int64_to_int32_1(Decode_uN_2(32, _s))
	return __tmp1
}

var Decode_u32 = Decode_u32_1

func Decode_u64_1(_s ODecode_stream) OInt64 {
	__tmp1 := Decode_uN_2(64, _s)
	return __tmp1
}

var Decode_u64 = Decode_u64_1

func Decode_s7_1(_s ODecode_stream) OInt {
	__tmp1 := Int64_to_int_1(Decode_sN_2(7, _s))
	return __tmp1
}

var Decode_s7 = Decode_s7_1

func Decode_s32_1(_s ODecode_stream) OInt32 {
	__tmp1 := Int64_to_int32_1(Decode_sN_2(32, _s))
	return __tmp1
}

var Decode_s32 = Decode_s32_1

func Decode_s33_1(_s ODecode_stream) OInt32 {
	__tmp1 := I32_convert_wrap_i64_1(Decode_sN_2(33, _s))
	return __tmp1
}

var Decode_s33 = Decode_s33_1

func Decode_s64_1(_s ODecode_stream) OInt64 {
	__tmp1 := Decode_sN_2(64, _s)
	return __tmp1
}

var Decode_s64 = Decode_s64_1

func Decode_f32_1(_s ODecode_stream) OValue_t {
	__tmp1 := F32_of_bits_1(Decode_word32_1(_s))
	return __tmp1
}

var Decode_f32 = Decode_f32_1

func Decode_f64_1(_s ODecode_stream) OValue_t {
	__tmp1 := F64_of_bits_1(Decode_word64_1(_s))
	return __tmp1
}

var Decode_f64 = Decode_f64_1

func Decode_v128_1(_s ODecode_stream) OValue_t {
	__tmp1 := V128_of_bits_1(Decode_get_string_2(16, _s))
	return __tmp1
}

var Decode_v128 = Decode_v128_1

func Decode_len32_1(_s ODecode_stream) OInt {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	__tmp4 := Decode_u32_1(_s)
	_n := __tmp4
	var __tmp7 OInt
	if I32_le_u_2(_n, Int32_of_int_1(_operatorMinus_2(Decode_len_1(_s), _pos))) {
		__tmp15 := Int32_to_int_1(_n)
		__tmp7 = __tmp15
	} else {
		__tmp17 := Decode_error_3(_s, _pos, "length out of bounds")
		__tmp7 = __tmp17
	}
	return __tmp7
}

var Decode_len32 = Decode_len32_1

func Decode_string_1(_s ODecode_stream) string {
	__tmp1 := Decode_len32_1(_s)
	_n := __tmp1
	__tmp4 := Decode_get_string_2(_n, _s)
	return __tmp4
}

var Decode_string = Decode_string_1

func Decode_zero_1(_s ODecode_stream) OUnit {
	__tmp1 := Decode_expect_3(0x00, _s, "zero byte expected")
	return __tmp1
}

var Decode_zero = Decode_zero_1

func Decode_var_1(_s ODecode_stream) OTypes_local_idx {
	__tmp1 := Decode_u32_1(_s)
	return __tmp1
}

var Decode_var = Decode_var_1

func Decode_mutability_1(_s ODecode_stream) OTypes_mut {
	var __tmp1 OTypes_mut
	__tmp2 := Decode_byte_1(_s)
	if __tmp2 == 0 {
		__tmp5 := Types_Cons
		__tmp1 = __tmp5
	} else if __tmp2 == 1 {
		__tmp7 := Types_Var
		__tmp1 = __tmp7
	} else if __ := __tmp2; true {
		_ = __
		__tmp11 := Decode_error_3(_s, _operatorMinus_2(Decode_pos_1(_s), 1), "malformed mutability")
		__tmp1 = __tmp11
	}
	return __tmp1
}

var Decode_mutability = Decode_mutability_1

func Decode_var_type_2(_var func(ODecode_stream) OTypes_local_idx, _s ODecode_stream) OTypes_var {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	var __tmp4 OTypes_var
	__tmp5 := var_1(_s)
	if _i := __tmp5; _operatorGte_2(_i, 0) {
		_ = _i
		__tmp12 := Types_StatX_1(_i)
		__tmp4 = __tmp12
	} else if __ := __tmp5; true {
		_ = __
		__tmp16 := Decode_error_3(_s, _pos, "malformed type index")
		__tmp4 = __tmp16
	}
	return __tmp4
}

func Decode_var_type_1(_var func(ODecode_stream) OTypes_local_idx) func(_s ODecode_stream) OTypes_var {
	return func(_s ODecode_stream) OTypes_var {
		return Decode_var_type_2(_var, _s)
	}
}

var Decode_var_type = Decode_var_type_2

func Decode_num_type_1(_s ODecode_stream) OTypes_num_type {
	var __tmp1 OTypes_num_type
	__tmp2 := Decode_s7_1(_s)
	if __tmp2 == -0x01 {
		__tmp5 := Types_I32T
		__tmp1 = __tmp5
	} else if __tmp2 == -0x02 {
		__tmp7 := Types_I64T
		__tmp1 = __tmp7
	} else if __tmp2 == -0x03 {
		__tmp9 := Types_F32T
		__tmp1 = __tmp9
	} else if __tmp2 == -0x04 {
		__tmp11 := Types_F64T
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp15 := Decode_error_3(_s, _operatorMinus_2(Decode_pos_1(_s), 1), "malformed number type")
		__tmp1 = __tmp15
	}
	return __tmp1
}

var Decode_num_type = Decode_num_type_1

func Decode_vec_type_1(_s ODecode_stream) OTypes_vec_type {
	var __tmp1 OTypes_vec_type
	__tmp2 := Decode_s7_1(_s)
	if __tmp2 == -0x05 {
		__tmp5 := Types_V128T
		__tmp1 = __tmp5
	} else if __ := __tmp2; true {
		_ = __
		__tmp9 := Decode_error_3(_s, _operatorMinus_2(Decode_pos_1(_s), 1), "malformed vector type")
		__tmp1 = __tmp9
	}
	return __tmp1
}

var Decode_vec_type = Decode_vec_type_1

func Decode_heap_type_1(_s ODecode_stream) OTypes_heap_type {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	__tmp4 := Decode_either_2([]func(ODecode_stream) OTypes_heap_type{func(_s ODecode_stream) OTypes_heap_type {
		__tmp5 := Types_VarHT_1(Decode_var_type_2(Decode_s33, _s))
		return __tmp5
	}, func(_s ODecode_stream) OTypes_heap_type {
		var __tmp9 OTypes_heap_type
		__tmp10 := Decode_s7_1(_s)
		if __tmp10 == -0x0c {
			__tmp13 := Types_NoExnHT
			__tmp9 = __tmp13
		} else if __tmp10 == -0x0d {
			__tmp15 := Types_NoFuncHT
			__tmp9 = __tmp15
		} else if __tmp10 == -0x0e {
			__tmp17 := Types_NoExternHT
			__tmp9 = __tmp17
		} else if __tmp10 == -0x0f {
			__tmp19 := Types_NoneHT
			__tmp9 = __tmp19
		} else if __tmp10 == -0x10 {
			__tmp21 := Types_FuncHT
			__tmp9 = __tmp21
		} else if __tmp10 == -0x11 {
			__tmp23 := Types_ExternHT
			__tmp9 = __tmp23
		} else if __tmp10 == -0x12 {
			__tmp25 := Types_AnyHT
			__tmp9 = __tmp25
		} else if __tmp10 == -0x13 {
			__tmp27 := Types_EqHT
			__tmp9 = __tmp27
		} else if __tmp10 == -0x14 {
			__tmp29 := Types_I31HT
			__tmp9 = __tmp29
		} else if __tmp10 == -0x15 {
			__tmp31 := Types_StructHT
			__tmp9 = __tmp31
		} else if __tmp10 == -0x16 {
			__tmp33 := Types_ArrayHT
			__tmp9 = __tmp33
		} else if __tmp10 == -0x17 {
			__tmp35 := Types_ExnHT
			__tmp9 = __tmp35
		} else if __ := __tmp10; true {
			_ = __
			__tmp39 := Decode_error_3(_s, _pos, "malformed heap type")
			__tmp9 = __tmp39
		}
		return __tmp9
	}}, _s)
	return __tmp4
}

var Decode_heap_type = Decode_heap_type_1

func Decode_ref_type_1(_s ODecode_stream) struct {
	F0 OTypes_null
	F1 OTypes_heap_type
} {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	var __tmp4 struct {
		F0 OTypes_null
		F1 OTypes_heap_type
	}
	__tmp5 := Decode_s7_1(_s)
	if __tmp5 == -0x0c {
		__tmp8 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_NoExnHT}
		__tmp4 = __tmp8
	} else if __tmp5 == -0x0d {
		__tmp13 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_NoFuncHT}
		__tmp4 = __tmp13
	} else if __tmp5 == -0x0e {
		__tmp18 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_NoExternHT}
		__tmp4 = __tmp18
	} else if __tmp5 == -0x0f {
		__tmp23 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_NoneHT}
		__tmp4 = __tmp23
	} else if __tmp5 == -0x10 {
		__tmp28 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_FuncHT}
		__tmp4 = __tmp28
	} else if __tmp5 == -0x11 {
		__tmp33 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_ExternHT}
		__tmp4 = __tmp33
	} else if __tmp5 == -0x12 {
		__tmp38 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_AnyHT}
		__tmp4 = __tmp38
	} else if __tmp5 == -0x13 {
		__tmp43 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_EqHT}
		__tmp4 = __tmp43
	} else if __tmp5 == -0x14 {
		__tmp48 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_I31HT}
		__tmp4 = __tmp48
	} else if __tmp5 == -0x15 {
		__tmp53 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_StructHT}
		__tmp4 = __tmp53
	} else if __tmp5 == -0x16 {
		__tmp58 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_ArrayHT}
		__tmp4 = __tmp58
	} else if __tmp5 == -0x17 {
		__tmp63 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Types_ExnHT}
		__tmp4 = __tmp63
	} else if __tmp5 == -0x1c {
		__tmp68 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_NoNull, Decode_heap_type_1(_s)}
		__tmp4 = __tmp68
	} else if __tmp5 == -0x1d {
		__tmp73 := struct {
			F0 OTypes_null
			F1 OTypes_heap_type
		}{Types_Null, Decode_heap_type_1(_s)}
		__tmp4 = __tmp73
	} else if __ := __tmp5; true {
		_ = __
		__tmp80 := Decode_error_3(_s, _pos, "malformed reference type")
		__tmp4 = __tmp80
	}
	return __tmp4
}

var Decode_ref_type = Decode_ref_type_1

func Decode_val_type_1(_s ODecode_stream) OTypes_val_type {
	__tmp1 := Decode_either_2([]func(ODecode_stream) OTypes_val_type{func(_s ODecode_stream) OTypes_val_type {
		__tmp2 := Types_NumT_1(Decode_num_type_1(_s))
		return __tmp2
	}, func(_s ODecode_stream) OTypes_val_type {
		__tmp5 := Types_VecT_1(Decode_vec_type_1(_s))
		return __tmp5
	}, func(_s ODecode_stream) OTypes_val_type {
		__tmp8 := Types_RefT_1(Decode_ref_type_1(_s))
		return __tmp8
	}}, _s)
	return __tmp1
}

var Decode_val_type = Decode_val_type_1

func Decode_result_type_1(_s ODecode_stream) []OTypes_val_type {
	__tmp1 := Decode_vec_2(Decode_val_type, _s)
	return __tmp1
}

var Decode_result_type = Decode_result_type_1

func Decode_pack_type_1(_s ODecode_stream) OPack_pack_size {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	var __tmp4 OPack_pack_size
	__tmp5 := Decode_s7_1(_s)
	if __tmp5 == -0x08 {
		__tmp8 := /*Pack.*/ Pack_Pack8
		__tmp4 = __tmp8
	} else if __tmp5 == -0x09 {
		__tmp10 := /*Pack.*/ Pack_Pack16
		__tmp4 = __tmp10
	} else if __ := __tmp5; true {
		_ = __
		__tmp14 := Decode_error_3(_s, _pos, "malformed storage type")
		__tmp4 = __tmp14
	}
	return __tmp4
}

var Decode_pack_type = Decode_pack_type_1

func Decode_storage_type_1(_s ODecode_stream) OTypes_storage_type {
	__tmp1 := Decode_either_2([]func(ODecode_stream) OTypes_storage_type{func(_s ODecode_stream) OTypes_storage_type {
		__tmp2 := Types_ValStorageT_1(Decode_val_type_1(_s))
		return __tmp2
	}, func(_s ODecode_stream) OTypes_storage_type {
		__tmp5 := Types_PackStorageT_1(Decode_pack_type_1(_s))
		return __tmp5
	}}, _s)
	return __tmp1
}

var Decode_storage_type = Decode_storage_type_1

func Decode_field_type_1(_s ODecode_stream) OTypes_field_type {
	__tmp1 := Decode_storage_type_1(_s)
	_t := __tmp1
	__tmp4 := Decode_mutability_1(_s)
	_mut := __tmp4
	__tmp7 := Types_FieldT_1(struct {
		F0 OTypes_mut
		F1 OTypes_storage_type
	}{_mut, _t})
	return __tmp7
}

var Decode_field_type = Decode_field_type_1

func Decode_struct_type_1(_s ODecode_stream) OTypes_struct_type {
	__tmp1 := Types_StructT_1(Decode_vec_2(Decode_field_type, _s))
	return __tmp1
}

var Decode_struct_type = Decode_struct_type_1

func Decode_array_type_1(_s ODecode_stream) OTypes_array_type {
	__tmp1 := Types_ArrayT_1(Decode_field_type_1(_s))
	return __tmp1
}

var Decode_array_type = Decode_array_type_1

func Decode_func_type_1(_s ODecode_stream) OTypes_func_type {
	__tmp1 := Decode_result_type_1(_s)
	_ts1 := __tmp1
	__tmp4 := Decode_result_type_1(_s)
	_ts2 := __tmp4
	__tmp7 := Types_FuncT_1(struct {
		F0 OTypes_result_type
		F1 OTypes_result_type
	}{_ts1, _ts2})
	return __tmp7
}

var Decode_func_type = Decode_func_type_1

func Decode_str_type_1(_s ODecode_stream) OTypes_str_type {
	var __tmp1 OTypes_str_type
	__tmp2 := Decode_s7_1(_s)
	if __tmp2 == -0x20 {
		__tmp5 := Types_DefFuncT_1(Decode_func_type_1(_s))
		__tmp1 = __tmp5
	} else if __tmp2 == -0x21 {
		__tmp8 := Types_DefStructT_1(Decode_struct_type_1(_s))
		__tmp1 = __tmp8
	} else if __tmp2 == -0x22 {
		__tmp11 := Types_DefArrayT_1(Decode_array_type_1(_s))
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp16 := Decode_error_3(_s, _operatorMinus_2(Decode_pos_1(_s), 1), "malformed definition type")
		__tmp1 = __tmp16
	}
	return __tmp1
}

var Decode_str_type = Decode_str_type_1

func Decode_sub_type_1(_s ODecode_stream) OTypes_sub_type {
	var __tmp1 OTypes_sub_type
	__tmp2 := Decode_peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x30), 0x7f))) {
		__tmp9 := Decode_skip_2(1, _s)
		_ = __tmp9
		__tmp11 := Decode_vec_2(Decode_var_type_1(Decode_u32), _s)
		_xs := __tmp11
		__tmp16 := Types_SubT_1(struct {
			F0 OTypes_final
			F1 []OTypes_heap_type
			F2 OTypes_str_type
		}{Types_NoFinal, List_map_2(func(_x OTypes_var) OTypes_heap_type {
			__tmp21 := Types_VarHT_1(_x)
			return __tmp21
		}, _xs), Decode_str_type_1(_s)})

		__tmp1 = __tmp16
	} else if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x31), 0x7f))) {
		__tmp30 := Decode_skip_2(1, _s)
		_ = __tmp30
		__tmp32 := Decode_vec_2(Decode_var_type_1(Decode_u32), _s)
		_xs := __tmp32
		__tmp37 := Types_SubT_1(struct {
			F0 OTypes_final
			F1 []OTypes_heap_type
			F2 OTypes_str_type
		}{Types_Final, List_map_2(func(_x OTypes_var) OTypes_heap_type {
			__tmp42 := Types_VarHT_1(_x)
			return __tmp42
		}, _xs), Decode_str_type_1(_s)})

		__tmp1 = __tmp37
	} else if __ := __tmp2; true {
		_ = __
		__tmp49 := Types_SubT_1(struct {
			F0 OTypes_final
			F1 []OTypes_heap_type
			F2 OTypes_str_type
		}{Types_Final, []OTypes_heap_type{}, Decode_str_type_1(_s)})
		__tmp1 = __tmp49
	}
	return __tmp1
}

var Decode_sub_type = Decode_sub_type_1

func Decode_rec_type_1(_s ODecode_stream) OTypes_rec_type {
	var __tmp1 OTypes_rec_type
	__tmp2 := Decode_peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _operatorland_2(-(0x32), 0x7f))) {
		__tmp9 := Decode_skip_2(1, _s)
		_ = __tmp9
		__tmp11 := Types_RecT_1(Decode_vec_2(Decode_sub_type, _s))

		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp17 := Types_RecT_1([]OTypes_sub_type{Decode_sub_type_1(_s)})
		__tmp1 = __tmp17
	}
	return __tmp1
}

var Decode_rec_type = Decode_rec_type_1

func Decode_limits_2(_uN func(ODecode_stream) OInt64, _s ODecode_stream) struct {
	F0 OTypes_addr_type
	F1 OTypes_limits
} {
	__tmp1 := Decode_byte_1(_s)
	_flags := __tmp1
	__tmp4 := Decode_require_4(_operatorEq_2(_operatorland_2(_flags, 0xfa), 0), _s, _operatorMinus_2(Decode_pos_1(_s), 1), "malformed limits flags")
	_ = __tmp4
	__tmp12 := _operatorEq_2(_operatorland_2(_flags, 1), 1)
	_has_max := __tmp12
	var __tmp16 OTypes_addr_type
	if _operatorEq_2(_operatorland_2(_flags, 4), 4) {
		__tmp20 := Types_I64AT
		__tmp16 = __tmp20
	} else {
		__tmp22 := Types_I32AT
		__tmp16 = __tmp22
	}
	Source_at := __tmp16
	__tmp25 := uN_1(_s)
	_min := __tmp25
	__tmp28 := Decode_opt_3(_uN, _has_max, _s)
	_max := __tmp28
	return struct {
		F0 OTypes_addr_type
		F1 OTypes_limits
	}{_at, OTypes_limits{min: _min, max: _max}}

}

func Decode_limits_1(_uN func(ODecode_stream) OInt64) func(_s ODecode_stream) struct {
	F0 OTypes_addr_type
	F1 OTypes_limits
} {
	return func(_s ODecode_stream) struct {
		F0 OTypes_addr_type
		F1 OTypes_limits
	} { return Decode_limits_2(_uN, _s) }
}

var Decode_limits = Decode_limits_2

func Decode_table_type_1(_s ODecode_stream) OTypes_table_type {
	__tmp1 := Decode_ref_type_1(_s)
	_t := __tmp1
	__tmp4 := Decode_limits_2(Decode_u64, _s)
	Source_at, _lim := __unpack_Types_addr_type___Types_limits(__tmp4)
	__tmp9 := Types_TableT_1(struct {
		F0 OTypes_addr_type
		F1 OTypes_limits
		F2 OTypes_ref_type
	}{_at, _lim, _t})
	return __tmp9
}

var Decode_table_type = Decode_table_type_1

func Decode_global_type_1(_s ODecode_stream) OTypes_global_type {
	__tmp1 := Decode_val_type_1(_s)
	_t := __tmp1
	__tmp4 := Decode_mutability_1(_s)
	_mut := __tmp4
	__tmp7 := Types_GlobalT_1(struct {
		F0 OTypes_mut
		F1 OTypes_val_type
	}{_mut, _t})
	return __tmp7
}

var Decode_global_type = Decode_global_type_1

func Decode_tag_type_1(_s ODecode_stream) OSource_phrase[OTypes_local_idx] {
	__tmp1 := Decode_zero_1(_s)
	_ = __tmp1
	__tmp3 := Source_at_2(Decode_var, _s)
	return __tmp3

}

var Decode_tag_type = Decode_tag_type_1

func Decode_op_1(_s ODecode_stream) OInt {
	__tmp1 := Decode_byte_1(_s)
	return __tmp1
}

var Decode_op = Decode_op_1

func Decode_end__1(_s ODecode_stream) OUnit {
	__tmp1 := Decode_expect_3(0x0b, _s, "END opcode expected")
	return __tmp1
}

var Decode_end_ = Decode_end__1

func Decode_memop_1(_s ODecode_stream) struct {
	F0 OSource_phrase[OTypes_local_idx]
	F1 OInt
	F2 OInt64
} {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	__tmp4 := Decode_u32_1(_s)
	_flags := __tmp4
	__tmp7 := Decode_require_4(I32_lt_u_2(_flags, 0x80), _s, _pos, "malformed memop flags")
	_ = __tmp7
	__tmp12 := _operatorNotEq_2(Int32_logand_2(_flags, 0x40), 0)
	_has_var := __tmp12
	var __tmp16 OSource_phrase[OTypes_local_idx]
	if _has_var {
		__tmp18 := Source_at_2(Decode_var, _s)
		__tmp16 = __tmp18
	} else {
		__tmp21 := _operatorAtAt_2(0, Source_no_region)
		__tmp16 = __tmp21
	}
	_x := __tmp16
	__tmp24 := to_int_1(logand_2(_flags, 0x3f))
	_align := __tmp24
	__tmp28 := Decode_u64_1(_s)
	_offset := __tmp28
	return struct {
		F0 OSource_phrase[OTypes_local_idx]
		F1 OInt
		F2 OInt64
	}{_x, _align, _offset}

}

var Decode_memop = Decode_memop_1

func Decode_block_type_1(_s ODecode_stream) OAst_block_type {
	__tmp1 := Decode_either_2([]func(ODecode_stream) OAst_block_type{func(_s ODecode_stream) OAst_block_type {
		__tmp2 := Ast_VarBlockType_1(Source_at_2(func(_s ODecode_stream) OTypes_local_idx {
			__tmp4 := Types_as_stat_var_1(Decode_var_type_2(Decode_s33, _s))
			return __tmp4
		}, _s))
		return __tmp2
	}, func(_s ODecode_stream) OAst_block_type {
		__tmp9 := Decode_expect_3(0x40, _s, "")
		_ = __tmp9
		__tmp11 := Ast_ValBlockType_1(nil)
		return __tmp11

	}, func(_s ODecode_stream) OAst_block_type {
		__tmp14 := Ast_ValBlockType_1(Some_1(Decode_val_type_1(_s)))
		return __tmp14
	}}, _s)
	return __tmp1
}

var Decode_block_type = Decode_block_type_1

func Decode_instr_1(_s ODecode_stream) OAst_instr_ {
	__tmp1 := Decode_pos_1(_s)
	Decode_pos := __tmp1
	var __tmp4 OAst_instr_
	__tmp5 := Decode_op_1(_s)
	if __tmp5 == 0x00 {
		__tmp8 := Operators_unreachable
		__tmp4 = __tmp8
	} else if __tmp5 == 0x01 {
		__tmp9 := Operators_nop
		__tmp4 = __tmp9
	} else if __tmp5 == 0x02 {
		__tmp10 := Decode_block_type_1(_s)
		_bt := __tmp10
		__tmp13 := Decode_instr_block_1(_s)
		_es_ := __tmp13
		__tmp16 := Decode_end__1(_s)
		_ = __tmp16
		__tmp18 := Operators_block_2(_bt, _es_)

		__tmp4 = __tmp18
	} else if __tmp5 == 0x03 {
		__tmp21 := Decode_block_type_1(_s)
		_bt := __tmp21
		__tmp24 := Decode_instr_block_1(_s)
		_es_ := __tmp24
		__tmp27 := Decode_end__1(_s)
		_ = __tmp27
		__tmp29 := Operators_loop_2(_bt, _es_)

		__tmp4 = __tmp29
	} else if __tmp5 == 0x04 {
		__tmp32 := Decode_block_type_1(_s)
		_bt := __tmp32
		__tmp35 := Decode_instr_block_1(_s)
		_es1 := __tmp35
		var __tmp38 OAst_instr_
		if _operatorEq_2(Decode_peek_1(_s), Some_1(0x05)) {
			__tmp43 := Decode_expect_3(0x05, _s, "ELSE or END opcode expected")
			_ = __tmp43
			__tmp45 := Decode_instr_block_1(_s)
			_es2 := __tmp45
			__tmp48 := Decode_end__1(_s)
			_ = __tmp48
			__tmp50 := Operators_if__3(_bt, _es1, _es2)

			__tmp38 = __tmp50
		} else {
			__tmp54 := Decode_end__1(_s)
			_ = __tmp54
			__tmp56 := Operators_if__3(_bt, _es1, []OAst_instr{})

			__tmp38 = __tmp56
		}
		__tmp4 = __tmp38
	} else if __tmp5 == 0x05 {
		__tmp59 := Decode_error_3(_s, _pos, "misplaced ELSE opcode")
		__tmp4 = __tmp59
	} else if __tmp5 == 0x06 || __tmp5 == 0x07 {
		_b := __tmp5
		__tmp63 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp63
	} else if __tmp5 == 0x08 {
		__tmp67 := Operators_throw_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp67
	} else if __tmp5 == 0x09 {
		_b := __tmp5
		__tmp72 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp72
	} else if __tmp5 == 0x0a {
		__tmp76 := Operators_throw_ref
		__tmp4 = __tmp76
	} else if __tmp5 == 0x0b {
		__tmp77 := Decode_error_3(_s, _pos, "misplaced END opcode")
		__tmp4 = __tmp77
	} else if __tmp5 == 0x0c {
		__tmp80 := Operators_br_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp80
	} else if __tmp5 == 0x0d {
		__tmp84 := Operators_br_if_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp84
	} else if __tmp5 == 0x0e {
		__tmp88 := Decode_vec_2(Source_at_1(Decode_var), _s)
		_xs := __tmp88
		__tmp93 := Source_at_2(Decode_var, _s)
		_x := __tmp93
		__tmp97 := Operators_br_table_2(_xs, _x)
		__tmp4 = __tmp97
	} else if __tmp5 == 0x0f {
		__tmp100 := Operators_return
		__tmp4 = __tmp100
	} else if __tmp5 == 0x10 {
		__tmp101 := Operators_call_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp101
	} else if __tmp5 == 0x11 {
		__tmp105 := Source_at_2(Decode_var, _s)
		_y := __tmp105
		__tmp109 := Source_at_2(Decode_var, _s)
		_x := __tmp109
		__tmp113 := Operators_call_indirect_2(_x, _y)
		__tmp4 = __tmp113
	} else if __tmp5 == 0x12 {
		__tmp116 := Operators_return_call_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp116
	} else if __tmp5 == 0x13 {
		__tmp120 := Source_at_2(Decode_var, _s)
		_y := __tmp120
		__tmp124 := Source_at_2(Decode_var, _s)
		_x := __tmp124
		__tmp128 := Operators_return_call_indirect_2(_x, _y)
		__tmp4 = __tmp128
	} else if __tmp5 == 0x14 {
		__tmp131 := Operators_call_ref_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp131
	} else if __tmp5 == 0x15 {
		__tmp135 := Operators_return_call_ref_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp135
	} else if __tmp5 == 0x16 || __tmp5 == 0x17 || __tmp5 == 0x18 || __tmp5 == 0x19 {
		_b := __tmp5
		__tmp140 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp140
	} else if __tmp5 == 0x1a {
		__tmp144 := Operators_drop
		__tmp4 = __tmp144
	} else if __tmp5 == 0x1b {
		__tmp145 := Operators_select_1(nil)
		__tmp4 = __tmp145
	} else if __tmp5 == 0x1c {
		__tmp148 := Operators_select_1(Some_1(Decode_vec_2(Decode_val_type, _s)))
		__tmp4 = __tmp148
	} else if __tmp5 == 0x1d || __tmp5 == 0x1e {
		_b := __tmp5
		__tmp154 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp154
	} else if __tmp5 == 0x1f {
		__tmp158 := Decode_block_type_1(_s)
		_bt := __tmp158
		__tmp161 := Decode_vec_2(Source_at_1(Decode_catch), _s)
		_cs := __tmp161
		__tmp166 := Decode_instr_block_1(_s)
		_es := __tmp166
		__tmp169 := Decode_end__1(_s)
		_ = __tmp169
		__tmp171 := Operators_try_table_3(_bt, _cs, _es)

		__tmp4 = __tmp171
	} else if __tmp5 == 0x20 {
		__tmp175 := Operators_local_get_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp175
	} else if __tmp5 == 0x21 {
		__tmp179 := Operators_local_set_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp179
	} else if __tmp5 == 0x22 {
		__tmp183 := Operators_local_tee_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp183
	} else if __tmp5 == 0x23 {
		__tmp187 := Operators_global_get_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp187
	} else if __tmp5 == 0x24 {
		__tmp191 := Operators_global_set_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp191
	} else if __tmp5 == 0x25 {
		__tmp195 := Operators_table_get_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp195
	} else if __tmp5 == 0x26 {
		__tmp199 := Operators_table_set_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp199
	} else if __tmp5 == 0x27 {
		_b := __tmp5
		__tmp204 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp204
	} else if __tmp5 == 0x28 {
		__tmp208 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp208)
		__tmp213 := Operators_i32_load_3(_x, _a, _o)
		__tmp4 = __tmp213
	} else if __tmp5 == 0x29 {
		__tmp217 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp217)
		__tmp222 := Operators_i64_load_3(_x, _a, _o)
		__tmp4 = __tmp222
	} else if __tmp5 == 0x2a {
		__tmp226 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp226)
		__tmp231 := Operators_f32_load_3(_x, _a, _o)
		__tmp4 = __tmp231
	} else if __tmp5 == 0x2b {
		__tmp235 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp235)
		__tmp240 := Operators_f64_load_3(_x, _a, _o)
		__tmp4 = __tmp240
	} else if __tmp5 == 0x2c {
		__tmp244 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp244)
		__tmp249 := Operators_i32_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp249
	} else if __tmp5 == 0x2d {
		__tmp253 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp253)
		__tmp258 := Operators_i32_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp258
	} else if __tmp5 == 0x2e {
		__tmp262 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp262)
		__tmp267 := Operators_i32_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp267
	} else if __tmp5 == 0x2f {
		__tmp271 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp271)
		__tmp276 := Operators_i32_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp276
	} else if __tmp5 == 0x30 {
		__tmp280 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp280)
		__tmp285 := Operators_i64_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp285
	} else if __tmp5 == 0x31 {
		__tmp289 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp289)
		__tmp294 := Operators_i64_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp294
	} else if __tmp5 == 0x32 {
		__tmp298 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp298)
		__tmp303 := Operators_i64_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp303
	} else if __tmp5 == 0x33 {
		__tmp307 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp307)
		__tmp312 := Operators_i64_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp312
	} else if __tmp5 == 0x34 {
		__tmp316 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp316)
		__tmp321 := Operators_i64_load32_s_3(_x, _a, _o)
		__tmp4 = __tmp321
	} else if __tmp5 == 0x35 {
		__tmp325 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp325)
		__tmp330 := Operators_i64_load32_u_3(_x, _a, _o)
		__tmp4 = __tmp330
	} else if __tmp5 == 0x36 {
		__tmp334 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp334)
		__tmp339 := Operators_i32_store_3(_x, _a, _o)
		__tmp4 = __tmp339
	} else if __tmp5 == 0x37 {
		__tmp343 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp343)
		__tmp348 := Operators_i64_store_3(_x, _a, _o)
		__tmp4 = __tmp348
	} else if __tmp5 == 0x38 {
		__tmp352 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp352)
		__tmp357 := Operators_f32_store_3(_x, _a, _o)
		__tmp4 = __tmp357
	} else if __tmp5 == 0x39 {
		__tmp361 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp361)
		__tmp366 := Operators_f64_store_3(_x, _a, _o)
		__tmp4 = __tmp366
	} else if __tmp5 == 0x3a {
		__tmp370 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp370)
		__tmp375 := Operators_i32_store8_3(_x, _a, _o)
		__tmp4 = __tmp375
	} else if __tmp5 == 0x3b {
		__tmp379 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp379)
		__tmp384 := Operators_i32_store16_3(_x, _a, _o)
		__tmp4 = __tmp384
	} else if __tmp5 == 0x3c {
		__tmp388 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp388)
		__tmp393 := Operators_i64_store8_3(_x, _a, _o)
		__tmp4 = __tmp393
	} else if __tmp5 == 0x3d {
		__tmp397 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp397)
		__tmp402 := Operators_i64_store16_3(_x, _a, _o)
		__tmp4 = __tmp402
	} else if __tmp5 == 0x3e {
		__tmp406 := Decode_memop_1(_s)
		_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp406)
		__tmp411 := Operators_i64_store32_3(_x, _a, _o)
		__tmp4 = __tmp411
	} else if __tmp5 == 0x3f {
		__tmp415 := Operators_memory_size_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp415
	} else if __tmp5 == 0x40 {
		__tmp419 := Operators_memory_grow_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp419
	} else if __tmp5 == 0x41 {
		__tmp423 := Operators_i32_const_1(Source_at_2(Decode_s32, _s))
		__tmp4 = __tmp423
	} else if __tmp5 == 0x42 {
		__tmp427 := Operators_i64_const_1(Source_at_2(Decode_s64, _s))
		__tmp4 = __tmp427
	} else if __tmp5 == 0x43 {
		__tmp431 := Operators_f32_const_1(Source_at_2(Decode_f32, _s))
		__tmp4 = __tmp431
	} else if __tmp5 == 0x44 {
		__tmp435 := Operators_f64_const_1(Source_at_2(Decode_f64, _s))
		__tmp4 = __tmp435
	} else if __tmp5 == 0x45 {
		__tmp439 := Operators_i32_eqz
		__tmp4 = __tmp439
	} else if __tmp5 == 0x46 {
		__tmp440 := Operators_i32_eq
		__tmp4 = __tmp440
	} else if __tmp5 == 0x47 {
		__tmp441 := Operators_i32_ne
		__tmp4 = __tmp441
	} else if __tmp5 == 0x48 {
		__tmp442 := Operators_i32_lt_s
		__tmp4 = __tmp442
	} else if __tmp5 == 0x49 {
		__tmp443 := Operators_i32_lt_u
		__tmp4 = __tmp443
	} else if __tmp5 == 0x4a {
		__tmp444 := Operators_i32_gt_s
		__tmp4 = __tmp444
	} else if __tmp5 == 0x4b {
		__tmp445 := Operators_i32_gt_u
		__tmp4 = __tmp445
	} else if __tmp5 == 0x4c {
		__tmp446 := Operators_i32_le_s
		__tmp4 = __tmp446
	} else if __tmp5 == 0x4d {
		__tmp447 := Operators_i32_le_u
		__tmp4 = __tmp447
	} else if __tmp5 == 0x4e {
		__tmp448 := Operators_i32_ge_s
		__tmp4 = __tmp448
	} else if __tmp5 == 0x4f {
		__tmp449 := Operators_i32_ge_u
		__tmp4 = __tmp449
	} else if __tmp5 == 0x50 {
		__tmp450 := Operators_i64_eqz
		__tmp4 = __tmp450
	} else if __tmp5 == 0x51 {
		__tmp451 := Operators_i64_eq
		__tmp4 = __tmp451
	} else if __tmp5 == 0x52 {
		__tmp452 := Operators_i64_ne
		__tmp4 = __tmp452
	} else if __tmp5 == 0x53 {
		__tmp453 := Operators_i64_lt_s
		__tmp4 = __tmp453
	} else if __tmp5 == 0x54 {
		__tmp454 := Operators_i64_lt_u
		__tmp4 = __tmp454
	} else if __tmp5 == 0x55 {
		__tmp455 := Operators_i64_gt_s
		__tmp4 = __tmp455
	} else if __tmp5 == 0x56 {
		__tmp456 := Operators_i64_gt_u
		__tmp4 = __tmp456
	} else if __tmp5 == 0x57 {
		__tmp457 := Operators_i64_le_s
		__tmp4 = __tmp457
	} else if __tmp5 == 0x58 {
		__tmp458 := Operators_i64_le_u
		__tmp4 = __tmp458
	} else if __tmp5 == 0x59 {
		__tmp459 := Operators_i64_ge_s
		__tmp4 = __tmp459
	} else if __tmp5 == 0x5a {
		__tmp460 := Operators_i64_ge_u
		__tmp4 = __tmp460
	} else if __tmp5 == 0x5b {
		__tmp461 := Operators_f32_eq
		__tmp4 = __tmp461
	} else if __tmp5 == 0x5c {
		__tmp462 := Operators_f32_ne
		__tmp4 = __tmp462
	} else if __tmp5 == 0x5d {
		__tmp463 := Operators_f32_lt
		__tmp4 = __tmp463
	} else if __tmp5 == 0x5e {
		__tmp464 := Operators_f32_gt
		__tmp4 = __tmp464
	} else if __tmp5 == 0x5f {
		__tmp465 := Operators_f32_le
		__tmp4 = __tmp465
	} else if __tmp5 == 0x60 {
		__tmp466 := Operators_f32_ge
		__tmp4 = __tmp466
	} else if __tmp5 == 0x61 {
		__tmp467 := Operators_f64_eq
		__tmp4 = __tmp467
	} else if __tmp5 == 0x62 {
		__tmp468 := Operators_f64_ne
		__tmp4 = __tmp468
	} else if __tmp5 == 0x63 {
		__tmp469 := Operators_f64_lt
		__tmp4 = __tmp469
	} else if __tmp5 == 0x64 {
		__tmp470 := Operators_f64_gt
		__tmp4 = __tmp470
	} else if __tmp5 == 0x65 {
		__tmp471 := Operators_f64_le
		__tmp4 = __tmp471
	} else if __tmp5 == 0x66 {
		__tmp472 := Operators_f64_ge
		__tmp4 = __tmp472
	} else if __tmp5 == 0x67 {
		__tmp473 := Operators_i32_clz
		__tmp4 = __tmp473
	} else if __tmp5 == 0x68 {
		__tmp474 := Operators_i32_ctz
		__tmp4 = __tmp474
	} else if __tmp5 == 0x69 {
		__tmp475 := Operators_i32_popcnt
		__tmp4 = __tmp475
	} else if __tmp5 == 0x6a {
		__tmp476 := Operators_i32_add
		__tmp4 = __tmp476
	} else if __tmp5 == 0x6b {
		__tmp477 := Operators_i32_sub
		__tmp4 = __tmp477
	} else if __tmp5 == 0x6c {
		__tmp478 := Operators_i32_mul
		__tmp4 = __tmp478
	} else if __tmp5 == 0x6d {
		__tmp479 := Operators_i32_div_s
		__tmp4 = __tmp479
	} else if __tmp5 == 0x6e {
		__tmp480 := Operators_i32_div_u
		__tmp4 = __tmp480
	} else if __tmp5 == 0x6f {
		__tmp481 := Operators_i32_rem_s
		__tmp4 = __tmp481
	} else if __tmp5 == 0x70 {
		__tmp482 := Operators_i32_rem_u
		__tmp4 = __tmp482
	} else if __tmp5 == 0x71 {
		__tmp483 := Operators_i32_and
		__tmp4 = __tmp483
	} else if __tmp5 == 0x72 {
		__tmp484 := Operators_i32_or
		__tmp4 = __tmp484
	} else if __tmp5 == 0x73 {
		__tmp485 := Operators_i32_xor
		__tmp4 = __tmp485
	} else if __tmp5 == 0x74 {
		__tmp486 := Operators_i32_shl
		__tmp4 = __tmp486
	} else if __tmp5 == 0x75 {
		__tmp487 := Operators_i32_shr_s
		__tmp4 = __tmp487
	} else if __tmp5 == 0x76 {
		__tmp488 := Operators_i32_shr_u
		__tmp4 = __tmp488
	} else if __tmp5 == 0x77 {
		__tmp489 := Operators_i32_rotl
		__tmp4 = __tmp489
	} else if __tmp5 == 0x78 {
		__tmp490 := Operators_i32_rotr
		__tmp4 = __tmp490
	} else if __tmp5 == 0x79 {
		__tmp491 := Operators_i64_clz
		__tmp4 = __tmp491
	} else if __tmp5 == 0x7a {
		__tmp492 := Operators_i64_ctz
		__tmp4 = __tmp492
	} else if __tmp5 == 0x7b {
		__tmp493 := Operators_i64_popcnt
		__tmp4 = __tmp493
	} else if __tmp5 == 0x7c {
		__tmp494 := Operators_i64_add
		__tmp4 = __tmp494
	} else if __tmp5 == 0x7d {
		__tmp495 := Operators_i64_sub
		__tmp4 = __tmp495
	} else if __tmp5 == 0x7e {
		__tmp496 := Operators_i64_mul
		__tmp4 = __tmp496
	} else if __tmp5 == 0x7f {
		__tmp497 := Operators_i64_div_s
		__tmp4 = __tmp497
	} else if __tmp5 == 0x80 {
		__tmp498 := Operators_i64_div_u
		__tmp4 = __tmp498
	} else if __tmp5 == 0x81 {
		__tmp499 := Operators_i64_rem_s
		__tmp4 = __tmp499
	} else if __tmp5 == 0x82 {
		__tmp500 := Operators_i64_rem_u
		__tmp4 = __tmp500
	} else if __tmp5 == 0x83 {
		__tmp501 := Operators_i64_and
		__tmp4 = __tmp501
	} else if __tmp5 == 0x84 {
		__tmp502 := Operators_i64_or
		__tmp4 = __tmp502
	} else if __tmp5 == 0x85 {
		__tmp503 := Operators_i64_xor
		__tmp4 = __tmp503
	} else if __tmp5 == 0x86 {
		__tmp504 := Operators_i64_shl
		__tmp4 = __tmp504
	} else if __tmp5 == 0x87 {
		__tmp505 := Operators_i64_shr_s
		__tmp4 = __tmp505
	} else if __tmp5 == 0x88 {
		__tmp506 := Operators_i64_shr_u
		__tmp4 = __tmp506
	} else if __tmp5 == 0x89 {
		__tmp507 := Operators_i64_rotl
		__tmp4 = __tmp507
	} else if __tmp5 == 0x8a {
		__tmp508 := Operators_i64_rotr
		__tmp4 = __tmp508
	} else if __tmp5 == 0x8b {
		__tmp509 := Operators_f32_abs
		__tmp4 = __tmp509
	} else if __tmp5 == 0x8c {
		__tmp510 := Operators_f32_neg
		__tmp4 = __tmp510
	} else if __tmp5 == 0x8d {
		__tmp511 := Operators_f32_ceil
		__tmp4 = __tmp511
	} else if __tmp5 == 0x8e {
		__tmp512 := Operators_f32_floor
		__tmp4 = __tmp512
	} else if __tmp5 == 0x8f {
		__tmp513 := Operators_f32_trunc
		__tmp4 = __tmp513
	} else if __tmp5 == 0x90 {
		__tmp514 := Operators_f32_nearest
		__tmp4 = __tmp514
	} else if __tmp5 == 0x91 {
		__tmp515 := Operators_f32_sqrt
		__tmp4 = __tmp515
	} else if __tmp5 == 0x92 {
		__tmp516 := Operators_f32_add
		__tmp4 = __tmp516
	} else if __tmp5 == 0x93 {
		__tmp517 := Operators_f32_sub
		__tmp4 = __tmp517
	} else if __tmp5 == 0x94 {
		__tmp518 := Operators_f32_mul
		__tmp4 = __tmp518
	} else if __tmp5 == 0x95 {
		__tmp519 := Operators_f32_div
		__tmp4 = __tmp519
	} else if __tmp5 == 0x96 {
		__tmp520 := Operators_f32_min
		__tmp4 = __tmp520
	} else if __tmp5 == 0x97 {
		__tmp521 := Operators_f32_max
		__tmp4 = __tmp521
	} else if __tmp5 == 0x98 {
		__tmp522 := Operators_f32_copysign
		__tmp4 = __tmp522
	} else if __tmp5 == 0x99 {
		__tmp523 := Operators_f64_abs
		__tmp4 = __tmp523
	} else if __tmp5 == 0x9a {
		__tmp524 := Operators_f64_neg
		__tmp4 = __tmp524
	} else if __tmp5 == 0x9b {
		__tmp525 := Operators_f64_ceil
		__tmp4 = __tmp525
	} else if __tmp5 == 0x9c {
		__tmp526 := Operators_f64_floor
		__tmp4 = __tmp526
	} else if __tmp5 == 0x9d {
		__tmp527 := Operators_f64_trunc
		__tmp4 = __tmp527
	} else if __tmp5 == 0x9e {
		__tmp528 := Operators_f64_nearest
		__tmp4 = __tmp528
	} else if __tmp5 == 0x9f {
		__tmp529 := Operators_f64_sqrt
		__tmp4 = __tmp529
	} else if __tmp5 == 0xa0 {
		__tmp530 := Operators_f64_add
		__tmp4 = __tmp530
	} else if __tmp5 == 0xa1 {
		__tmp531 := Operators_f64_sub
		__tmp4 = __tmp531
	} else if __tmp5 == 0xa2 {
		__tmp532 := Operators_f64_mul
		__tmp4 = __tmp532
	} else if __tmp5 == 0xa3 {
		__tmp533 := Operators_f64_div
		__tmp4 = __tmp533
	} else if __tmp5 == 0xa4 {
		__tmp534 := Operators_f64_min
		__tmp4 = __tmp534
	} else if __tmp5 == 0xa5 {
		__tmp535 := Operators_f64_max
		__tmp4 = __tmp535
	} else if __tmp5 == 0xa6 {
		__tmp536 := Operators_f64_copysign
		__tmp4 = __tmp536
	} else if __tmp5 == 0xa7 {
		__tmp537 := Operators_i32_wrap_i64
		__tmp4 = __tmp537
	} else if __tmp5 == 0xa8 {
		__tmp538 := Operators_i32_trunc_f32_s
		__tmp4 = __tmp538
	} else if __tmp5 == 0xa9 {
		__tmp539 := Operators_i32_trunc_f32_u
		__tmp4 = __tmp539
	} else if __tmp5 == 0xaa {
		__tmp540 := Operators_i32_trunc_f64_s
		__tmp4 = __tmp540
	} else if __tmp5 == 0xab {
		__tmp541 := Operators_i32_trunc_f64_u
		__tmp4 = __tmp541
	} else if __tmp5 == 0xac {
		__tmp542 := Operators_i64_extend_i32_s
		__tmp4 = __tmp542
	} else if __tmp5 == 0xad {
		__tmp543 := Operators_i64_extend_i32_u
		__tmp4 = __tmp543
	} else if __tmp5 == 0xae {
		__tmp544 := Operators_i64_trunc_f32_s
		__tmp4 = __tmp544
	} else if __tmp5 == 0xaf {
		__tmp545 := Operators_i64_trunc_f32_u
		__tmp4 = __tmp545
	} else if __tmp5 == 0xb0 {
		__tmp546 := Operators_i64_trunc_f64_s
		__tmp4 = __tmp546
	} else if __tmp5 == 0xb1 {
		__tmp547 := Operators_i64_trunc_f64_u
		__tmp4 = __tmp547
	} else if __tmp5 == 0xb2 {
		__tmp548 := Operators_f32_convert_i32_s
		__tmp4 = __tmp548
	} else if __tmp5 == 0xb3 {
		__tmp549 := Operators_f32_convert_i32_u
		__tmp4 = __tmp549
	} else if __tmp5 == 0xb4 {
		__tmp550 := Operators_f32_convert_i64_s
		__tmp4 = __tmp550
	} else if __tmp5 == 0xb5 {
		__tmp551 := Operators_f32_convert_i64_u
		__tmp4 = __tmp551
	} else if __tmp5 == 0xb6 {
		__tmp552 := Operators_f32_demote_f64
		__tmp4 = __tmp552
	} else if __tmp5 == 0xb7 {
		__tmp553 := Operators_f64_convert_i32_s
		__tmp4 = __tmp553
	} else if __tmp5 == 0xb8 {
		__tmp554 := Operators_f64_convert_i32_u
		__tmp4 = __tmp554
	} else if __tmp5 == 0xb9 {
		__tmp555 := Operators_f64_convert_i64_s
		__tmp4 = __tmp555
	} else if __tmp5 == 0xba {
		__tmp556 := Operators_f64_convert_i64_u
		__tmp4 = __tmp556
	} else if __tmp5 == 0xbb {
		__tmp557 := Operators_f64_promote_f32
		__tmp4 = __tmp557
	} else if __tmp5 == 0xbc {
		__tmp558 := Operators_i32_reinterpret_f32
		__tmp4 = __tmp558
	} else if __tmp5 == 0xbd {
		__tmp559 := Operators_i64_reinterpret_f64
		__tmp4 = __tmp559
	} else if __tmp5 == 0xbe {
		__tmp560 := Operators_f32_reinterpret_i32
		__tmp4 = __tmp560
	} else if __tmp5 == 0xbf {
		__tmp561 := Operators_f64_reinterpret_i64
		__tmp4 = __tmp561
	} else if __tmp5 == 0xc0 {
		__tmp562 := Operators_i32_extend8_s
		__tmp4 = __tmp562
	} else if __tmp5 == 0xc1 {
		__tmp563 := Operators_i32_extend16_s
		__tmp4 = __tmp563
	} else if __tmp5 == 0xc2 {
		__tmp564 := Operators_i64_extend8_s
		__tmp4 = __tmp564
	} else if __tmp5 == 0xc3 {
		__tmp565 := Operators_i64_extend16_s
		__tmp4 = __tmp565
	} else if __tmp5 == 0xc4 {
		__tmp566 := Operators_i64_extend32_s
		__tmp4 = __tmp566
	} else if __tmp5 == 0xc5 || __tmp5 == 0xc6 || __tmp5 == 0xc7 || __tmp5 == 0xc8 || __tmp5 == 0xc9 || __tmp5 == 0xca || __tmp5 == 0xcb || __tmp5 == 0xcc || __tmp5 == 0xcd || __tmp5 == 0xce || __tmp5 == 0xcf {
		_b := __tmp5
		__tmp568 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp568
	} else if __tmp5 == 0xd0 {
		__tmp572 := Operators_ref_null_1(Decode_heap_type_1(_s))
		__tmp4 = __tmp572
	} else if __tmp5 == 0xd1 {
		__tmp575 := Operators_ref_is_null
		__tmp4 = __tmp575
	} else if __tmp5 == 0xd2 {
		__tmp576 := Operators_ref_func_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp576
	} else if __tmp5 == 0xd3 {
		__tmp580 := Operators_ref_eq
		__tmp4 = __tmp580
	} else if __tmp5 == 0xd4 {
		__tmp581 := Operators_ref_as_non_null
		__tmp4 = __tmp581
	} else if __tmp5 == 0xd5 {
		__tmp582 := Operators_br_on_null_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp582
	} else if __tmp5 == 0xd6 {
		__tmp586 := Operators_br_on_non_null_1(Source_at_2(Decode_var, _s))
		__tmp4 = __tmp586
	} else if __tmp5 == 0xfb {
		_b := __tmp5
		var __tmp591 OAst_instr_
		__tmp592 := Decode_u32_1(_s)
		if __tmp592 == 0x00 {
			__tmp595 := Operators_struct_new_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp595
		} else if __tmp592 == 0x01 {
			__tmp599 := Operators_struct_new_default_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp599
		} else if __tmp592 == 0x02 {
			__tmp603 := Source_at_2(Decode_var, _s)
			_x := __tmp603
			__tmp607 := Source_at_2(Decode_var, _s)
			_y := __tmp607
			__tmp611 := Operators_struct_get_2(_x, _y)
			__tmp591 = __tmp611
		} else if __tmp592 == 0x03 {
			__tmp614 := Source_at_2(Decode_var, _s)
			_x := __tmp614
			__tmp618 := Source_at_2(Decode_var, _s)
			_y := __tmp618
			__tmp622 := Operators_struct_get_s_2(_x, _y)
			__tmp591 = __tmp622
		} else if __tmp592 == 0x04 {
			__tmp625 := Source_at_2(Decode_var, _s)
			_x := __tmp625
			__tmp629 := Source_at_2(Decode_var, _s)
			_y := __tmp629
			__tmp633 := Operators_struct_get_u_2(_x, _y)
			__tmp591 = __tmp633
		} else if __tmp592 == 0x05 {
			__tmp636 := Source_at_2(Decode_var, _s)
			_x := __tmp636
			__tmp640 := Source_at_2(Decode_var, _s)
			_y := __tmp640
			__tmp644 := Operators_struct_set_2(_x, _y)
			__tmp591 = __tmp644
		} else if __tmp592 == 0x06 {
			__tmp647 := Operators_array_new_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp647
		} else if __tmp592 == 0x07 {
			__tmp651 := Operators_array_new_default_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp651
		} else if __tmp592 == 0x08 {
			__tmp655 := Source_at_2(Decode_var, _s)
			_x := __tmp655
			__tmp659 := Decode_u32_1(_s)
			_n := __tmp659
			__tmp662 := Operators_array_new_fixed_2(_x, _n)
			__tmp591 = __tmp662
		} else if __tmp592 == 0x09 {
			__tmp665 := Source_at_2(Decode_var, _s)
			_x := __tmp665
			__tmp669 := Source_at_2(Decode_var, _s)
			_y := __tmp669
			__tmp673 := Operators_array_new_data_2(_x, _y)
			__tmp591 = __tmp673
		} else if __tmp592 == 0x0a {
			__tmp676 := Source_at_2(Decode_var, _s)
			_x := __tmp676
			__tmp680 := Source_at_2(Decode_var, _s)
			_y := __tmp680
			__tmp684 := Operators_array_new_elem_2(_x, _y)
			__tmp591 = __tmp684
		} else if __tmp592 == 0x0b {
			__tmp687 := Operators_array_get_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp687
		} else if __tmp592 == 0x0c {
			__tmp691 := Operators_array_get_s_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp691
		} else if __tmp592 == 0x0d {
			__tmp695 := Operators_array_get_u_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp695
		} else if __tmp592 == 0x0e {
			__tmp699 := Operators_array_set_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp699
		} else if __tmp592 == 0x0f {
			__tmp703 := Operators_array_len
			__tmp591 = __tmp703
		} else if __tmp592 == 0x10 {
			__tmp704 := Operators_array_fill_1(Source_at_2(Decode_var, _s))
			__tmp591 = __tmp704
		} else if __tmp592 == 0x11 {
			__tmp708 := Source_at_2(Decode_var, _s)
			_x := __tmp708
			__tmp712 := Source_at_2(Decode_var, _s)
			_y := __tmp712
			__tmp716 := Operators_array_copy_2(_x, _y)
			__tmp591 = __tmp716
		} else if __tmp592 == 0x12 {
			__tmp719 := Source_at_2(Decode_var, _s)
			_x := __tmp719
			__tmp723 := Source_at_2(Decode_var, _s)
			_y := __tmp723
			__tmp727 := Operators_array_init_data_2(_x, _y)
			__tmp591 = __tmp727
		} else if __tmp592 == 0x13 {
			__tmp730 := Source_at_2(Decode_var, _s)
			_x := __tmp730
			__tmp734 := Source_at_2(Decode_var, _s)
			_y := __tmp734
			__tmp738 := Operators_array_init_elem_2(_x, _y)
			__tmp591 = __tmp738
		} else if __tmp592 == 0x14 {
			__tmp741 := Operators_ref_test_1(struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{Types_NoNull, Decode_heap_type_1(_s)})
			__tmp591 = __tmp741
		} else if __tmp592 == 0x15 {
			__tmp747 := Operators_ref_test_1(struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{Types_Null, Decode_heap_type_1(_s)})
			__tmp591 = __tmp747
		} else if __tmp592 == 0x16 {
			__tmp753 := Operators_ref_cast_1(struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{Types_NoNull, Decode_heap_type_1(_s)})
			__tmp591 = __tmp753
		} else if __tmp592 == 0x17 {
			__tmp759 := Operators_ref_cast_1(struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{Types_Null, Decode_heap_type_1(_s)})
			__tmp591 = __tmp759
		} else if __tmp592 == 0x18 || __tmp592 == 0x19 {
			_opcode := __tmp592
			__tmp766 := Decode_byte_1(_s)
			_flags := __tmp766
			__tmp769 := Decode_require_4(_operatorEq_2(_operatorland_2(_flags, 0xfc), 0), _s, _operatorPlus_2(_pos, 2), "malformed br_on_cast flags")
			_ = __tmp769
			__tmp776 := Source_at_2(Decode_var, _s)
			_x := __tmp776
			__tmp780 := struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{func() OTypes_null {
				var __tmp781 OTypes_null
				if Decode_bit_2(0, _flags) {
					__tmp784 := Types_Null
					__tmp781 = __tmp784
				} else {
					__tmp786 := Types_NoNull
					__tmp781 = __tmp786
				}
				return __tmp781
			}(), Decode_heap_type_1(_s)}
			_rt1 := __tmp780
			__tmp791 := struct {
				F0 OTypes_null
				F1 OTypes_heap_type
			}{func() OTypes_null {
				var __tmp792 OTypes_null
				if Decode_bit_2(1, _flags) {
					__tmp795 := Types_Null
					__tmp792 = __tmp795
				} else {
					__tmp797 := Types_NoNull
					__tmp792 = __tmp797
				}
				return __tmp792
			}(), Decode_heap_type_1(_s)}
			_rt2 := __tmp791
			__tmp802 := _if_opcode___0x18l_then_br_on_cast_else_br_on_cast_fail__3(_x, _rt1, _rt2)

			__tmp591 = __tmp802
		} else if __tmp592 == 0x1a {
			__tmp806 := Operators_any_convert_extern
			__tmp591 = __tmp806
		} else if __tmp592 == 0x1b {
			__tmp807 := Operators_extern_convert_any
			__tmp591 = __tmp807
		} else if __tmp592 == 0x1c {
			__tmp808 := Operators_ref_i31
			__tmp591 = __tmp808
		} else if __tmp592 == 0x1d {
			__tmp809 := Operators_i31_get_s
			__tmp591 = __tmp809
		} else if __tmp592 == 0x1e {
			__tmp810 := Operators_i31_get_u
			__tmp591 = __tmp810
		} else if _n := __tmp592; true {
			_ = _n
			__tmp813 := Decode_illegal2_4(_s, _pos, _b, _n)
			__tmp591 = __tmp813
		}
		__tmp4 = __tmp591
	} else if __tmp5 == 0xfc {
		_b := __tmp5
		var __tmp819 OAst_instr_
		__tmp820 := Decode_u32_1(_s)
		if __tmp820 == 0x00 {
			__tmp823 := Operators_i32_trunc_sat_f32_s
			__tmp819 = __tmp823
		} else if __tmp820 == 0x01 {
			__tmp824 := Operators_i32_trunc_sat_f32_u
			__tmp819 = __tmp824
		} else if __tmp820 == 0x02 {
			__tmp825 := Operators_i32_trunc_sat_f64_s
			__tmp819 = __tmp825
		} else if __tmp820 == 0x03 {
			__tmp826 := Operators_i32_trunc_sat_f64_u
			__tmp819 = __tmp826
		} else if __tmp820 == 0x04 {
			__tmp827 := Operators_i64_trunc_sat_f32_s
			__tmp819 = __tmp827
		} else if __tmp820 == 0x05 {
			__tmp828 := Operators_i64_trunc_sat_f32_u
			__tmp819 = __tmp828
		} else if __tmp820 == 0x06 {
			__tmp829 := Operators_i64_trunc_sat_f64_s
			__tmp819 = __tmp829
		} else if __tmp820 == 0x07 {
			__tmp830 := Operators_i64_trunc_sat_f64_u
			__tmp819 = __tmp830
		} else if __tmp820 == 0x08 {
			__tmp831 := Source_at_2(Decode_var, _s)
			_y := __tmp831
			__tmp835 := Source_at_2(Decode_var, _s)
			_x := __tmp835
			__tmp839 := Operators_memory_init_2(_x, _y)
			__tmp819 = __tmp839
		} else if __tmp820 == 0x09 {
			__tmp842 := Operators_data_drop_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp842
		} else if __tmp820 == 0x0a {
			__tmp846 := Source_at_2(Decode_var, _s)
			_x := __tmp846
			__tmp850 := Source_at_2(Decode_var, _s)
			_y := __tmp850
			__tmp854 := Operators_memory_copy_2(_x, _y)
			__tmp819 = __tmp854
		} else if __tmp820 == 0x0b {
			__tmp857 := Operators_memory_fill_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp857
		} else if __tmp820 == 0x0c {
			__tmp861 := Source_at_2(Decode_var, _s)
			_y := __tmp861
			__tmp865 := Source_at_2(Decode_var, _s)
			_x := __tmp865
			__tmp869 := Operators_table_init_2(_x, _y)
			__tmp819 = __tmp869
		} else if __tmp820 == 0x0d {
			__tmp872 := Operators_elem_drop_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp872
		} else if __tmp820 == 0x0e {
			__tmp876 := Source_at_2(Decode_var, _s)
			_x := __tmp876
			__tmp880 := Source_at_2(Decode_var, _s)
			_y := __tmp880
			__tmp884 := Operators_table_copy_2(_x, _y)
			__tmp819 = __tmp884
		} else if __tmp820 == 0x0f {
			__tmp887 := Operators_table_grow_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp887
		} else if __tmp820 == 0x10 {
			__tmp891 := Operators_table_size_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp891
		} else if __tmp820 == 0x11 {
			__tmp895 := Operators_table_fill_1(Source_at_2(Decode_var, _s))
			__tmp819 = __tmp895
		} else if _n := __tmp820; true {
			_ = _n
			__tmp901 := Decode_illegal2_4(_s, _pos, _b, _n)
			__tmp819 = __tmp901
		}
		__tmp4 = __tmp819
	} else if __tmp5 == 0xfd {
		var __tmp906 OAst_instr_
		__tmp907 := Decode_u32_1(_s)
		if __tmp907 == 0x00 {
			__tmp910 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp910)
			__tmp915 := Operators_v128_load_3(_x, _a, _o)
			__tmp906 = __tmp915
		} else if __tmp907 == 0x01 {
			__tmp919 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp919)
			__tmp924 := Operators_v128_load8x8_s_3(_x, _a, _o)
			__tmp906 = __tmp924
		} else if __tmp907 == 0x02 {
			__tmp928 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp928)
			__tmp933 := Operators_v128_load8x8_u_3(_x, _a, _o)
			__tmp906 = __tmp933
		} else if __tmp907 == 0x03 {
			__tmp937 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp937)
			__tmp942 := Operators_v128_load16x4_s_3(_x, _a, _o)
			__tmp906 = __tmp942
		} else if __tmp907 == 0x04 {
			__tmp946 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp946)
			__tmp951 := Operators_v128_load16x4_u_3(_x, _a, _o)
			__tmp906 = __tmp951
		} else if __tmp907 == 0x05 {
			__tmp955 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp955)
			__tmp960 := Operators_v128_load32x2_s_3(_x, _a, _o)
			__tmp906 = __tmp960
		} else if __tmp907 == 0x06 {
			__tmp964 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp964)
			__tmp969 := Operators_v128_load32x2_u_3(_x, _a, _o)
			__tmp906 = __tmp969
		} else if __tmp907 == 0x07 {
			__tmp973 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp973)
			__tmp978 := Operators_v128_load8_splat_3(_x, _a, _o)
			__tmp906 = __tmp978
		} else if __tmp907 == 0x08 {
			__tmp982 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp982)
			__tmp987 := Operators_v128_load16_splat_3(_x, _a, _o)
			__tmp906 = __tmp987
		} else if __tmp907 == 0x09 {
			__tmp991 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp991)
			__tmp996 := Operators_v128_load32_splat_3(_x, _a, _o)
			__tmp906 = __tmp996
		} else if __tmp907 == 0x0a {
			__tmp1000 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1000)
			__tmp1005 := Operators_v128_load64_splat_3(_x, _a, _o)
			__tmp906 = __tmp1005
		} else if __tmp907 == 0x0b {
			__tmp1009 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1009)
			__tmp1014 := Operators_v128_store_3(_x, _a, _o)
			__tmp906 = __tmp1014
		} else if __tmp907 == 0x0c {
			__tmp1018 := Operators_v128_const_1(Source_at_2(Decode_v128, _s))
			__tmp906 = __tmp1018
		} else if __tmp907 == 0x0d {
			__tmp1022 := Operators_i8x16_shuffle_1(List_init_2(16, func(__ OInt) OInt {
				__tmp1024 := Decode_byte_1(_s)
				return __tmp1024
			}))
			__tmp906 = __tmp1022
		} else if __tmp907 == 0x0e {
			__tmp1026 := Operators_i8x16_swizzle
			__tmp906 = __tmp1026
		} else if __tmp907 == 0x0f {
			__tmp1027 := Operators_i8x16_splat
			__tmp906 = __tmp1027
		} else if __tmp907 == 0x10 {
			__tmp1028 := Operators_i16x8_splat
			__tmp906 = __tmp1028
		} else if __tmp907 == 0x11 {
			__tmp1029 := Operators_i32x4_splat
			__tmp906 = __tmp1029
		} else if __tmp907 == 0x12 {
			__tmp1030 := Operators_i64x2_splat
			__tmp906 = __tmp1030
		} else if __tmp907 == 0x13 {
			__tmp1031 := Operators_f32x4_splat
			__tmp906 = __tmp1031
		} else if __tmp907 == 0x14 {
			__tmp1032 := Operators_f64x2_splat
			__tmp906 = __tmp1032
		} else if __tmp907 == 0x15 {
			__tmp1033 := Decode_byte_1(_s)
			_i := __tmp1033
			__tmp1036 := Operators_i8x16_extract_lane_s_1(_i)
			__tmp906 = __tmp1036
		} else if __tmp907 == 0x16 {
			__tmp1038 := Decode_byte_1(_s)
			_i := __tmp1038
			__tmp1041 := Operators_i8x16_extract_lane_u_1(_i)
			__tmp906 = __tmp1041
		} else if __tmp907 == 0x17 {
			__tmp1043 := Decode_byte_1(_s)
			_i := __tmp1043
			__tmp1046 := Operators_i8x16_replace_lane_1(_i)
			__tmp906 = __tmp1046
		} else if __tmp907 == 0x18 {
			__tmp1048 := Decode_byte_1(_s)
			_i := __tmp1048
			__tmp1051 := Operators_i16x8_extract_lane_s_1(_i)
			__tmp906 = __tmp1051
		} else if __tmp907 == 0x19 {
			__tmp1053 := Decode_byte_1(_s)
			_i := __tmp1053
			__tmp1056 := Operators_i16x8_extract_lane_u_1(_i)
			__tmp906 = __tmp1056
		} else if __tmp907 == 0x1a {
			__tmp1058 := Decode_byte_1(_s)
			_i := __tmp1058
			__tmp1061 := Operators_i16x8_replace_lane_1(_i)
			__tmp906 = __tmp1061
		} else if __tmp907 == 0x1b {
			__tmp1063 := Decode_byte_1(_s)
			_i := __tmp1063
			__tmp1066 := Operators_i32x4_extract_lane_1(_i)
			__tmp906 = __tmp1066
		} else if __tmp907 == 0x1c {
			__tmp1068 := Decode_byte_1(_s)
			_i := __tmp1068
			__tmp1071 := Operators_i32x4_replace_lane_1(_i)
			__tmp906 = __tmp1071
		} else if __tmp907 == 0x1d {
			__tmp1073 := Decode_byte_1(_s)
			_i := __tmp1073
			__tmp1076 := Operators_i64x2_extract_lane_1(_i)
			__tmp906 = __tmp1076
		} else if __tmp907 == 0x1e {
			__tmp1078 := Decode_byte_1(_s)
			_i := __tmp1078
			__tmp1081 := Operators_i64x2_replace_lane_1(_i)
			__tmp906 = __tmp1081
		} else if __tmp907 == 0x1f {
			__tmp1083 := Decode_byte_1(_s)
			_i := __tmp1083
			__tmp1086 := Operators_f32x4_extract_lane_1(_i)
			__tmp906 = __tmp1086
		} else if __tmp907 == 0x20 {
			__tmp1088 := Decode_byte_1(_s)
			_i := __tmp1088
			__tmp1091 := Operators_f32x4_replace_lane_1(_i)
			__tmp906 = __tmp1091
		} else if __tmp907 == 0x21 {
			__tmp1093 := Decode_byte_1(_s)
			_i := __tmp1093
			__tmp1096 := Operators_f64x2_extract_lane_1(_i)
			__tmp906 = __tmp1096
		} else if __tmp907 == 0x22 {
			__tmp1098 := Decode_byte_1(_s)
			_i := __tmp1098
			__tmp1101 := Operators_f64x2_replace_lane_1(_i)
			__tmp906 = __tmp1101
		} else if __tmp907 == 0x23 {
			__tmp1103 := Operators_i8x16_eq
			__tmp906 = __tmp1103
		} else if __tmp907 == 0x24 {
			__tmp1104 := Operators_i8x16_ne
			__tmp906 = __tmp1104
		} else if __tmp907 == 0x25 {
			__tmp1105 := Operators_i8x16_lt_s
			__tmp906 = __tmp1105
		} else if __tmp907 == 0x26 {
			__tmp1106 := Operators_i8x16_lt_u
			__tmp906 = __tmp1106
		} else if __tmp907 == 0x27 {
			__tmp1107 := Operators_i8x16_gt_s
			__tmp906 = __tmp1107
		} else if __tmp907 == 0x28 {
			__tmp1108 := Operators_i8x16_gt_u
			__tmp906 = __tmp1108
		} else if __tmp907 == 0x29 {
			__tmp1109 := Operators_i8x16_le_s
			__tmp906 = __tmp1109
		} else if __tmp907 == 0x2a {
			__tmp1110 := Operators_i8x16_le_u
			__tmp906 = __tmp1110
		} else if __tmp907 == 0x2b {
			__tmp1111 := Operators_i8x16_ge_s
			__tmp906 = __tmp1111
		} else if __tmp907 == 0x2c {
			__tmp1112 := Operators_i8x16_ge_u
			__tmp906 = __tmp1112
		} else if __tmp907 == 0x2d {
			__tmp1113 := Operators_i16x8_eq
			__tmp906 = __tmp1113
		} else if __tmp907 == 0x2e {
			__tmp1114 := Operators_i16x8_ne
			__tmp906 = __tmp1114
		} else if __tmp907 == 0x2f {
			__tmp1115 := Operators_i16x8_lt_s
			__tmp906 = __tmp1115
		} else if __tmp907 == 0x30 {
			__tmp1116 := Operators_i16x8_lt_u
			__tmp906 = __tmp1116
		} else if __tmp907 == 0x31 {
			__tmp1117 := Operators_i16x8_gt_s
			__tmp906 = __tmp1117
		} else if __tmp907 == 0x32 {
			__tmp1118 := Operators_i16x8_gt_u
			__tmp906 = __tmp1118
		} else if __tmp907 == 0x33 {
			__tmp1119 := Operators_i16x8_le_s
			__tmp906 = __tmp1119
		} else if __tmp907 == 0x34 {
			__tmp1120 := Operators_i16x8_le_u
			__tmp906 = __tmp1120
		} else if __tmp907 == 0x35 {
			__tmp1121 := Operators_i16x8_ge_s
			__tmp906 = __tmp1121
		} else if __tmp907 == 0x36 {
			__tmp1122 := Operators_i16x8_ge_u
			__tmp906 = __tmp1122
		} else if __tmp907 == 0x37 {
			__tmp1123 := Operators_i32x4_eq
			__tmp906 = __tmp1123
		} else if __tmp907 == 0x38 {
			__tmp1124 := Operators_i32x4_ne
			__tmp906 = __tmp1124
		} else if __tmp907 == 0x39 {
			__tmp1125 := Operators_i32x4_lt_s
			__tmp906 = __tmp1125
		} else if __tmp907 == 0x3a {
			__tmp1126 := Operators_i32x4_lt_u
			__tmp906 = __tmp1126
		} else if __tmp907 == 0x3b {
			__tmp1127 := Operators_i32x4_gt_s
			__tmp906 = __tmp1127
		} else if __tmp907 == 0x3c {
			__tmp1128 := Operators_i32x4_gt_u
			__tmp906 = __tmp1128
		} else if __tmp907 == 0x3d {
			__tmp1129 := Operators_i32x4_le_s
			__tmp906 = __tmp1129
		} else if __tmp907 == 0x3e {
			__tmp1130 := Operators_i32x4_le_u
			__tmp906 = __tmp1130
		} else if __tmp907 == 0x3f {
			__tmp1131 := Operators_i32x4_ge_s
			__tmp906 = __tmp1131
		} else if __tmp907 == 0x40 {
			__tmp1132 := Operators_i32x4_ge_u
			__tmp906 = __tmp1132
		} else if __tmp907 == 0x41 {
			__tmp1133 := Operators_f32x4_eq
			__tmp906 = __tmp1133
		} else if __tmp907 == 0x42 {
			__tmp1134 := Operators_f32x4_ne
			__tmp906 = __tmp1134
		} else if __tmp907 == 0x43 {
			__tmp1135 := Operators_f32x4_lt
			__tmp906 = __tmp1135
		} else if __tmp907 == 0x44 {
			__tmp1136 := Operators_f32x4_gt
			__tmp906 = __tmp1136
		} else if __tmp907 == 0x45 {
			__tmp1137 := Operators_f32x4_le
			__tmp906 = __tmp1137
		} else if __tmp907 == 0x46 {
			__tmp1138 := Operators_f32x4_ge
			__tmp906 = __tmp1138
		} else if __tmp907 == 0x47 {
			__tmp1139 := Operators_f64x2_eq
			__tmp906 = __tmp1139
		} else if __tmp907 == 0x48 {
			__tmp1140 := Operators_f64x2_ne
			__tmp906 = __tmp1140
		} else if __tmp907 == 0x49 {
			__tmp1141 := Operators_f64x2_lt
			__tmp906 = __tmp1141
		} else if __tmp907 == 0x4a {
			__tmp1142 := Operators_f64x2_gt
			__tmp906 = __tmp1142
		} else if __tmp907 == 0x4b {
			__tmp1143 := Operators_f64x2_le
			__tmp906 = __tmp1143
		} else if __tmp907 == 0x4c {
			__tmp1144 := Operators_f64x2_ge
			__tmp906 = __tmp1144
		} else if __tmp907 == 0x4d {
			__tmp1145 := Operators_v128_not
			__tmp906 = __tmp1145
		} else if __tmp907 == 0x4e {
			__tmp1146 := Operators_v128_and
			__tmp906 = __tmp1146
		} else if __tmp907 == 0x4f {
			__tmp1147 := Operators_v128_andnot
			__tmp906 = __tmp1147
		} else if __tmp907 == 0x50 {
			__tmp1148 := Operators_v128_or
			__tmp906 = __tmp1148
		} else if __tmp907 == 0x51 {
			__tmp1149 := Operators_v128_xor
			__tmp906 = __tmp1149
		} else if __tmp907 == 0x52 {
			__tmp1150 := Operators_v128_bitselect
			__tmp906 = __tmp1150
		} else if __tmp907 == 0x53 {
			__tmp1151 := Operators_v128_any_true
			__tmp906 = __tmp1151
		} else if __tmp907 == 0x54 {
			__tmp1152 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1152)
			__tmp1157 := Decode_byte_1(_s)
			_lane := __tmp1157
			__tmp1160 := Operators_v128_load8_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1160
		} else if __tmp907 == 0x55 {
			__tmp1165 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1165)
			__tmp1170 := Decode_byte_1(_s)
			_lane := __tmp1170
			__tmp1173 := Operators_v128_load16_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1173
		} else if __tmp907 == 0x56 {
			__tmp1178 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1178)
			__tmp1183 := Decode_byte_1(_s)
			_lane := __tmp1183
			__tmp1186 := Operators_v128_load32_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1186
		} else if __tmp907 == 0x57 {
			__tmp1191 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1191)
			__tmp1196 := Decode_byte_1(_s)
			_lane := __tmp1196
			__tmp1199 := Operators_v128_load64_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1199
		} else if __tmp907 == 0x58 {
			__tmp1204 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1204)
			__tmp1209 := Decode_byte_1(_s)
			_lane := __tmp1209
			__tmp1212 := Operators_v128_store8_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1212
		} else if __tmp907 == 0x59 {
			__tmp1217 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1217)
			__tmp1222 := Decode_byte_1(_s)
			_lane := __tmp1222
			__tmp1225 := Operators_v128_store16_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1225
		} else if __tmp907 == 0x5a {
			__tmp1230 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1230)
			__tmp1235 := Decode_byte_1(_s)
			_lane := __tmp1235
			__tmp1238 := Operators_v128_store32_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1238
		} else if __tmp907 == 0x5b {
			__tmp1243 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1243)
			__tmp1248 := Decode_byte_1(_s)
			_lane := __tmp1248
			__tmp1251 := Operators_v128_store64_lane_4(_x, _a, _o, _lane)
			__tmp906 = __tmp1251
		} else if __tmp907 == 0x5c {
			__tmp1256 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1256)
			__tmp1261 := Operators_v128_load32_zero_3(_x, _a, _o)
			__tmp906 = __tmp1261
		} else if __tmp907 == 0x5d {
			__tmp1265 := Decode_memop_1(_s)
			_x, _a, _o := __unpack_Types_local_idx_Source_phrase___OInt___OInt64(__tmp1265)
			__tmp1270 := Operators_v128_load64_zero_3(_x, _a, _o)
			__tmp906 = __tmp1270
		} else if __tmp907 == 0x5e {
			__tmp1274 := Operators_f32x4_demote_f64x2_zero
			__tmp906 = __tmp1274
		} else if __tmp907 == 0x5f {
			__tmp1275 := Operators_f64x2_promote_low_f32x4
			__tmp906 = __tmp1275
		} else if __tmp907 == 0x60 {
			__tmp1276 := Operators_i8x16_abs
			__tmp906 = __tmp1276
		} else if __tmp907 == 0x61 {
			__tmp1277 := Operators_i8x16_neg
			__tmp906 = __tmp1277
		} else if __tmp907 == 0x62 {
			__tmp1278 := Operators_i8x16_popcnt
			__tmp906 = __tmp1278
		} else if __tmp907 == 0x63 {
			__tmp1279 := Operators_i8x16_all_true
			__tmp906 = __tmp1279
		} else if __tmp907 == 0x64 {
			__tmp1280 := Operators_i8x16_bitmask
			__tmp906 = __tmp1280
		} else if __tmp907 == 0x65 {
			__tmp1281 := Operators_i8x16_narrow_i16x8_s
			__tmp906 = __tmp1281
		} else if __tmp907 == 0x66 {
			__tmp1282 := Operators_i8x16_narrow_i16x8_u
			__tmp906 = __tmp1282
		} else if __tmp907 == 0x67 {
			__tmp1283 := Operators_f32x4_ceil
			__tmp906 = __tmp1283
		} else if __tmp907 == 0x68 {
			__tmp1284 := Operators_f32x4_floor
			__tmp906 = __tmp1284
		} else if __tmp907 == 0x69 {
			__tmp1285 := Operators_f32x4_trunc
			__tmp906 = __tmp1285
		} else if __tmp907 == 0x6a {
			__tmp1286 := Operators_f32x4_nearest
			__tmp906 = __tmp1286
		} else if __tmp907 == 0x6b {
			__tmp1287 := Operators_i8x16_shl
			__tmp906 = __tmp1287
		} else if __tmp907 == 0x6c {
			__tmp1288 := Operators_i8x16_shr_s
			__tmp906 = __tmp1288
		} else if __tmp907 == 0x6d {
			__tmp1289 := Operators_i8x16_shr_u
			__tmp906 = __tmp1289
		} else if __tmp907 == 0x6e {
			__tmp1290 := Operators_i8x16_add
			__tmp906 = __tmp1290
		} else if __tmp907 == 0x6f {
			__tmp1291 := Operators_i8x16_add_sat_s
			__tmp906 = __tmp1291
		} else if __tmp907 == 0x70 {
			__tmp1292 := Operators_i8x16_add_sat_u
			__tmp906 = __tmp1292
		} else if __tmp907 == 0x71 {
			__tmp1293 := Operators_i8x16_sub
			__tmp906 = __tmp1293
		} else if __tmp907 == 0x72 {
			__tmp1294 := Operators_i8x16_sub_sat_s
			__tmp906 = __tmp1294
		} else if __tmp907 == 0x73 {
			__tmp1295 := Operators_i8x16_sub_sat_u
			__tmp906 = __tmp1295
		} else if __tmp907 == 0x74 {
			__tmp1296 := Operators_f64x2_ceil
			__tmp906 = __tmp1296
		} else if __tmp907 == 0x75 {
			__tmp1297 := Operators_f64x2_floor
			__tmp906 = __tmp1297
		} else if __tmp907 == 0x76 {
			__tmp1298 := Operators_i8x16_min_s
			__tmp906 = __tmp1298
		} else if __tmp907 == 0x77 {
			__tmp1299 := Operators_i8x16_min_u
			__tmp906 = __tmp1299
		} else if __tmp907 == 0x78 {
			__tmp1300 := Operators_i8x16_max_s
			__tmp906 = __tmp1300
		} else if __tmp907 == 0x79 {
			__tmp1301 := Operators_i8x16_max_u
			__tmp906 = __tmp1301
		} else if __tmp907 == 0x7a {
			__tmp1302 := Operators_f64x2_trunc
			__tmp906 = __tmp1302
		} else if __tmp907 == 0x7b {
			__tmp1303 := Operators_i8x16_avgr_u
			__tmp906 = __tmp1303
		} else if __tmp907 == 0x7c {
			__tmp1304 := Operators_i16x8_extadd_pairwise_i8x16_s
			__tmp906 = __tmp1304
		} else if __tmp907 == 0x7d {
			__tmp1305 := Operators_i16x8_extadd_pairwise_i8x16_u
			__tmp906 = __tmp1305
		} else if __tmp907 == 0x7e {
			__tmp1306 := Operators_i32x4_extadd_pairwise_i16x8_s
			__tmp906 = __tmp1306
		} else if __tmp907 == 0x7f {
			__tmp1307 := Operators_i32x4_extadd_pairwise_i16x8_u
			__tmp906 = __tmp1307
		} else if __tmp907 == 0x80 {
			__tmp1308 := Operators_i16x8_abs
			__tmp906 = __tmp1308
		} else if __tmp907 == 0x81 {
			__tmp1309 := Operators_i16x8_neg
			__tmp906 = __tmp1309
		} else if __tmp907 == 0x82 {
			__tmp1310 := Operators_i16x8_q15mulr_sat_s
			__tmp906 = __tmp1310
		} else if __tmp907 == 0x83 {
			__tmp1311 := Operators_i16x8_all_true
			__tmp906 = __tmp1311
		} else if __tmp907 == 0x84 {
			__tmp1312 := Operators_i16x8_bitmask
			__tmp906 = __tmp1312
		} else if __tmp907 == 0x85 {
			__tmp1313 := Operators_i16x8_narrow_i32x4_s
			__tmp906 = __tmp1313
		} else if __tmp907 == 0x86 {
			__tmp1314 := Operators_i16x8_narrow_i32x4_u
			__tmp906 = __tmp1314
		} else if __tmp907 == 0x87 {
			__tmp1315 := Operators_i16x8_extend_low_i8x16_s
			__tmp906 = __tmp1315
		} else if __tmp907 == 0x88 {
			__tmp1316 := Operators_i16x8_extend_high_i8x16_s
			__tmp906 = __tmp1316
		} else if __tmp907 == 0x89 {
			__tmp1317 := Operators_i16x8_extend_low_i8x16_u
			__tmp906 = __tmp1317
		} else if __tmp907 == 0x8a {
			__tmp1318 := Operators_i16x8_extend_high_i8x16_u
			__tmp906 = __tmp1318
		} else if __tmp907 == 0x8b {
			__tmp1319 := Operators_i16x8_shl
			__tmp906 = __tmp1319
		} else if __tmp907 == 0x8c {
			__tmp1320 := Operators_i16x8_shr_s
			__tmp906 = __tmp1320
		} else if __tmp907 == 0x8d {
			__tmp1321 := Operators_i16x8_shr_u
			__tmp906 = __tmp1321
		} else if __tmp907 == 0x8e {
			__tmp1322 := Operators_i16x8_add
			__tmp906 = __tmp1322
		} else if __tmp907 == 0x8f {
			__tmp1323 := Operators_i16x8_add_sat_s
			__tmp906 = __tmp1323
		} else if __tmp907 == 0x90 {
			__tmp1324 := Operators_i16x8_add_sat_u
			__tmp906 = __tmp1324
		} else if __tmp907 == 0x91 {
			__tmp1325 := Operators_i16x8_sub
			__tmp906 = __tmp1325
		} else if __tmp907 == 0x92 {
			__tmp1326 := Operators_i16x8_sub_sat_s
			__tmp906 = __tmp1326
		} else if __tmp907 == 0x93 {
			__tmp1327 := Operators_i16x8_sub_sat_u
			__tmp906 = __tmp1327
		} else if __tmp907 == 0x94 {
			__tmp1328 := Operators_f64x2_nearest
			__tmp906 = __tmp1328
		} else if __tmp907 == 0x95 {
			__tmp1329 := Operators_i16x8_mul
			__tmp906 = __tmp1329
		} else if __tmp907 == 0x96 {
			__tmp1330 := Operators_i16x8_min_s
			__tmp906 = __tmp1330
		} else if __tmp907 == 0x97 {
			__tmp1331 := Operators_i16x8_min_u
			__tmp906 = __tmp1331
		} else if __tmp907 == 0x98 {
			__tmp1332 := Operators_i16x8_max_s
			__tmp906 = __tmp1332
		} else if __tmp907 == 0x99 {
			__tmp1333 := Operators_i16x8_max_u
			__tmp906 = __tmp1333
		} else if __tmp907 == 0x9a {
			_n := __tmp907
			__tmp1335 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1335
		} else if __tmp907 == 0x9b {
			__tmp1340 := Operators_i16x8_avgr_u
			__tmp906 = __tmp1340
		} else if __tmp907 == 0x9c {
			__tmp1341 := Operators_i16x8_extmul_low_i8x16_s
			__tmp906 = __tmp1341
		} else if __tmp907 == 0x9d {
			__tmp1342 := Operators_i16x8_extmul_high_i8x16_s
			__tmp906 = __tmp1342
		} else if __tmp907 == 0x9e {
			__tmp1343 := Operators_i16x8_extmul_low_i8x16_u
			__tmp906 = __tmp1343
		} else if __tmp907 == 0x9f {
			__tmp1344 := Operators_i16x8_extmul_high_i8x16_u
			__tmp906 = __tmp1344
		} else if __tmp907 == 0xa0 {
			__tmp1345 := Operators_i32x4_abs
			__tmp906 = __tmp1345
		} else if __tmp907 == 0xa1 {
			__tmp1346 := Operators_i32x4_neg
			__tmp906 = __tmp1346
		} else if __tmp907 == 0xa2 {
			_n := __tmp907
			__tmp1348 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1348
		} else if __tmp907 == 0xa3 {
			__tmp1353 := Operators_i32x4_all_true
			__tmp906 = __tmp1353
		} else if __tmp907 == 0xa4 {
			__tmp1354 := Operators_i32x4_bitmask
			__tmp906 = __tmp1354
		} else if __tmp907 == 0xa5 || __tmp907 == 0xa6 {
			_n := __tmp907
			__tmp1356 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1356
		} else if __tmp907 == 0xa7 {
			__tmp1361 := Operators_i32x4_extend_low_i16x8_s
			__tmp906 = __tmp1361
		} else if __tmp907 == 0xa8 {
			__tmp1362 := Operators_i32x4_extend_high_i16x8_s
			__tmp906 = __tmp1362
		} else if __tmp907 == 0xa9 {
			__tmp1363 := Operators_i32x4_extend_low_i16x8_u
			__tmp906 = __tmp1363
		} else if __tmp907 == 0xaa {
			__tmp1364 := Operators_i32x4_extend_high_i16x8_u
			__tmp906 = __tmp1364
		} else if __tmp907 == 0xab {
			__tmp1365 := Operators_i32x4_shl
			__tmp906 = __tmp1365
		} else if __tmp907 == 0xac {
			__tmp1366 := Operators_i32x4_shr_s
			__tmp906 = __tmp1366
		} else if __tmp907 == 0xad {
			__tmp1367 := Operators_i32x4_shr_u
			__tmp906 = __tmp1367
		} else if __tmp907 == 0xae {
			__tmp1368 := Operators_i32x4_add
			__tmp906 = __tmp1368
		} else if __tmp907 == 0xaf || __tmp907 == 0xb0 {
			_n := __tmp907
			__tmp1370 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1370
		} else if __tmp907 == 0xb1 {
			__tmp1375 := Operators_i32x4_sub
			__tmp906 = __tmp1375
		} else if __tmp907 == 0xb2 || __tmp907 == 0xb3 || __tmp907 == 0xb4 {
			_n := __tmp907
			__tmp1377 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1377
		} else if __tmp907 == 0xb5 {
			__tmp1382 := Operators_i32x4_mul
			__tmp906 = __tmp1382
		} else if __tmp907 == 0xb6 {
			__tmp1383 := Operators_i32x4_min_s
			__tmp906 = __tmp1383
		} else if __tmp907 == 0xb7 {
			__tmp1384 := Operators_i32x4_min_u
			__tmp906 = __tmp1384
		} else if __tmp907 == 0xb8 {
			__tmp1385 := Operators_i32x4_max_s
			__tmp906 = __tmp1385
		} else if __tmp907 == 0xb9 {
			__tmp1386 := Operators_i32x4_max_u
			__tmp906 = __tmp1386
		} else if __tmp907 == 0xba {
			__tmp1387 := Operators_i32x4_dot_i16x8_s
			__tmp906 = __tmp1387
		} else if __tmp907 == 0xbc {
			__tmp1388 := Operators_i32x4_extmul_low_i16x8_s
			__tmp906 = __tmp1388
		} else if __tmp907 == 0xbd {
			__tmp1389 := Operators_i32x4_extmul_high_i16x8_s
			__tmp906 = __tmp1389
		} else if __tmp907 == 0xbe {
			__tmp1390 := Operators_i32x4_extmul_low_i16x8_u
			__tmp906 = __tmp1390
		} else if __tmp907 == 0xbf {
			__tmp1391 := Operators_i32x4_extmul_high_i16x8_u
			__tmp906 = __tmp1391
		} else if __tmp907 == 0xc0 {
			__tmp1392 := Operators_i64x2_abs
			__tmp906 = __tmp1392
		} else if __tmp907 == 0xc1 {
			__tmp1393 := Operators_i64x2_neg
			__tmp906 = __tmp1393
		} else if __tmp907 == 0xc2 {
			_n := __tmp907
			__tmp1395 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1395
		} else if __tmp907 == 0xc3 {
			__tmp1400 := Operators_i64x2_all_true
			__tmp906 = __tmp1400
		} else if __tmp907 == 0xc4 {
			__tmp1401 := Operators_i64x2_bitmask
			__tmp906 = __tmp1401
		} else if __tmp907 == 0xc5 || __tmp907 == 0xc6 {
			_n := __tmp907
			__tmp1403 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1403
		} else if __tmp907 == 0xc7 {
			__tmp1408 := Operators_i64x2_extend_low_i32x4_s
			__tmp906 = __tmp1408
		} else if __tmp907 == 0xc8 {
			__tmp1409 := Operators_i64x2_extend_high_i32x4_s
			__tmp906 = __tmp1409
		} else if __tmp907 == 0xc9 {
			__tmp1410 := Operators_i64x2_extend_low_i32x4_u
			__tmp906 = __tmp1410
		} else if __tmp907 == 0xca {
			__tmp1411 := Operators_i64x2_extend_high_i32x4_u
			__tmp906 = __tmp1411
		} else if __tmp907 == 0xcb {
			__tmp1412 := Operators_i64x2_shl
			__tmp906 = __tmp1412
		} else if __tmp907 == 0xcc {
			__tmp1413 := Operators_i64x2_shr_s
			__tmp906 = __tmp1413
		} else if __tmp907 == 0xcd {
			__tmp1414 := Operators_i64x2_shr_u
			__tmp906 = __tmp1414
		} else if __tmp907 == 0xce {
			__tmp1415 := Operators_i64x2_add
			__tmp906 = __tmp1415
		} else if __tmp907 == 0xcf || __tmp907 == 0xd0 {
			_n := __tmp907
			__tmp1417 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1417
		} else if __tmp907 == 0xd1 {
			__tmp1422 := Operators_i64x2_sub
			__tmp906 = __tmp1422
		} else if __tmp907 == 0xd2 || __tmp907 == 0xd3 || __tmp907 == 0xd4 {
			_n := __tmp907
			__tmp1424 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1424
		} else if __tmp907 == 0xd5 {
			__tmp1429 := Operators_i64x2_mul
			__tmp906 = __tmp1429
		} else if __tmp907 == 0xd6 {
			__tmp1430 := Operators_i64x2_eq
			__tmp906 = __tmp1430
		} else if __tmp907 == 0xd7 {
			__tmp1431 := Operators_i64x2_ne
			__tmp906 = __tmp1431
		} else if __tmp907 == 0xd8 {
			__tmp1432 := Operators_i64x2_lt_s
			__tmp906 = __tmp1432
		} else if __tmp907 == 0xd9 {
			__tmp1433 := Operators_i64x2_gt_s
			__tmp906 = __tmp1433
		} else if __tmp907 == 0xda {
			__tmp1434 := Operators_i64x2_le_s
			__tmp906 = __tmp1434
		} else if __tmp907 == 0xdb {
			__tmp1435 := Operators_i64x2_ge_s
			__tmp906 = __tmp1435
		} else if __tmp907 == 0xdc {
			__tmp1436 := Operators_i64x2_extmul_low_i32x4_s
			__tmp906 = __tmp1436
		} else if __tmp907 == 0xdd {
			__tmp1437 := Operators_i64x2_extmul_high_i32x4_s
			__tmp906 = __tmp1437
		} else if __tmp907 == 0xde {
			__tmp1438 := Operators_i64x2_extmul_low_i32x4_u
			__tmp906 = __tmp1438
		} else if __tmp907 == 0xdf {
			__tmp1439 := Operators_i64x2_extmul_high_i32x4_u
			__tmp906 = __tmp1439
		} else if __tmp907 == 0xe0 {
			__tmp1440 := Operators_f32x4_abs
			__tmp906 = __tmp1440
		} else if __tmp907 == 0xe1 {
			__tmp1441 := Operators_f32x4_neg
			__tmp906 = __tmp1441
		} else if __tmp907 == 0xe2 {
			_n := __tmp907
			__tmp1443 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1443
		} else if __tmp907 == 0xe3 {
			__tmp1448 := Operators_f32x4_sqrt
			__tmp906 = __tmp1448
		} else if __tmp907 == 0xe4 {
			__tmp1449 := Operators_f32x4_add
			__tmp906 = __tmp1449
		} else if __tmp907 == 0xe5 {
			__tmp1450 := Operators_f32x4_sub
			__tmp906 = __tmp1450
		} else if __tmp907 == 0xe6 {
			__tmp1451 := Operators_f32x4_mul
			__tmp906 = __tmp1451
		} else if __tmp907 == 0xe7 {
			__tmp1452 := Operators_f32x4_div
			__tmp906 = __tmp1452
		} else if __tmp907 == 0xe8 {
			__tmp1453 := Operators_f32x4_min
			__tmp906 = __tmp1453
		} else if __tmp907 == 0xe9 {
			__tmp1454 := Operators_f32x4_max
			__tmp906 = __tmp1454
		} else if __tmp907 == 0xea {
			__tmp1455 := Operators_f32x4_pmin
			__tmp906 = __tmp1455
		} else if __tmp907 == 0xeb {
			__tmp1456 := Operators_f32x4_pmax
			__tmp906 = __tmp1456
		} else if __tmp907 == 0xec {
			__tmp1457 := Operators_f64x2_abs
			__tmp906 = __tmp1457
		} else if __tmp907 == 0xed {
			__tmp1458 := Operators_f64x2_neg
			__tmp906 = __tmp1458
		} else if __tmp907 == 0xef {
			__tmp1459 := Operators_f64x2_sqrt
			__tmp906 = __tmp1459
		} else if __tmp907 == 0xf0 {
			__tmp1460 := Operators_f64x2_add
			__tmp906 = __tmp1460
		} else if __tmp907 == 0xf1 {
			__tmp1461 := Operators_f64x2_sub
			__tmp906 = __tmp1461
		} else if __tmp907 == 0xf2 {
			__tmp1462 := Operators_f64x2_mul
			__tmp906 = __tmp1462
		} else if __tmp907 == 0xf3 {
			__tmp1463 := Operators_f64x2_div
			__tmp906 = __tmp1463
		} else if __tmp907 == 0xf4 {
			__tmp1464 := Operators_f64x2_min
			__tmp906 = __tmp1464
		} else if __tmp907 == 0xf5 {
			__tmp1465 := Operators_f64x2_max
			__tmp906 = __tmp1465
		} else if __tmp907 == 0xf6 {
			__tmp1466 := Operators_f64x2_pmin
			__tmp906 = __tmp1466
		} else if __tmp907 == 0xf7 {
			__tmp1467 := Operators_f64x2_pmax
			__tmp906 = __tmp1467
		} else if __tmp907 == 0xf8 {
			__tmp1468 := Operators_i32x4_trunc_sat_f32x4_s
			__tmp906 = __tmp1468
		} else if __tmp907 == 0xf9 {
			__tmp1469 := Operators_i32x4_trunc_sat_f32x4_u
			__tmp906 = __tmp1469
		} else if __tmp907 == 0xfa {
			__tmp1470 := Operators_f32x4_convert_i32x4_s
			__tmp906 = __tmp1470
		} else if __tmp907 == 0xfb {
			__tmp1471 := Operators_f32x4_convert_i32x4_u
			__tmp906 = __tmp1471
		} else if __tmp907 == 0xfc {
			__tmp1472 := Operators_i32x4_trunc_sat_f64x2_s_zero
			__tmp906 = __tmp1472
		} else if __tmp907 == 0xfd {
			__tmp1473 := Operators_i32x4_trunc_sat_f64x2_u_zero
			__tmp906 = __tmp1473
		} else if __tmp907 == 0xfe {
			__tmp1474 := Operators_f64x2_convert_low_i32x4_s
			__tmp906 = __tmp1474
		} else if __tmp907 == 0xff {
			__tmp1475 := Operators_f64x2_convert_low_i32x4_u
			__tmp906 = __tmp1475
		} else if __tmp907 == 0x100 {
			__tmp1476 := Operators_i8x16_relaxed_swizzle
			__tmp906 = __tmp1476
		} else if __tmp907 == 0x101 {
			__tmp1477 := Operators_i32x4_relaxed_trunc_f32x4_s
			__tmp906 = __tmp1477
		} else if __tmp907 == 0x102 {
			__tmp1478 := Operators_i32x4_relaxed_trunc_f32x4_u
			__tmp906 = __tmp1478
		} else if __tmp907 == 0x103 {
			__tmp1479 := Operators_i32x4_relaxed_trunc_f64x2_s_zero
			__tmp906 = __tmp1479
		} else if __tmp907 == 0x104 {
			__tmp1480 := Operators_i32x4_relaxed_trunc_f64x2_u_zero
			__tmp906 = __tmp1480
		} else if __tmp907 == 0x105 {
			__tmp1481 := Operators_f32x4_relaxed_madd
			__tmp906 = __tmp1481
		} else if __tmp907 == 0x106 {
			__tmp1482 := Operators_f32x4_relaxed_nmadd
			__tmp906 = __tmp1482
		} else if __tmp907 == 0x107 {
			__tmp1483 := Operators_f64x2_relaxed_madd
			__tmp906 = __tmp1483
		} else if __tmp907 == 0x108 {
			__tmp1484 := Operators_f64x2_relaxed_nmadd
			__tmp906 = __tmp1484
		} else if __tmp907 == 0x109 {
			__tmp1485 := Operators_i8x16_relaxed_laneselect
			__tmp906 = __tmp1485
		} else if __tmp907 == 0x10a {
			__tmp1486 := Operators_i16x8_relaxed_laneselect
			__tmp906 = __tmp1486
		} else if __tmp907 == 0x10b {
			__tmp1487 := Operators_i32x4_relaxed_laneselect
			__tmp906 = __tmp1487
		} else if __tmp907 == 0x10c {
			__tmp1488 := Operators_i64x2_relaxed_laneselect
			__tmp906 = __tmp1488
		} else if __tmp907 == 0x10d {
			__tmp1489 := Operators_f32x4_relaxed_min
			__tmp906 = __tmp1489
		} else if __tmp907 == 0x10e {
			__tmp1490 := Operators_f32x4_relaxed_max
			__tmp906 = __tmp1490
		} else if __tmp907 == 0x10f {
			__tmp1491 := Operators_f64x2_relaxed_min
			__tmp906 = __tmp1491
		} else if __tmp907 == 0x110 {
			__tmp1492 := Operators_f64x2_relaxed_max
			__tmp906 = __tmp1492
		} else if __tmp907 == 0x111 {
			__tmp1493 := Operators_i16x8_relaxed_q15mulr_s
			__tmp906 = __tmp1493
		} else if __tmp907 == 0x112 {
			__tmp1494 := Operators_i16x8_relaxed_dot_i8x16_i7x16_s
			__tmp906 = __tmp1494
		} else if __tmp907 == 0x113 {
			__tmp1495 := Operators_i32x4_relaxed_dot_i8x16_i7x16_add_s
			__tmp906 = __tmp1495
		} else if _n := __tmp907; true {
			_ = _n
			__tmp1498 := Decode_illegal_3(_s, _pos, I32_to_int_u_1(_n))
			__tmp906 = __tmp1498
		}
		__tmp4 = __tmp906
	} else if _b := __tmp5; true {
		_ = _b
		__tmp1505 := Decode_illegal_3(_s, _pos, _b)
		__tmp4 = __tmp1505
	}
	return __tmp4
}

var Decode_instr = Decode_instr_1

var Decode_magic = 0x6d736100

func __unpack_Types_addr_type___Types_limits(t struct {
	F0 OTypes_addr_type
	F1 OTypes_limits
}) (OTypes_addr_type, OTypes_limits) {
	return t.F0, t.F1
}

func __unpack_Types_local_idx_Source_phrase___OInt___OInt64(t struct {
	F0 OSource_phrase[OTypes_local_idx]
	F1 OInt
	F2 OInt64
}) (OSource_phrase[OTypes_local_idx], OInt, OInt64) {
	return t.F0, t.F1, t.F2
}
