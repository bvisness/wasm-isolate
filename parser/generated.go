// This file is automatically generated. DO NOT EDIT.
package parser

type OTypeIdx = OInt32
type OLocalIdx = OInt32
type OName = string

type ONullKind int

const (
	KNoNull ONullKind = iota + 1
	KNull
)

type ONull interface {
	Kind() ONullKind
}

type SimpleONull struct {
	kind ONullKind
}

func (t SimpleONull) Kind() ONullKind {
	return t.kind
}

var _NoNull ONull = SimpleONull{KNoNull}
var _Null ONull = SimpleONull{KNull}

type OMutKind int

const (
	KCons OMutKind = iota + 1
	KVar
)

type OMut interface {
	Kind() OMutKind
}

type SimpleOMut struct {
	kind OMutKind
}

func (t SimpleOMut) Kind() OMutKind {
	return t.kind
}

var _Cons OMut = SimpleOMut{KCons}
var _Var OMut = SimpleOMut{KVar}

type OInitKind int

const (
	KSet OInitKind = iota + 1
	KUnset
)

type OInit interface {
	Kind() OInitKind
}

type SimpleOInit struct {
	kind OInitKind
}

func (t SimpleOInit) Kind() OInitKind {
	return t.kind
}

var _Set OInit = SimpleOInit{KSet}
var _Unset OInit = SimpleOInit{KUnset}

type OFinalKind int

const (
	KNoFinal OFinalKind = iota + 1
	KFinal
)

type OFinal interface {
	Kind() OFinalKind
}

type SimpleOFinal struct {
	kind OFinalKind
}

func (t SimpleOFinal) Kind() OFinalKind {
	return t.kind
}

var _NoFinal OFinal = SimpleOFinal{KNoFinal}
var _Final OFinal = SimpleOFinal{KFinal}

type OVarKind int

const (
	KStatX OVarKind = iota + 1
	KRecX
)

type OVar interface {
	Kind() OVarKind
}

type SimpleOVar struct {
	kind OVarKind
}

func (t SimpleOVar) Kind() OVarKind {
	return t.kind
}

type OVar_StatX struct {
	V OTypeIdx
}

func (t OVar_StatX) Kind() OVarKind {
	return KStatX
}
func _StatX_1(v OTypeIdx) OVar {
	return OVar_StatX{v}
}

type OVar_RecX struct {
	V OInt32
}

func (t OVar_RecX) Kind() OVarKind {
	return KRecX
}
func _RecX_1(v OInt32) OVar {
	return OVar_RecX{v}
}

type OAddrTypeKind int

const (
	KI32AT OAddrTypeKind = iota + 1
	KI64AT
)

type OAddrType interface {
	Kind() OAddrTypeKind
}

type SimpleOAddrType struct {
	kind OAddrTypeKind
}

func (t SimpleOAddrType) Kind() OAddrTypeKind {
	return t.kind
}

var _I32AT OAddrType = SimpleOAddrType{KI32AT}
var _I64AT OAddrType = SimpleOAddrType{KI64AT}

type ONumTypeKind int

const (
	KI32T ONumTypeKind = iota + 1
	KI64T
	KF32T
	KF64T
)

type ONumType interface {
	Kind() ONumTypeKind
}

type SimpleONumType struct {
	kind ONumTypeKind
}

func (t SimpleONumType) Kind() ONumTypeKind {
	return t.kind
}

var _I32T ONumType = SimpleONumType{KI32T}
var _I64T ONumType = SimpleONumType{KI64T}
var _F32T ONumType = SimpleONumType{KF32T}
var _F64T ONumType = SimpleONumType{KF64T}

type OVecTypeKind int

const (
	KV128T OVecTypeKind = iota + 1
)

type OVecType interface {
	Kind() OVecTypeKind
}

type SimpleOVecType struct {
	kind OVecTypeKind
}

func (t SimpleOVecType) Kind() OVecTypeKind {
	return t.kind
}

var _V128T OVecType = SimpleOVecType{KV128T}

type OHeapTypeKind int

const (
	KAnyHT OHeapTypeKind = iota + 1
	KNoneHT
	KEqHT
	KI31HT
	KStructHT
	KArrayHT
	KFuncHT
	KNoFuncHT
	KExnHT
	KNoExnHT
	KExternHT
	KNoExternHT
	KVarHT
	KDefHT
	KBotHT
)

type OHeapType interface {
	Kind() OHeapTypeKind
}

type SimpleOHeapType struct {
	kind OHeapTypeKind
}

func (t SimpleOHeapType) Kind() OHeapTypeKind {
	return t.kind
}

var _AnyHT OHeapType = SimpleOHeapType{KAnyHT}
var _NoneHT OHeapType = SimpleOHeapType{KNoneHT}
var _EqHT OHeapType = SimpleOHeapType{KEqHT}
var _I31HT OHeapType = SimpleOHeapType{KI31HT}
var _StructHT OHeapType = SimpleOHeapType{KStructHT}
var _ArrayHT OHeapType = SimpleOHeapType{KArrayHT}
var _FuncHT OHeapType = SimpleOHeapType{KFuncHT}
var _NoFuncHT OHeapType = SimpleOHeapType{KNoFuncHT}
var _ExnHT OHeapType = SimpleOHeapType{KExnHT}
var _NoExnHT OHeapType = SimpleOHeapType{KNoExnHT}
var _ExternHT OHeapType = SimpleOHeapType{KExternHT}
var _NoExternHT OHeapType = SimpleOHeapType{KNoExternHT}

type OHeapType_VarHT struct {
	V OVar
}

func (t OHeapType_VarHT) Kind() OHeapTypeKind {
	return KVarHT
}
func _VarHT_1(v OVar) OHeapType {
	return OHeapType_VarHT{v}
}

type OHeapType_DefHT struct {
	V ODefType
}

func (t OHeapType_DefHT) Kind() OHeapTypeKind {
	return KDefHT
}
func _DefHT_1(v ODefType) OHeapType {
	return OHeapType_DefHT{v}
}

var _BotHT OHeapType = SimpleOHeapType{KBotHT}

type ORefType = struct {
	F0 ONull
	F1 OHeapType
}

type OValTypeKind int

const (
	KNumT OValTypeKind = iota + 1
	KVecT
	KRefT
	KBotT
)

type OValType interface {
	Kind() OValTypeKind
}

type SimpleOValType struct {
	kind OValTypeKind
}

func (t SimpleOValType) Kind() OValTypeKind {
	return t.kind
}

type OValType_NumT struct {
	V ONumType
}

func (t OValType_NumT) Kind() OValTypeKind {
	return KNumT
}
func _NumT_1(v ONumType) OValType {
	return OValType_NumT{v}
}

type OValType_VecT struct {
	V OVecType
}

func (t OValType_VecT) Kind() OValTypeKind {
	return KVecT
}
func _VecT_1(v OVecType) OValType {
	return OValType_VecT{v}
}

type OValType_RefT struct {
	V ORefType
}

func (t OValType_RefT) Kind() OValTypeKind {
	return KRefT
}
func _RefT_1(v ORefType) OValType {
	return OValType_RefT{v}
}

var _BotT OValType = SimpleOValType{KBotT}

type OResultType = []OValType

type OInstrTypeKind int

const (
	KInstrT OInstrTypeKind = iota + 1
)

type OInstrType interface {
	Kind() OInstrTypeKind
}

type SimpleOInstrType struct {
	kind OInstrTypeKind
}

func (t SimpleOInstrType) Kind() OInstrTypeKind {
	return t.kind
}

type OInstrType_InstrT struct {
	V OResultType
}

func (t OInstrType_InstrT) Kind() OInstrTypeKind {
	return KInstrT
}
func _InstrT_1(v OResultType) OInstrType {
	return OInstrType_InstrT{v}
}

type OStorageTypeKind int

const (
	KValStorageT OStorageTypeKind = iota + 1
	KPackStorageT
)

type OStorageType interface {
	Kind() OStorageTypeKind
}

type SimpleOStorageType struct {
	kind OStorageTypeKind
}

func (t SimpleOStorageType) Kind() OStorageTypeKind {
	return t.kind
}

type OStorageType_ValStorageT struct {
	V OValType
}

func (t OStorageType_ValStorageT) Kind() OStorageTypeKind {
	return KValStorageT
}
func _ValStorageT_1(v OValType) OStorageType {
	return OStorageType_ValStorageT{v}
}

type OStorageType_PackStorageT struct {
	V OPack.packSize
}

func (t OStorageType_PackStorageT) Kind() OStorageTypeKind {
	return KPackStorageT
}
func _PackStorageT_1(v OPack.packSize) OStorageType {
	return OStorageType_PackStorageT{v}
}

type OFieldTypeKind int

const (
	KFieldT OFieldTypeKind = iota + 1
)

type OFieldType interface {
	Kind() OFieldTypeKind
}

type SimpleOFieldType struct {
	kind OFieldTypeKind
}

func (t SimpleOFieldType) Kind() OFieldTypeKind {
	return t.kind
}

type OFieldType_FieldT struct {
	V OMut
}

func (t OFieldType_FieldT) Kind() OFieldTypeKind {
	return KFieldT
}
func _FieldT_1(v OMut) OFieldType {
	return OFieldType_FieldT{v}
}

type OStructTypeKind int

const (
	KStructT OStructTypeKind = iota + 1
)

type OStructType interface {
	Kind() OStructTypeKind
}

type SimpleOStructType struct {
	kind OStructTypeKind
}

func (t SimpleOStructType) Kind() OStructTypeKind {
	return t.kind
}

type OStructType_StructT struct {
	V []OFieldType
}

func (t OStructType_StructT) Kind() OStructTypeKind {
	return KStructT
}
func _StructT_1(v []OFieldType) OStructType {
	return OStructType_StructT{v}
}

type OArrayTypeKind int

const (
	KArrayT OArrayTypeKind = iota + 1
)

type OArrayType interface {
	Kind() OArrayTypeKind
}

type SimpleOArrayType struct {
	kind OArrayTypeKind
}

func (t SimpleOArrayType) Kind() OArrayTypeKind {
	return t.kind
}

type OArrayType_ArrayT struct {
	V OFieldType
}

func (t OArrayType_ArrayT) Kind() OArrayTypeKind {
	return KArrayT
}
func _ArrayT_1(v OFieldType) OArrayType {
	return OArrayType_ArrayT{v}
}

type OFuncTypeKind int

const (
	KFuncT OFuncTypeKind = iota + 1
)

type OFuncType interface {
	Kind() OFuncTypeKind
}

type SimpleOFuncType struct {
	kind OFuncTypeKind
}

func (t SimpleOFuncType) Kind() OFuncTypeKind {
	return t.kind
}

type OFuncType_FuncT struct {
	V OResultType
}

func (t OFuncType_FuncT) Kind() OFuncTypeKind {
	return KFuncT
}
func _FuncT_1(v OResultType) OFuncType {
	return OFuncType_FuncT{v}
}

type OStrTypeKind int

const (
	KDefStructT OStrTypeKind = iota + 1
	KDefArrayT
	KDefFuncT
)

type OStrType interface {
	Kind() OStrTypeKind
}

type SimpleOStrType struct {
	kind OStrTypeKind
}

func (t SimpleOStrType) Kind() OStrTypeKind {
	return t.kind
}

type OStrType_DefStructT struct {
	V OStructType
}

func (t OStrType_DefStructT) Kind() OStrTypeKind {
	return KDefStructT
}
func _DefStructT_1(v OStructType) OStrType {
	return OStrType_DefStructT{v}
}

type OStrType_DefArrayT struct {
	V OArrayType
}

func (t OStrType_DefArrayT) Kind() OStrTypeKind {
	return KDefArrayT
}
func _DefArrayT_1(v OArrayType) OStrType {
	return OStrType_DefArrayT{v}
}

type OStrType_DefFuncT struct {
	V OFuncType
}

func (t OStrType_DefFuncT) Kind() OStrTypeKind {
	return KDefFuncT
}
func _DefFuncT_1(v OFuncType) OStrType {
	return OStrType_DefFuncT{v}
}

type OSubTypeKind int

const (
	KSubT OSubTypeKind = iota + 1
)

type OSubType interface {
	Kind() OSubTypeKind
}

type SimpleOSubType struct {
	kind OSubTypeKind
}

func (t SimpleOSubType) Kind() OSubTypeKind {
	return t.kind
}

type OSubType_SubT struct {
	V OFinal
}

func (t OSubType_SubT) Kind() OSubTypeKind {
	return KSubT
}
func _SubT_1(v OFinal) OSubType {
	return OSubType_SubT{v}
}

type ORecTypeKind int

const (
	KRecT ORecTypeKind = iota + 1
)

type ORecType interface {
	Kind() ORecTypeKind
}

type SimpleORecType struct {
	kind ORecTypeKind
}

func (t SimpleORecType) Kind() ORecTypeKind {
	return t.kind
}

type ORecType_RecT struct {
	V []OSubType
}

func (t ORecType_RecT) Kind() ORecTypeKind {
	return KRecT
}
func _RecT_1(v []OSubType) ORecType {
	return ORecType_RecT{v}
}

type ODefTypeKind int

const (
	KDefT ODefTypeKind = iota + 1
)

type ODefType interface {
	Kind() ODefTypeKind
}

type SimpleODefType struct {
	kind ODefTypeKind
}

func (t SimpleODefType) Kind() ODefTypeKind {
	return t.kind
}

type ODefType_DefT struct {
	V ORecType
}

func (t ODefType_DefT) Kind() ODefTypeKind {
	return KDefT
}
func _DefT_1(v ORecType) ODefType {
	return ODefType_DefT{v}
}

type OTableTypeKind int

const (
	KTableT OTableTypeKind = iota + 1
)

type OTableType interface {
	Kind() OTableTypeKind
}

type SimpleOTableType struct {
	kind OTableTypeKind
}

func (t SimpleOTableType) Kind() OTableTypeKind {
	return t.kind
}

type OTableType_TableT struct {
	V OAddrType
}

func (t OTableType_TableT) Kind() OTableTypeKind {
	return KTableT
}
func _TableT_1(v OAddrType) OTableType {
	return OTableType_TableT{v}
}

type OMemoryTypeKind int

const (
	KMemoryT OMemoryTypeKind = iota + 1
)

type OMemoryType interface {
	Kind() OMemoryTypeKind
}

type SimpleOMemoryType struct {
	kind OMemoryTypeKind
}

func (t SimpleOMemoryType) Kind() OMemoryTypeKind {
	return t.kind
}

type OMemoryType_MemoryT struct {
	V OAddrType
}

func (t OMemoryType_MemoryT) Kind() OMemoryTypeKind {
	return KMemoryT
}
func _MemoryT_1(v OAddrType) OMemoryType {
	return OMemoryType_MemoryT{v}
}

type OGlobalTypeKind int

const (
	KGlobalT OGlobalTypeKind = iota + 1
)

type OGlobalType interface {
	Kind() OGlobalTypeKind
}

type SimpleOGlobalType struct {
	kind OGlobalTypeKind
}

func (t SimpleOGlobalType) Kind() OGlobalTypeKind {
	return t.kind
}

type OGlobalType_GlobalT struct {
	V OMut
}

func (t OGlobalType_GlobalT) Kind() OGlobalTypeKind {
	return KGlobalT
}
func _GlobalT_1(v OMut) OGlobalType {
	return OGlobalType_GlobalT{v}
}

type OTagTypeKind int

const (
	KTagT OTagTypeKind = iota + 1
)

type OTagType interface {
	Kind() OTagTypeKind
}

type SimpleOTagType struct {
	kind OTagTypeKind
}

func (t SimpleOTagType) Kind() OTagTypeKind {
	return t.kind
}

type OTagType_TagT struct {
	V ODefType
}

func (t OTagType_TagT) Kind() OTagTypeKind {
	return KTagT
}
func _TagT_1(v ODefType) OTagType {
	return OTagType_TagT{v}
}

type OLocalTypeKind int

const (
	KLocalT OLocalTypeKind = iota + 1
)

type OLocalType interface {
	Kind() OLocalTypeKind
}

type SimpleOLocalType struct {
	kind OLocalTypeKind
}

func (t SimpleOLocalType) Kind() OLocalTypeKind {
	return t.kind
}

type OLocalType_LocalT struct {
	V OInit
}

func (t OLocalType_LocalT) Kind() OLocalTypeKind {
	return KLocalT
}
func _LocalT_1(v OInit) OLocalType {
	return OLocalType_LocalT{v}
}

type OExternTypeKind int

const (
	KExternFuncT OExternTypeKind = iota + 1
	KExternTableT
	KExternMemoryT
	KExternGlobalT
	KExternTagT
)

type OExternType interface {
	Kind() OExternTypeKind
}

type SimpleOExternType struct {
	kind OExternTypeKind
}

func (t SimpleOExternType) Kind() OExternTypeKind {
	return t.kind
}

type OExternType_ExternFuncT struct {
	V ODefType
}

func (t OExternType_ExternFuncT) Kind() OExternTypeKind {
	return KExternFuncT
}
func _ExternFuncT_1(v ODefType) OExternType {
	return OExternType_ExternFuncT{v}
}

type OExternType_ExternTableT struct {
	V OTableType
}

func (t OExternType_ExternTableT) Kind() OExternTypeKind {
	return KExternTableT
}
func _ExternTableT_1(v OTableType) OExternType {
	return OExternType_ExternTableT{v}
}

type OExternType_ExternMemoryT struct {
	V OMemoryType
}

func (t OExternType_ExternMemoryT) Kind() OExternTypeKind {
	return KExternMemoryT
}
func _ExternMemoryT_1(v OMemoryType) OExternType {
	return OExternType_ExternMemoryT{v}
}

type OExternType_ExternGlobalT struct {
	V OGlobalType
}

func (t OExternType_ExternGlobalT) Kind() OExternTypeKind {
	return KExternGlobalT
}
func _ExternGlobalT_1(v OGlobalType) OExternType {
	return OExternType_ExternGlobalT{v}
}

type OExternType_ExternTagT struct {
	V OTagType
}

func (t OExternType_ExternTagT) Kind() OExternTypeKind {
	return KExternTagT
}
func _ExternTagT_1(v OTagType) OExternType {
	return OExternType_ExternTagT{v}
}

type OExportTypeKind int

const (
	KExportT OExportTypeKind = iota + 1
)

type OExportType interface {
	Kind() OExportTypeKind
}

type SimpleOExportType struct {
	kind OExportTypeKind
}

func (t SimpleOExportType) Kind() OExportTypeKind {
	return t.kind
}

type OExportType_ExportT struct {
	V OExternType
}

func (t OExportType_ExportT) Kind() OExportTypeKind {
	return KExportT
}
func _ExportT_1(v OExternType) OExportType {
	return OExportType_ExportT{v}
}

type OImportTypeKind int

const (
	KImportT OImportTypeKind = iota + 1
)

type OImportType interface {
	Kind() OImportTypeKind
}

type SimpleOImportType struct {
	kind OImportTypeKind
}

func (t SimpleOImportType) Kind() OImportTypeKind {
	return t.kind
}

type OImportType_ImportT struct {
	V OExternType
}

func (t OImportType_ImportT) Kind() OImportTypeKind {
	return KImportT
}
func _ImportT_1(v OExternType) OImportType {
	return OImportType_ImportT{v}
}

type OModuleTypeKind int

const (
	KModuleT OModuleTypeKind = iota + 1
)

type OModuleType interface {
	Kind() OModuleTypeKind
}

type SimpleOModuleType struct {
	kind OModuleTypeKind
}

func (t SimpleOModuleType) Kind() OModuleTypeKind {
	return t.kind
}

type OModuleType_ModuleT struct {
	V []OImportType
}

func (t OModuleType_ModuleT) Kind() OModuleTypeKind {
	return KModuleT
}
func _ModuleT_1(v []OImportType) OModuleType {
	return OModuleType_ModuleT{v}
}

type OSubst = func(OVar) OHeapType
type Instr_i32_const struct {
	N *Phrase[OTypeIdx]
}

func _i32_const_1(_n *Phrase[OTypeIdx]) Instr_i32_const {
	return Instr_i32_const{
		N: _n,
	}
}

var _i32_const = _i32_const_1

type Instr_i64_const struct {
	N *Phrase[OInt64]
}

func _i64_const_1(_n *Phrase[OInt64]) Instr_i64_const {
	return Instr_i64_const{
		N: _n,
	}
}

var _i64_const = _i64_const_1

type Instr_f32_const struct {
	N *Phrase[float32]
}

func _f32_const_1(_n *Phrase[float32]) Instr_f32_const {
	return Instr_f32_const{
		N: _n,
	}
}

var _f32_const = _f32_const_1

type Instr_f64_const struct {
	N *Phrase[float64]
}

func _f64_const_1(_n *Phrase[float64]) Instr_f64_const {
	return Instr_f64_const{
		N: _n,
	}
}

var _f64_const = _f64_const_1

type Instr_v128_const struct {
	N *Phrase[V128]
}

func _v128_const_1(_n *Phrase[V128]) Instr_v128_const {
	return Instr_v128_const{
		N: _n,
	}
}

var _v128_const = _v128_const_1

type Instr_ref_null struct {
	T OHeapType
}

func _ref_null_1(_t OHeapType) Instr_ref_null {
	return Instr_ref_null{
		T: _t,
	}
}

var _ref_null = _ref_null_1

type Instr_ref_func struct {
	X *Phrase[OInt32]
}

func _ref_func_1(_x *Phrase[OInt32]) Instr_ref_func {
	return Instr_ref_func{
		X: _x,
	}
}

var _ref_func = _ref_func_1

type Instr_at_const struct{}

func _at_const_0() Instr_at_const {
	return Instr_at_const{}
}

var _at_const = _at_const_0

type Instr_unreachable struct{}

func _unreachable_0() Instr_unreachable {
	return Instr_unreachable{}
}

var _unreachable = _unreachable_0

type Instr_nop struct{}

func _nop_0() Instr_nop {
	return Instr_nop{}
}

var _nop = _nop_0

type Instr_drop struct{}

func _drop_0() Instr_drop {
	return Instr_drop{}
}

var _drop = _drop_0

type Instr_select struct {
	T *[]OValType
}

func _select_1(_t *[]OValType) Instr_select {
	return Instr_select{
		T: _t,
	}
}

var _select = _select_1

type Instr_block struct {
	Bt OBlockType
	Es []*Phrase[Instruction_]
}

func _block_2(_bt OBlockType, _es []*Phrase[Instruction_]) Instr_block {
	return Instr_block{
		Bt: _bt,
		Es: _es,
	}
}

var _block = _block_2

type Instr_loop struct {
	Bt OBlockType
	Es []*Phrase[Instruction_]
}

func _loop_2(_bt OBlockType, _es []*Phrase[Instruction_]) Instr_loop {
	return Instr_loop{
		Bt: _bt,
		Es: _es,
	}
}

var _loop = _loop_2

type Instr_if_ struct {
	Bt  OBlockType
	Es1 []*Phrase[Instruction_]
	Es2 []*Phrase[Instruction_]
}

func _if__3(_bt OBlockType, _es1 []*Phrase[Instruction_], _es2 []*Phrase[Instruction_]) Instr_if_ {
	return Instr_if_{
		Bt:  _bt,
		Es1: _es1,
		Es2: _es2,
	}
}

var _if_ = _if__3

type Instr_br struct {
	X *Phrase[OInt32]
}

func _br_1(_x *Phrase[OInt32]) Instr_br {
	return Instr_br{
		X: _x,
	}
}

var _br = _br_1

type Instr_br_if struct {
	X *Phrase[OInt32]
}

func _br_if_1(_x *Phrase[OInt32]) Instr_br_if {
	return Instr_br_if{
		X: _x,
	}
}

var _br_if = _br_if_1

type Instr_br_table struct {
	Xs []*Phrase[OInt32]
	X  *Phrase[OInt32]
}

func _br_table_2(_xs []*Phrase[OInt32], _x *Phrase[OInt32]) Instr_br_table {
	return Instr_br_table{
		Xs: _xs,
		X:  _x,
	}
}

var _br_table = _br_table_2

type Instr_br_on_null struct {
	X *Phrase[OInt32]
}

func _br_on_null_1(_x *Phrase[OInt32]) Instr_br_on_null {
	return Instr_br_on_null{
		X: _x,
	}
}

var _br_on_null = _br_on_null_1

type Instr_br_on_non_null struct {
	X *Phrase[OInt32]
}

func _br_on_non_null_1(_x *Phrase[OInt32]) Instr_br_on_non_null {
	return Instr_br_on_non_null{
		X: _x,
	}
}

var _br_on_non_null = _br_on_non_null_1

type Instr_br_on_cast struct {
	X  *Phrase[OInt32]
	T1 ORefType
	T2 ORefType
}

func _br_on_cast_3(_x *Phrase[OInt32], _t1 ORefType, _t2 ORefType) Instr_br_on_cast {
	return Instr_br_on_cast{
		X:  _x,
		T1: _t1,
		T2: _t2,
	}
}

var _br_on_cast = _br_on_cast_3

type Instr_br_on_cast_fail struct {
	X  *Phrase[OInt32]
	T1 ORefType
	T2 ORefType
}

func _br_on_cast_fail_3(_x *Phrase[OInt32], _t1 ORefType, _t2 ORefType) Instr_br_on_cast_fail {
	return Instr_br_on_cast_fail{
		X:  _x,
		T1: _t1,
		T2: _t2,
	}
}

var _br_on_cast_fail = _br_on_cast_fail_3

type Instr_return struct{}

func _return_0() Instr_return {
	return Instr_return{}
}

var _return = _return_0

type Instr_call struct {
	X *Phrase[OInt32]
}

func _call_1(_x *Phrase[OInt32]) Instr_call {
	return Instr_call{
		X: _x,
	}
}

var _call = _call_1

type Instr_call_ref struct {
	X *Phrase[OInt32]
}

func _call_ref_1(_x *Phrase[OInt32]) Instr_call_ref {
	return Instr_call_ref{
		X: _x,
	}
}

var _call_ref = _call_ref_1

type Instr_call_indirect struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _call_indirect_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_call_indirect {
	return Instr_call_indirect{
		X: _x,
		Y: _y,
	}
}

var _call_indirect = _call_indirect_2

type Instr_return_call struct {
	X *Phrase[OInt32]
}

func _return_call_1(_x *Phrase[OInt32]) Instr_return_call {
	return Instr_return_call{
		X: _x,
	}
}

var _return_call = _return_call_1

type Instr_return_call_ref struct {
	X *Phrase[OInt32]
}

func _return_call_ref_1(_x *Phrase[OInt32]) Instr_return_call_ref {
	return Instr_return_call_ref{
		X: _x,
	}
}

var _return_call_ref = _return_call_ref_1

type Instr_return_call_indirect struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _return_call_indirect_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_return_call_indirect {
	return Instr_return_call_indirect{
		X: _x,
		Y: _y,
	}
}

var _return_call_indirect = _return_call_indirect_2

type Instr_throw struct {
	X *Phrase[OInt32]
}

func _throw_1(_x *Phrase[OInt32]) Instr_throw {
	return Instr_throw{
		X: _x,
	}
}

var _throw = _throw_1

type Instr_throw_ref struct{}

func _throw_ref_0() Instr_throw_ref {
	return Instr_throw_ref{}
}

var _throw_ref = _throw_ref_0

type Instr_try_table struct {
	Bt OBlockType
	Cs []TODO /* catch */
	Es []*Phrase[Instruction_]
}

func _try_table_3(_bt OBlockType, _cs []TODO /* catch */, _es []*Phrase[Instruction_]) Instr_try_table {
	return Instr_try_table{
		Bt: _bt,
		Cs: _cs,
		Es: _es,
	}
}

var _try_table = _try_table_3

type Instr_local_get struct {
	X *Phrase[OInt32]
}

func _local_get_1(_x *Phrase[OInt32]) Instr_local_get {
	return Instr_local_get{
		X: _x,
	}
}

var _local_get = _local_get_1

type Instr_local_set struct {
	X *Phrase[OInt32]
}

func _local_set_1(_x *Phrase[OInt32]) Instr_local_set {
	return Instr_local_set{
		X: _x,
	}
}

var _local_set = _local_set_1

type Instr_local_tee struct {
	X *Phrase[OInt32]
}

func _local_tee_1(_x *Phrase[OInt32]) Instr_local_tee {
	return Instr_local_tee{
		X: _x,
	}
}

var _local_tee = _local_tee_1

type Instr_global_get struct {
	X *Phrase[OInt32]
}

func _global_get_1(_x *Phrase[OInt32]) Instr_global_get {
	return Instr_global_get{
		X: _x,
	}
}

var _global_get = _global_get_1

type Instr_global_set struct {
	X *Phrase[OInt32]
}

func _global_set_1(_x *Phrase[OInt32]) Instr_global_set {
	return Instr_global_set{
		X: _x,
	}
}

var _global_set = _global_set_1

type Instr_table_get struct {
	X *Phrase[OInt32]
}

func _table_get_1(_x *Phrase[OInt32]) Instr_table_get {
	return Instr_table_get{
		X: _x,
	}
}

var _table_get = _table_get_1

type Instr_table_set struct {
	X *Phrase[OInt32]
}

func _table_set_1(_x *Phrase[OInt32]) Instr_table_set {
	return Instr_table_set{
		X: _x,
	}
}

var _table_set = _table_set_1

type Instr_table_size struct {
	X *Phrase[OInt32]
}

func _table_size_1(_x *Phrase[OInt32]) Instr_table_size {
	return Instr_table_size{
		X: _x,
	}
}

var _table_size = _table_size_1

type Instr_table_grow struct {
	X *Phrase[OInt32]
}

func _table_grow_1(_x *Phrase[OInt32]) Instr_table_grow {
	return Instr_table_grow{
		X: _x,
	}
}

var _table_grow = _table_grow_1

type Instr_table_fill struct {
	X *Phrase[OInt32]
}

func _table_fill_1(_x *Phrase[OInt32]) Instr_table_fill {
	return Instr_table_fill{
		X: _x,
	}
}

var _table_fill = _table_fill_1

type Instr_table_copy struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _table_copy_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_table_copy {
	return Instr_table_copy{
		X: _x,
		Y: _y,
	}
}

var _table_copy = _table_copy_2

type Instr_table_init struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _table_init_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_table_init {
	return Instr_table_init{
		X: _x,
		Y: _y,
	}
}

var _table_init = _table_init_2

type Instr_elem_drop struct {
	X *Phrase[OInt32]
}

func _elem_drop_1(_x *Phrase[OInt32]) Instr_elem_drop {
	return Instr_elem_drop{
		X: _x,
	}
}

var _elem_drop = _elem_drop_1

type Instr_i32_load struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_load_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_load {
	return Instr_i32_load{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_load = _i32_load_3

type Instr_i64_load struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load {
	return Instr_i64_load{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load = _i64_load_3

type Instr_f32_load struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _f32_load_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_f32_load {
	return Instr_f32_load{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _f32_load = _f32_load_3

type Instr_f64_load struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _f64_load_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_f64_load {
	return Instr_f64_load{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _f64_load = _f64_load_3

type Instr_i32_load8_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_load8_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_load8_s {
	return Instr_i32_load8_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_load8_s = _i32_load8_s_3

type Instr_i32_load8_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_load8_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_load8_u {
	return Instr_i32_load8_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_load8_u = _i32_load8_u_3

type Instr_i32_load16_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_load16_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_load16_s {
	return Instr_i32_load16_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_load16_s = _i32_load16_s_3

type Instr_i32_load16_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_load16_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_load16_u {
	return Instr_i32_load16_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_load16_u = _i32_load16_u_3

type Instr_i64_load8_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load8_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load8_s {
	return Instr_i64_load8_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load8_s = _i64_load8_s_3

type Instr_i64_load8_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load8_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load8_u {
	return Instr_i64_load8_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load8_u = _i64_load8_u_3

type Instr_i64_load16_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load16_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load16_s {
	return Instr_i64_load16_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load16_s = _i64_load16_s_3

type Instr_i64_load16_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load16_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load16_u {
	return Instr_i64_load16_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load16_u = _i64_load16_u_3

type Instr_i64_load32_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load32_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load32_s {
	return Instr_i64_load32_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load32_s = _i64_load32_s_3

type Instr_i64_load32_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_load32_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_load32_u {
	return Instr_i64_load32_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_load32_u = _i64_load32_u_3

type Instr_i32_store struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_store_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_store {
	return Instr_i32_store{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_store = _i32_store_3

type Instr_i64_store struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_store_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_store {
	return Instr_i64_store{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_store = _i64_store_3

type Instr_f32_store struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _f32_store_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_f32_store {
	return Instr_f32_store{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _f32_store = _f32_store_3

type Instr_f64_store struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _f64_store_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_f64_store {
	return Instr_f64_store{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _f64_store = _f64_store_3

type Instr_i32_store8 struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_store8_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_store8 {
	return Instr_i32_store8{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_store8 = _i32_store8_3

type Instr_i32_store16 struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i32_store16_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i32_store16 {
	return Instr_i32_store16{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i32_store16 = _i32_store16_3

type Instr_i64_store8 struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_store8_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_store8 {
	return Instr_i64_store8{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_store8 = _i64_store8_3

type Instr_i64_store16 struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_store16_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_store16 {
	return Instr_i64_store16{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_store16 = _i64_store16_3

type Instr_i64_store32 struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _i64_store32_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_i64_store32 {
	return Instr_i64_store32{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _i64_store32 = _i64_store32_3

type Instr_v128_load struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load {
	return Instr_v128_load{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load = _v128_load_3

type Instr_v128_load8x8_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load8x8_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load8x8_s {
	return Instr_v128_load8x8_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load8x8_s = _v128_load8x8_s_3

type Instr_v128_load8x8_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load8x8_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load8x8_u {
	return Instr_v128_load8x8_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load8x8_u = _v128_load8x8_u_3

type Instr_v128_load16x4_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load16x4_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load16x4_s {
	return Instr_v128_load16x4_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load16x4_s = _v128_load16x4_s_3

type Instr_v128_load16x4_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load16x4_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load16x4_u {
	return Instr_v128_load16x4_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load16x4_u = _v128_load16x4_u_3

type Instr_v128_load32x2_s struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load32x2_s_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load32x2_s {
	return Instr_v128_load32x2_s{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load32x2_s = _v128_load32x2_s_3

type Instr_v128_load32x2_u struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load32x2_u_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load32x2_u {
	return Instr_v128_load32x2_u{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load32x2_u = _v128_load32x2_u_3

type Instr_v128_load8_splat struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load8_splat_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load8_splat {
	return Instr_v128_load8_splat{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load8_splat = _v128_load8_splat_3

type Instr_v128_load16_splat struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load16_splat_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load16_splat {
	return Instr_v128_load16_splat{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load16_splat = _v128_load16_splat_3

type Instr_v128_load32_splat struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load32_splat_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load32_splat {
	return Instr_v128_load32_splat{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load32_splat = _v128_load32_splat_3

type Instr_v128_load64_splat struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load64_splat_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load64_splat {
	return Instr_v128_load64_splat{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load64_splat = _v128_load64_splat_3

type Instr_v128_load32_zero struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load32_zero_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load32_zero {
	return Instr_v128_load32_zero{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load32_zero = _v128_load32_zero_3

type Instr_v128_load64_zero struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_load64_zero_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_load64_zero {
	return Instr_v128_load64_zero{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_load64_zero = _v128_load64_zero_3

type Instr_v128_load8_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_load8_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_load8_lane {
	return Instr_v128_load8_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_load8_lane = _v128_load8_lane_4

type Instr_v128_load16_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_load16_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_load16_lane {
	return Instr_v128_load16_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_load16_lane = _v128_load16_lane_4

type Instr_v128_load32_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_load32_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_load32_lane {
	return Instr_v128_load32_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_load32_lane = _v128_load32_lane_4

type Instr_v128_load64_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_load64_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_load64_lane {
	return Instr_v128_load64_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_load64_lane = _v128_load64_lane_4

type Instr_v128_store struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
}

func _v128_store_3(_x *Phrase[OInt32], _align OInt, _offset OInt64) Instr_v128_store {
	return Instr_v128_store{
		X:      _x,
		Align:  _align,
		Offset: _offset,
	}
}

var _v128_store = _v128_store_3

type Instr_v128_store8_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_store8_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_store8_lane {
	return Instr_v128_store8_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_store8_lane = _v128_store8_lane_4

type Instr_v128_store16_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_store16_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_store16_lane {
	return Instr_v128_store16_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_store16_lane = _v128_store16_lane_4

type Instr_v128_store32_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_store32_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_store32_lane {
	return Instr_v128_store32_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_store32_lane = _v128_store32_lane_4

type Instr_v128_store64_lane struct {
	X      *Phrase[OInt32]
	Align  OInt
	Offset OInt64
	I      OInt
}

func _v128_store64_lane_4(_x *Phrase[OInt32], _align OInt, _offset OInt64, _i OInt) Instr_v128_store64_lane {
	return Instr_v128_store64_lane{
		X:      _x,
		Align:  _align,
		Offset: _offset,
		I:      _i,
	}
}

var _v128_store64_lane = _v128_store64_lane_4

type Instr_memory_size struct {
	X *Phrase[OInt32]
}

func _memory_size_1(_x *Phrase[OInt32]) Instr_memory_size {
	return Instr_memory_size{
		X: _x,
	}
}

var _memory_size = _memory_size_1

type Instr_memory_grow struct {
	X *Phrase[OInt32]
}

func _memory_grow_1(_x *Phrase[OInt32]) Instr_memory_grow {
	return Instr_memory_grow{
		X: _x,
	}
}

var _memory_grow = _memory_grow_1

type Instr_memory_fill struct {
	X *Phrase[OInt32]
}

func _memory_fill_1(_x *Phrase[OInt32]) Instr_memory_fill {
	return Instr_memory_fill{
		X: _x,
	}
}

var _memory_fill = _memory_fill_1

type Instr_memory_copy struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _memory_copy_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_memory_copy {
	return Instr_memory_copy{
		X: _x,
		Y: _y,
	}
}

var _memory_copy = _memory_copy_2

type Instr_memory_init struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _memory_init_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_memory_init {
	return Instr_memory_init{
		X: _x,
		Y: _y,
	}
}

var _memory_init = _memory_init_2

type Instr_data_drop struct {
	X *Phrase[OInt32]
}

func _data_drop_1(_x *Phrase[OInt32]) Instr_data_drop {
	return Instr_data_drop{
		X: _x,
	}
}

var _data_drop = _data_drop_1

type Instr_ref_is_null struct{}

func _ref_is_null_0() Instr_ref_is_null {
	return Instr_ref_is_null{}
}

var _ref_is_null = _ref_is_null_0

type Instr_ref_as_non_null struct{}

func _ref_as_non_null_0() Instr_ref_as_non_null {
	return Instr_ref_as_non_null{}
}

var _ref_as_non_null = _ref_as_non_null_0

type Instr_ref_test struct {
	T ORefType
}

func _ref_test_1(_t ORefType) Instr_ref_test {
	return Instr_ref_test{
		T: _t,
	}
}

var _ref_test = _ref_test_1

type Instr_ref_cast struct {
	T ORefType
}

func _ref_cast_1(_t ORefType) Instr_ref_cast {
	return Instr_ref_cast{
		T: _t,
	}
}

var _ref_cast = _ref_cast_1

type Instr_ref_eq struct{}

func _ref_eq_0() Instr_ref_eq {
	return Instr_ref_eq{}
}

var _ref_eq = _ref_eq_0

type Instr_ref_i31 struct{}

func _ref_i31_0() Instr_ref_i31 {
	return Instr_ref_i31{}
}

var _ref_i31 = _ref_i31_0

type Instr_i31_get_u struct{}

func _i31_get_u_0() Instr_i31_get_u {
	return Instr_i31_get_u{}
}

var _i31_get_u = _i31_get_u_0

type Instr_i31_get_s struct{}

func _i31_get_s_0() Instr_i31_get_s {
	return Instr_i31_get_s{}
}

var _i31_get_s = _i31_get_s_0

type Instr_struct_new struct {
	X *Phrase[OInt32]
}

func _struct_new_1(_x *Phrase[OInt32]) Instr_struct_new {
	return Instr_struct_new{
		X: _x,
	}
}

var _struct_new = _struct_new_1

type Instr_struct_new_default struct {
	X *Phrase[OInt32]
}

func _struct_new_default_1(_x *Phrase[OInt32]) Instr_struct_new_default {
	return Instr_struct_new_default{
		X: _x,
	}
}

var _struct_new_default = _struct_new_default_1

type Instr_struct_get struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _struct_get_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_struct_get {
	return Instr_struct_get{
		X: _x,
		Y: _y,
	}
}

var _struct_get = _struct_get_2

type Instr_struct_get_u struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _struct_get_u_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_struct_get_u {
	return Instr_struct_get_u{
		X: _x,
		Y: _y,
	}
}

var _struct_get_u = _struct_get_u_2

type Instr_struct_get_s struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _struct_get_s_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_struct_get_s {
	return Instr_struct_get_s{
		X: _x,
		Y: _y,
	}
}

var _struct_get_s = _struct_get_s_2

type Instr_struct_set struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _struct_set_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_struct_set {
	return Instr_struct_set{
		X: _x,
		Y: _y,
	}
}

var _struct_set = _struct_set_2

type Instr_array_new struct {
	X *Phrase[OInt32]
}

func _array_new_1(_x *Phrase[OInt32]) Instr_array_new {
	return Instr_array_new{
		X: _x,
	}
}

var _array_new = _array_new_1

type Instr_array_new_default struct {
	X *Phrase[OInt32]
}

func _array_new_default_1(_x *Phrase[OInt32]) Instr_array_new_default {
	return Instr_array_new_default{
		X: _x,
	}
}

var _array_new_default = _array_new_default_1

type Instr_array_new_fixed struct {
	X *Phrase[OInt32]
	N OTypeIdx
}

func _array_new_fixed_2(_x *Phrase[OInt32], _n OTypeIdx) Instr_array_new_fixed {
	return Instr_array_new_fixed{
		X: _x,
		N: _n,
	}
}

var _array_new_fixed = _array_new_fixed_2

type Instr_array_new_elem struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _array_new_elem_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_array_new_elem {
	return Instr_array_new_elem{
		X: _x,
		Y: _y,
	}
}

var _array_new_elem = _array_new_elem_2

type Instr_array_new_data struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _array_new_data_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_array_new_data {
	return Instr_array_new_data{
		X: _x,
		Y: _y,
	}
}

var _array_new_data = _array_new_data_2

type Instr_array_get struct {
	X *Phrase[OInt32]
}

func _array_get_1(_x *Phrase[OInt32]) Instr_array_get {
	return Instr_array_get{
		X: _x,
	}
}

var _array_get = _array_get_1

type Instr_array_get_u struct {
	X *Phrase[OInt32]
}

func _array_get_u_1(_x *Phrase[OInt32]) Instr_array_get_u {
	return Instr_array_get_u{
		X: _x,
	}
}

var _array_get_u = _array_get_u_1

type Instr_array_get_s struct {
	X *Phrase[OInt32]
}

func _array_get_s_1(_x *Phrase[OInt32]) Instr_array_get_s {
	return Instr_array_get_s{
		X: _x,
	}
}

var _array_get_s = _array_get_s_1

type Instr_array_set struct {
	X *Phrase[OInt32]
}

func _array_set_1(_x *Phrase[OInt32]) Instr_array_set {
	return Instr_array_set{
		X: _x,
	}
}

var _array_set = _array_set_1

type Instr_array_len struct{}

func _array_len_0() Instr_array_len {
	return Instr_array_len{}
}

var _array_len = _array_len_0

type Instr_array_copy struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _array_copy_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_array_copy {
	return Instr_array_copy{
		X: _x,
		Y: _y,
	}
}

var _array_copy = _array_copy_2

type Instr_array_fill struct {
	X *Phrase[OInt32]
}

func _array_fill_1(_x *Phrase[OInt32]) Instr_array_fill {
	return Instr_array_fill{
		X: _x,
	}
}

var _array_fill = _array_fill_1

type Instr_array_init_data struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _array_init_data_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_array_init_data {
	return Instr_array_init_data{
		X: _x,
		Y: _y,
	}
}

var _array_init_data = _array_init_data_2

type Instr_array_init_elem struct {
	X *Phrase[OInt32]
	Y *Phrase[OInt32]
}

func _array_init_elem_2(_x *Phrase[OInt32], _y *Phrase[OInt32]) Instr_array_init_elem {
	return Instr_array_init_elem{
		X: _x,
		Y: _y,
	}
}

var _array_init_elem = _array_init_elem_2

type Instr_any_convert_extern struct{}

func _any_convert_extern_0() Instr_any_convert_extern {
	return Instr_any_convert_extern{}
}

var _any_convert_extern = _any_convert_extern_0

type Instr_extern_convert_any struct{}

func _extern_convert_any_0() Instr_extern_convert_any {
	return Instr_extern_convert_any{}
}

var _extern_convert_any = _extern_convert_any_0

type Instr_i32_clz struct{}

func _i32_clz_0() Instr_i32_clz {
	return Instr_i32_clz{}
}

var _i32_clz = _i32_clz_0

type Instr_i32_ctz struct{}

func _i32_ctz_0() Instr_i32_ctz {
	return Instr_i32_ctz{}
}

var _i32_ctz = _i32_ctz_0

type Instr_i32_popcnt struct{}

func _i32_popcnt_0() Instr_i32_popcnt {
	return Instr_i32_popcnt{}
}

var _i32_popcnt = _i32_popcnt_0

type Instr_i64_clz struct{}

func _i64_clz_0() Instr_i64_clz {
	return Instr_i64_clz{}
}

var _i64_clz = _i64_clz_0

type Instr_i64_ctz struct{}

func _i64_ctz_0() Instr_i64_ctz {
	return Instr_i64_ctz{}
}

var _i64_ctz = _i64_ctz_0

type Instr_i64_popcnt struct{}

func _i64_popcnt_0() Instr_i64_popcnt {
	return Instr_i64_popcnt{}
}

var _i64_popcnt = _i64_popcnt_0

type Instr_f32_neg struct{}

func _f32_neg_0() Instr_f32_neg {
	return Instr_f32_neg{}
}

var _f32_neg = _f32_neg_0

type Instr_f32_abs struct{}

func _f32_abs_0() Instr_f32_abs {
	return Instr_f32_abs{}
}

var _f32_abs = _f32_abs_0

type Instr_f32_sqrt struct{}

func _f32_sqrt_0() Instr_f32_sqrt {
	return Instr_f32_sqrt{}
}

var _f32_sqrt = _f32_sqrt_0

type Instr_f32_ceil struct{}

func _f32_ceil_0() Instr_f32_ceil {
	return Instr_f32_ceil{}
}

var _f32_ceil = _f32_ceil_0

type Instr_f32_floor struct{}

func _f32_floor_0() Instr_f32_floor {
	return Instr_f32_floor{}
}

var _f32_floor = _f32_floor_0

type Instr_f32_trunc struct{}

func _f32_trunc_0() Instr_f32_trunc {
	return Instr_f32_trunc{}
}

var _f32_trunc = _f32_trunc_0

type Instr_f32_nearest struct{}

func _f32_nearest_0() Instr_f32_nearest {
	return Instr_f32_nearest{}
}

var _f32_nearest = _f32_nearest_0

type Instr_f64_neg struct{}

func _f64_neg_0() Instr_f64_neg {
	return Instr_f64_neg{}
}

var _f64_neg = _f64_neg_0

type Instr_f64_abs struct{}

func _f64_abs_0() Instr_f64_abs {
	return Instr_f64_abs{}
}

var _f64_abs = _f64_abs_0

type Instr_f64_sqrt struct{}

func _f64_sqrt_0() Instr_f64_sqrt {
	return Instr_f64_sqrt{}
}

var _f64_sqrt = _f64_sqrt_0

type Instr_f64_ceil struct{}

func _f64_ceil_0() Instr_f64_ceil {
	return Instr_f64_ceil{}
}

var _f64_ceil = _f64_ceil_0

type Instr_f64_floor struct{}

func _f64_floor_0() Instr_f64_floor {
	return Instr_f64_floor{}
}

var _f64_floor = _f64_floor_0

type Instr_f64_trunc struct{}

func _f64_trunc_0() Instr_f64_trunc {
	return Instr_f64_trunc{}
}

var _f64_trunc = _f64_trunc_0

type Instr_f64_nearest struct{}

func _f64_nearest_0() Instr_f64_nearest {
	return Instr_f64_nearest{}
}

var _f64_nearest = _f64_nearest_0

type Instr_i32_add struct{}

func _i32_add_0() Instr_i32_add {
	return Instr_i32_add{}
}

var _i32_add = _i32_add_0

type Instr_i32_sub struct{}

func _i32_sub_0() Instr_i32_sub {
	return Instr_i32_sub{}
}

var _i32_sub = _i32_sub_0

type Instr_i32_mul struct{}

func _i32_mul_0() Instr_i32_mul {
	return Instr_i32_mul{}
}

var _i32_mul = _i32_mul_0

type Instr_i32_div_s struct{}

func _i32_div_s_0() Instr_i32_div_s {
	return Instr_i32_div_s{}
}

var _i32_div_s = _i32_div_s_0

type Instr_i32_div_u struct{}

func _i32_div_u_0() Instr_i32_div_u {
	return Instr_i32_div_u{}
}

var _i32_div_u = _i32_div_u_0

type Instr_i32_rem_s struct{}

func _i32_rem_s_0() Instr_i32_rem_s {
	return Instr_i32_rem_s{}
}

var _i32_rem_s = _i32_rem_s_0

type Instr_i32_rem_u struct{}

func _i32_rem_u_0() Instr_i32_rem_u {
	return Instr_i32_rem_u{}
}

var _i32_rem_u = _i32_rem_u_0

type Instr_i32_and struct{}

func _i32_and_0() Instr_i32_and {
	return Instr_i32_and{}
}

var _i32_and = _i32_and_0

type Instr_i32_or struct{}

func _i32_or_0() Instr_i32_or {
	return Instr_i32_or{}
}

var _i32_or = _i32_or_0

type Instr_i32_xor struct{}

func _i32_xor_0() Instr_i32_xor {
	return Instr_i32_xor{}
}

var _i32_xor = _i32_xor_0

type Instr_i32_shl struct{}

func _i32_shl_0() Instr_i32_shl {
	return Instr_i32_shl{}
}

var _i32_shl = _i32_shl_0

type Instr_i32_shr_s struct{}

func _i32_shr_s_0() Instr_i32_shr_s {
	return Instr_i32_shr_s{}
}

var _i32_shr_s = _i32_shr_s_0

type Instr_i32_shr_u struct{}

func _i32_shr_u_0() Instr_i32_shr_u {
	return Instr_i32_shr_u{}
}

var _i32_shr_u = _i32_shr_u_0

type Instr_i32_rotl struct{}

func _i32_rotl_0() Instr_i32_rotl {
	return Instr_i32_rotl{}
}

var _i32_rotl = _i32_rotl_0

type Instr_i32_rotr struct{}

func _i32_rotr_0() Instr_i32_rotr {
	return Instr_i32_rotr{}
}

var _i32_rotr = _i32_rotr_0

type Instr_i64_add struct{}

func _i64_add_0() Instr_i64_add {
	return Instr_i64_add{}
}

var _i64_add = _i64_add_0

type Instr_i64_sub struct{}

func _i64_sub_0() Instr_i64_sub {
	return Instr_i64_sub{}
}

var _i64_sub = _i64_sub_0

type Instr_i64_mul struct{}

func _i64_mul_0() Instr_i64_mul {
	return Instr_i64_mul{}
}

var _i64_mul = _i64_mul_0

type Instr_i64_div_s struct{}

func _i64_div_s_0() Instr_i64_div_s {
	return Instr_i64_div_s{}
}

var _i64_div_s = _i64_div_s_0

type Instr_i64_div_u struct{}

func _i64_div_u_0() Instr_i64_div_u {
	return Instr_i64_div_u{}
}

var _i64_div_u = _i64_div_u_0

type Instr_i64_rem_s struct{}

func _i64_rem_s_0() Instr_i64_rem_s {
	return Instr_i64_rem_s{}
}

var _i64_rem_s = _i64_rem_s_0

type Instr_i64_rem_u struct{}

func _i64_rem_u_0() Instr_i64_rem_u {
	return Instr_i64_rem_u{}
}

var _i64_rem_u = _i64_rem_u_0

type Instr_i64_and struct{}

func _i64_and_0() Instr_i64_and {
	return Instr_i64_and{}
}

var _i64_and = _i64_and_0

type Instr_i64_or struct{}

func _i64_or_0() Instr_i64_or {
	return Instr_i64_or{}
}

var _i64_or = _i64_or_0

type Instr_i64_xor struct{}

func _i64_xor_0() Instr_i64_xor {
	return Instr_i64_xor{}
}

var _i64_xor = _i64_xor_0

type Instr_i64_shl struct{}

func _i64_shl_0() Instr_i64_shl {
	return Instr_i64_shl{}
}

var _i64_shl = _i64_shl_0

type Instr_i64_shr_s struct{}

func _i64_shr_s_0() Instr_i64_shr_s {
	return Instr_i64_shr_s{}
}

var _i64_shr_s = _i64_shr_s_0

type Instr_i64_shr_u struct{}

func _i64_shr_u_0() Instr_i64_shr_u {
	return Instr_i64_shr_u{}
}

var _i64_shr_u = _i64_shr_u_0

type Instr_i64_rotl struct{}

func _i64_rotl_0() Instr_i64_rotl {
	return Instr_i64_rotl{}
}

var _i64_rotl = _i64_rotl_0

type Instr_i64_rotr struct{}

func _i64_rotr_0() Instr_i64_rotr {
	return Instr_i64_rotr{}
}

var _i64_rotr = _i64_rotr_0

type Instr_f32_add struct{}

func _f32_add_0() Instr_f32_add {
	return Instr_f32_add{}
}

var _f32_add = _f32_add_0

type Instr_f32_sub struct{}

func _f32_sub_0() Instr_f32_sub {
	return Instr_f32_sub{}
}

var _f32_sub = _f32_sub_0

type Instr_f32_mul struct{}

func _f32_mul_0() Instr_f32_mul {
	return Instr_f32_mul{}
}

var _f32_mul = _f32_mul_0

type Instr_f32_div struct{}

func _f32_div_0() Instr_f32_div {
	return Instr_f32_div{}
}

var _f32_div = _f32_div_0

type Instr_f32_min struct{}

func _f32_min_0() Instr_f32_min {
	return Instr_f32_min{}
}

var _f32_min = _f32_min_0

type Instr_f32_max struct{}

func _f32_max_0() Instr_f32_max {
	return Instr_f32_max{}
}

var _f32_max = _f32_max_0

type Instr_f32_copysign struct{}

func _f32_copysign_0() Instr_f32_copysign {
	return Instr_f32_copysign{}
}

var _f32_copysign = _f32_copysign_0

type Instr_f64_add struct{}

func _f64_add_0() Instr_f64_add {
	return Instr_f64_add{}
}

var _f64_add = _f64_add_0

type Instr_f64_sub struct{}

func _f64_sub_0() Instr_f64_sub {
	return Instr_f64_sub{}
}

var _f64_sub = _f64_sub_0

type Instr_f64_mul struct{}

func _f64_mul_0() Instr_f64_mul {
	return Instr_f64_mul{}
}

var _f64_mul = _f64_mul_0

type Instr_f64_div struct{}

func _f64_div_0() Instr_f64_div {
	return Instr_f64_div{}
}

var _f64_div = _f64_div_0

type Instr_f64_min struct{}

func _f64_min_0() Instr_f64_min {
	return Instr_f64_min{}
}

var _f64_min = _f64_min_0

type Instr_f64_max struct{}

func _f64_max_0() Instr_f64_max {
	return Instr_f64_max{}
}

var _f64_max = _f64_max_0

type Instr_f64_copysign struct{}

func _f64_copysign_0() Instr_f64_copysign {
	return Instr_f64_copysign{}
}

var _f64_copysign = _f64_copysign_0

type Instr_i32_eqz struct{}

func _i32_eqz_0() Instr_i32_eqz {
	return Instr_i32_eqz{}
}

var _i32_eqz = _i32_eqz_0

type Instr_i64_eqz struct{}

func _i64_eqz_0() Instr_i64_eqz {
	return Instr_i64_eqz{}
}

var _i64_eqz = _i64_eqz_0

type Instr_i32_eq struct{}

func _i32_eq_0() Instr_i32_eq {
	return Instr_i32_eq{}
}

var _i32_eq = _i32_eq_0

type Instr_i32_ne struct{}

func _i32_ne_0() Instr_i32_ne {
	return Instr_i32_ne{}
}

var _i32_ne = _i32_ne_0

type Instr_i32_lt_s struct{}

func _i32_lt_s_0() Instr_i32_lt_s {
	return Instr_i32_lt_s{}
}

var _i32_lt_s = _i32_lt_s_0

type Instr_i32_lt_u struct{}

func _i32_lt_u_0() Instr_i32_lt_u {
	return Instr_i32_lt_u{}
}

var _i32_lt_u = _i32_lt_u_0

type Instr_i32_le_s struct{}

func _i32_le_s_0() Instr_i32_le_s {
	return Instr_i32_le_s{}
}

var _i32_le_s = _i32_le_s_0

type Instr_i32_le_u struct{}

func _i32_le_u_0() Instr_i32_le_u {
	return Instr_i32_le_u{}
}

var _i32_le_u = _i32_le_u_0

type Instr_i32_gt_s struct{}

func _i32_gt_s_0() Instr_i32_gt_s {
	return Instr_i32_gt_s{}
}

var _i32_gt_s = _i32_gt_s_0

type Instr_i32_gt_u struct{}

func _i32_gt_u_0() Instr_i32_gt_u {
	return Instr_i32_gt_u{}
}

var _i32_gt_u = _i32_gt_u_0

type Instr_i32_ge_s struct{}

func _i32_ge_s_0() Instr_i32_ge_s {
	return Instr_i32_ge_s{}
}

var _i32_ge_s = _i32_ge_s_0

type Instr_i32_ge_u struct{}

func _i32_ge_u_0() Instr_i32_ge_u {
	return Instr_i32_ge_u{}
}

var _i32_ge_u = _i32_ge_u_0

type Instr_i64_eq struct{}

func _i64_eq_0() Instr_i64_eq {
	return Instr_i64_eq{}
}

var _i64_eq = _i64_eq_0

type Instr_i64_ne struct{}

func _i64_ne_0() Instr_i64_ne {
	return Instr_i64_ne{}
}

var _i64_ne = _i64_ne_0

type Instr_i64_lt_s struct{}

func _i64_lt_s_0() Instr_i64_lt_s {
	return Instr_i64_lt_s{}
}

var _i64_lt_s = _i64_lt_s_0

type Instr_i64_lt_u struct{}

func _i64_lt_u_0() Instr_i64_lt_u {
	return Instr_i64_lt_u{}
}

var _i64_lt_u = _i64_lt_u_0

type Instr_i64_le_s struct{}

func _i64_le_s_0() Instr_i64_le_s {
	return Instr_i64_le_s{}
}

var _i64_le_s = _i64_le_s_0

type Instr_i64_le_u struct{}

func _i64_le_u_0() Instr_i64_le_u {
	return Instr_i64_le_u{}
}

var _i64_le_u = _i64_le_u_0

type Instr_i64_gt_s struct{}

func _i64_gt_s_0() Instr_i64_gt_s {
	return Instr_i64_gt_s{}
}

var _i64_gt_s = _i64_gt_s_0

type Instr_i64_gt_u struct{}

func _i64_gt_u_0() Instr_i64_gt_u {
	return Instr_i64_gt_u{}
}

var _i64_gt_u = _i64_gt_u_0

type Instr_i64_ge_s struct{}

func _i64_ge_s_0() Instr_i64_ge_s {
	return Instr_i64_ge_s{}
}

var _i64_ge_s = _i64_ge_s_0

type Instr_i64_ge_u struct{}

func _i64_ge_u_0() Instr_i64_ge_u {
	return Instr_i64_ge_u{}
}

var _i64_ge_u = _i64_ge_u_0

type Instr_f32_eq struct{}

func _f32_eq_0() Instr_f32_eq {
	return Instr_f32_eq{}
}

var _f32_eq = _f32_eq_0

type Instr_f32_ne struct{}

func _f32_ne_0() Instr_f32_ne {
	return Instr_f32_ne{}
}

var _f32_ne = _f32_ne_0

type Instr_f32_lt struct{}

func _f32_lt_0() Instr_f32_lt {
	return Instr_f32_lt{}
}

var _f32_lt = _f32_lt_0

type Instr_f32_le struct{}

func _f32_le_0() Instr_f32_le {
	return Instr_f32_le{}
}

var _f32_le = _f32_le_0

type Instr_f32_gt struct{}

func _f32_gt_0() Instr_f32_gt {
	return Instr_f32_gt{}
}

var _f32_gt = _f32_gt_0

type Instr_f32_ge struct{}

func _f32_ge_0() Instr_f32_ge {
	return Instr_f32_ge{}
}

var _f32_ge = _f32_ge_0

type Instr_f64_eq struct{}

func _f64_eq_0() Instr_f64_eq {
	return Instr_f64_eq{}
}

var _f64_eq = _f64_eq_0

type Instr_f64_ne struct{}

func _f64_ne_0() Instr_f64_ne {
	return Instr_f64_ne{}
}

var _f64_ne = _f64_ne_0

type Instr_f64_lt struct{}

func _f64_lt_0() Instr_f64_lt {
	return Instr_f64_lt{}
}

var _f64_lt = _f64_lt_0

type Instr_f64_le struct{}

func _f64_le_0() Instr_f64_le {
	return Instr_f64_le{}
}

var _f64_le = _f64_le_0

type Instr_f64_gt struct{}

func _f64_gt_0() Instr_f64_gt {
	return Instr_f64_gt{}
}

var _f64_gt = _f64_gt_0

type Instr_f64_ge struct{}

func _f64_ge_0() Instr_f64_ge {
	return Instr_f64_ge{}
}

var _f64_ge = _f64_ge_0

type Instr_i32_extend8_s struct{}

func _i32_extend8_s_0() Instr_i32_extend8_s {
	return Instr_i32_extend8_s{}
}

var _i32_extend8_s = _i32_extend8_s_0

type Instr_i32_extend16_s struct{}

func _i32_extend16_s_0() Instr_i32_extend16_s {
	return Instr_i32_extend16_s{}
}

var _i32_extend16_s = _i32_extend16_s_0

type Instr_i64_extend8_s struct{}

func _i64_extend8_s_0() Instr_i64_extend8_s {
	return Instr_i64_extend8_s{}
}

var _i64_extend8_s = _i64_extend8_s_0

type Instr_i64_extend16_s struct{}

func _i64_extend16_s_0() Instr_i64_extend16_s {
	return Instr_i64_extend16_s{}
}

var _i64_extend16_s = _i64_extend16_s_0

type Instr_i64_extend32_s struct{}

func _i64_extend32_s_0() Instr_i64_extend32_s {
	return Instr_i64_extend32_s{}
}

var _i64_extend32_s = _i64_extend32_s_0

type Instr_i32_wrap_i64 struct{}

func _i32_wrap_i64_0() Instr_i32_wrap_i64 {
	return Instr_i32_wrap_i64{}
}

var _i32_wrap_i64 = _i32_wrap_i64_0

type Instr_i32_trunc_f32_s struct{}

func _i32_trunc_f32_s_0() Instr_i32_trunc_f32_s {
	return Instr_i32_trunc_f32_s{}
}

var _i32_trunc_f32_s = _i32_trunc_f32_s_0

type Instr_i32_trunc_f32_u struct{}

func _i32_trunc_f32_u_0() Instr_i32_trunc_f32_u {
	return Instr_i32_trunc_f32_u{}
}

var _i32_trunc_f32_u = _i32_trunc_f32_u_0

type Instr_i32_trunc_f64_s struct{}

func _i32_trunc_f64_s_0() Instr_i32_trunc_f64_s {
	return Instr_i32_trunc_f64_s{}
}

var _i32_trunc_f64_s = _i32_trunc_f64_s_0

type Instr_i32_trunc_f64_u struct{}

func _i32_trunc_f64_u_0() Instr_i32_trunc_f64_u {
	return Instr_i32_trunc_f64_u{}
}

var _i32_trunc_f64_u = _i32_trunc_f64_u_0

type Instr_i32_trunc_sat_f32_s struct{}

func _i32_trunc_sat_f32_s_0() Instr_i32_trunc_sat_f32_s {
	return Instr_i32_trunc_sat_f32_s{}
}

var _i32_trunc_sat_f32_s = _i32_trunc_sat_f32_s_0

type Instr_i32_trunc_sat_f32_u struct{}

func _i32_trunc_sat_f32_u_0() Instr_i32_trunc_sat_f32_u {
	return Instr_i32_trunc_sat_f32_u{}
}

var _i32_trunc_sat_f32_u = _i32_trunc_sat_f32_u_0

type Instr_i32_trunc_sat_f64_s struct{}

func _i32_trunc_sat_f64_s_0() Instr_i32_trunc_sat_f64_s {
	return Instr_i32_trunc_sat_f64_s{}
}

var _i32_trunc_sat_f64_s = _i32_trunc_sat_f64_s_0

type Instr_i32_trunc_sat_f64_u struct{}

func _i32_trunc_sat_f64_u_0() Instr_i32_trunc_sat_f64_u {
	return Instr_i32_trunc_sat_f64_u{}
}

var _i32_trunc_sat_f64_u = _i32_trunc_sat_f64_u_0

type Instr_i64_extend_i32_s struct{}

func _i64_extend_i32_s_0() Instr_i64_extend_i32_s {
	return Instr_i64_extend_i32_s{}
}

var _i64_extend_i32_s = _i64_extend_i32_s_0

type Instr_i64_extend_i32_u struct{}

func _i64_extend_i32_u_0() Instr_i64_extend_i32_u {
	return Instr_i64_extend_i32_u{}
}

var _i64_extend_i32_u = _i64_extend_i32_u_0

type Instr_i64_trunc_f32_s struct{}

func _i64_trunc_f32_s_0() Instr_i64_trunc_f32_s {
	return Instr_i64_trunc_f32_s{}
}

var _i64_trunc_f32_s = _i64_trunc_f32_s_0

type Instr_i64_trunc_f32_u struct{}

func _i64_trunc_f32_u_0() Instr_i64_trunc_f32_u {
	return Instr_i64_trunc_f32_u{}
}

var _i64_trunc_f32_u = _i64_trunc_f32_u_0

type Instr_i64_trunc_f64_s struct{}

func _i64_trunc_f64_s_0() Instr_i64_trunc_f64_s {
	return Instr_i64_trunc_f64_s{}
}

var _i64_trunc_f64_s = _i64_trunc_f64_s_0

type Instr_i64_trunc_f64_u struct{}

func _i64_trunc_f64_u_0() Instr_i64_trunc_f64_u {
	return Instr_i64_trunc_f64_u{}
}

var _i64_trunc_f64_u = _i64_trunc_f64_u_0

type Instr_f32_convert_i32_s struct{}

func _f32_convert_i32_s_0() Instr_f32_convert_i32_s {
	return Instr_f32_convert_i32_s{}
}

var _f32_convert_i32_s = _f32_convert_i32_s_0

type Instr_f32_convert_i32_u struct{}

func _f32_convert_i32_u_0() Instr_f32_convert_i32_u {
	return Instr_f32_convert_i32_u{}
}

var _f32_convert_i32_u = _f32_convert_i32_u_0

type Instr_f32_convert_i64_s struct{}

func _f32_convert_i64_s_0() Instr_f32_convert_i64_s {
	return Instr_f32_convert_i64_s{}
}

var _f32_convert_i64_s = _f32_convert_i64_s_0

type Instr_f32_convert_i64_u struct{}

func _f32_convert_i64_u_0() Instr_f32_convert_i64_u {
	return Instr_f32_convert_i64_u{}
}

var _f32_convert_i64_u = _f32_convert_i64_u_0

type Instr_i64_trunc_sat_f32_s struct{}

func _i64_trunc_sat_f32_s_0() Instr_i64_trunc_sat_f32_s {
	return Instr_i64_trunc_sat_f32_s{}
}

var _i64_trunc_sat_f32_s = _i64_trunc_sat_f32_s_0

type Instr_i64_trunc_sat_f32_u struct{}

func _i64_trunc_sat_f32_u_0() Instr_i64_trunc_sat_f32_u {
	return Instr_i64_trunc_sat_f32_u{}
}

var _i64_trunc_sat_f32_u = _i64_trunc_sat_f32_u_0

type Instr_i64_trunc_sat_f64_s struct{}

func _i64_trunc_sat_f64_s_0() Instr_i64_trunc_sat_f64_s {
	return Instr_i64_trunc_sat_f64_s{}
}

var _i64_trunc_sat_f64_s = _i64_trunc_sat_f64_s_0

type Instr_i64_trunc_sat_f64_u struct{}

func _i64_trunc_sat_f64_u_0() Instr_i64_trunc_sat_f64_u {
	return Instr_i64_trunc_sat_f64_u{}
}

var _i64_trunc_sat_f64_u = _i64_trunc_sat_f64_u_0

type Instr_f32_demote_f64 struct{}

func _f32_demote_f64_0() Instr_f32_demote_f64 {
	return Instr_f32_demote_f64{}
}

var _f32_demote_f64 = _f32_demote_f64_0

type Instr_f64_convert_i32_s struct{}

func _f64_convert_i32_s_0() Instr_f64_convert_i32_s {
	return Instr_f64_convert_i32_s{}
}

var _f64_convert_i32_s = _f64_convert_i32_s_0

type Instr_f64_convert_i32_u struct{}

func _f64_convert_i32_u_0() Instr_f64_convert_i32_u {
	return Instr_f64_convert_i32_u{}
}

var _f64_convert_i32_u = _f64_convert_i32_u_0

type Instr_f64_convert_i64_s struct{}

func _f64_convert_i64_s_0() Instr_f64_convert_i64_s {
	return Instr_f64_convert_i64_s{}
}

var _f64_convert_i64_s = _f64_convert_i64_s_0

type Instr_f64_convert_i64_u struct{}

func _f64_convert_i64_u_0() Instr_f64_convert_i64_u {
	return Instr_f64_convert_i64_u{}
}

var _f64_convert_i64_u = _f64_convert_i64_u_0

type Instr_f64_promote_f32 struct{}

func _f64_promote_f32_0() Instr_f64_promote_f32 {
	return Instr_f64_promote_f32{}
}

var _f64_promote_f32 = _f64_promote_f32_0

type Instr_i32_reinterpret_f32 struct{}

func _i32_reinterpret_f32_0() Instr_i32_reinterpret_f32 {
	return Instr_i32_reinterpret_f32{}
}

var _i32_reinterpret_f32 = _i32_reinterpret_f32_0

type Instr_i64_reinterpret_f64 struct{}

func _i64_reinterpret_f64_0() Instr_i64_reinterpret_f64 {
	return Instr_i64_reinterpret_f64{}
}

var _i64_reinterpret_f64 = _i64_reinterpret_f64_0

type Instr_f32_reinterpret_i32 struct{}

func _f32_reinterpret_i32_0() Instr_f32_reinterpret_i32 {
	return Instr_f32_reinterpret_i32{}
}

var _f32_reinterpret_i32 = _f32_reinterpret_i32_0

type Instr_f64_reinterpret_i64 struct{}

func _f64_reinterpret_i64_0() Instr_f64_reinterpret_i64 {
	return Instr_f64_reinterpret_i64{}
}

var _f64_reinterpret_i64 = _f64_reinterpret_i64_0

type Instr_v128_not struct{}

func _v128_not_0() Instr_v128_not {
	return Instr_v128_not{}
}

var _v128_not = _v128_not_0

type Instr_v128_and struct{}

func _v128_and_0() Instr_v128_and {
	return Instr_v128_and{}
}

var _v128_and = _v128_and_0

type Instr_v128_andnot struct{}

func _v128_andnot_0() Instr_v128_andnot {
	return Instr_v128_andnot{}
}

var _v128_andnot = _v128_andnot_0

type Instr_v128_or struct{}

func _v128_or_0() Instr_v128_or {
	return Instr_v128_or{}
}

var _v128_or = _v128_or_0

type Instr_v128_xor struct{}

func _v128_xor_0() Instr_v128_xor {
	return Instr_v128_xor{}
}

var _v128_xor = _v128_xor_0

type Instr_v128_bitselect struct{}

func _v128_bitselect_0() Instr_v128_bitselect {
	return Instr_v128_bitselect{}
}

var _v128_bitselect = _v128_bitselect_0

type Instr_v128_any_true struct{}

func _v128_any_true_0() Instr_v128_any_true {
	return Instr_v128_any_true{}
}

var _v128_any_true = _v128_any_true_0

type Instr_i8x16_swizzle struct{}

func _i8x16_swizzle_0() Instr_i8x16_swizzle {
	return Instr_i8x16_swizzle{}
}

var _i8x16_swizzle = _i8x16_swizzle_0

type Instr_i8x16_shuffle struct {
	Is []OInt
}

func _i8x16_shuffle_1(_is []OInt) Instr_i8x16_shuffle {
	return Instr_i8x16_shuffle{
		Is: _is,
	}
}

var _i8x16_shuffle = _i8x16_shuffle_1

type Instr_i8x16_splat struct{}

func _i8x16_splat_0() Instr_i8x16_splat {
	return Instr_i8x16_splat{}
}

var _i8x16_splat = _i8x16_splat_0

type Instr_i8x16_extract_lane_s struct {
	I OInt
}

func _i8x16_extract_lane_s_1(_i OInt) Instr_i8x16_extract_lane_s {
	return Instr_i8x16_extract_lane_s{
		I: _i,
	}
}

var _i8x16_extract_lane_s = _i8x16_extract_lane_s_1

type Instr_i8x16_extract_lane_u struct {
	I OInt
}

func _i8x16_extract_lane_u_1(_i OInt) Instr_i8x16_extract_lane_u {
	return Instr_i8x16_extract_lane_u{
		I: _i,
	}
}

var _i8x16_extract_lane_u = _i8x16_extract_lane_u_1

type Instr_i8x16_replace_lane struct {
	I OInt
}

func _i8x16_replace_lane_1(_i OInt) Instr_i8x16_replace_lane {
	return Instr_i8x16_replace_lane{
		I: _i,
	}
}

var _i8x16_replace_lane = _i8x16_replace_lane_1

type Instr_i8x16_eq struct{}

func _i8x16_eq_0() Instr_i8x16_eq {
	return Instr_i8x16_eq{}
}

var _i8x16_eq = _i8x16_eq_0

type Instr_i8x16_ne struct{}

func _i8x16_ne_0() Instr_i8x16_ne {
	return Instr_i8x16_ne{}
}

var _i8x16_ne = _i8x16_ne_0

type Instr_i8x16_lt_s struct{}

func _i8x16_lt_s_0() Instr_i8x16_lt_s {
	return Instr_i8x16_lt_s{}
}

var _i8x16_lt_s = _i8x16_lt_s_0

type Instr_i8x16_lt_u struct{}

func _i8x16_lt_u_0() Instr_i8x16_lt_u {
	return Instr_i8x16_lt_u{}
}

var _i8x16_lt_u = _i8x16_lt_u_0

type Instr_i8x16_le_s struct{}

func _i8x16_le_s_0() Instr_i8x16_le_s {
	return Instr_i8x16_le_s{}
}

var _i8x16_le_s = _i8x16_le_s_0

type Instr_i8x16_le_u struct{}

func _i8x16_le_u_0() Instr_i8x16_le_u {
	return Instr_i8x16_le_u{}
}

var _i8x16_le_u = _i8x16_le_u_0

type Instr_i8x16_gt_s struct{}

func _i8x16_gt_s_0() Instr_i8x16_gt_s {
	return Instr_i8x16_gt_s{}
}

var _i8x16_gt_s = _i8x16_gt_s_0

type Instr_i8x16_gt_u struct{}

func _i8x16_gt_u_0() Instr_i8x16_gt_u {
	return Instr_i8x16_gt_u{}
}

var _i8x16_gt_u = _i8x16_gt_u_0

type Instr_i8x16_ge_s struct{}

func _i8x16_ge_s_0() Instr_i8x16_ge_s {
	return Instr_i8x16_ge_s{}
}

var _i8x16_ge_s = _i8x16_ge_s_0

type Instr_i8x16_ge_u struct{}

func _i8x16_ge_u_0() Instr_i8x16_ge_u {
	return Instr_i8x16_ge_u{}
}

var _i8x16_ge_u = _i8x16_ge_u_0

type Instr_i8x16_neg struct{}

func _i8x16_neg_0() Instr_i8x16_neg {
	return Instr_i8x16_neg{}
}

var _i8x16_neg = _i8x16_neg_0

type Instr_i8x16_bitmask struct{}

func _i8x16_bitmask_0() Instr_i8x16_bitmask {
	return Instr_i8x16_bitmask{}
}

var _i8x16_bitmask = _i8x16_bitmask_0

type Instr_i8x16_all_true struct{}

func _i8x16_all_true_0() Instr_i8x16_all_true {
	return Instr_i8x16_all_true{}
}

var _i8x16_all_true = _i8x16_all_true_0

type Instr_i8x16_narrow_i16x8_s struct{}

func _i8x16_narrow_i16x8_s_0() Instr_i8x16_narrow_i16x8_s {
	return Instr_i8x16_narrow_i16x8_s{}
}

var _i8x16_narrow_i16x8_s = _i8x16_narrow_i16x8_s_0

type Instr_i8x16_narrow_i16x8_u struct{}

func _i8x16_narrow_i16x8_u_0() Instr_i8x16_narrow_i16x8_u {
	return Instr_i8x16_narrow_i16x8_u{}
}

var _i8x16_narrow_i16x8_u = _i8x16_narrow_i16x8_u_0

type Instr_i16x8_extend_low_i8x16_s struct{}

func _i16x8_extend_low_i8x16_s_0() Instr_i16x8_extend_low_i8x16_s {
	return Instr_i16x8_extend_low_i8x16_s{}
}

var _i16x8_extend_low_i8x16_s = _i16x8_extend_low_i8x16_s_0

type Instr_i16x8_extend_high_i8x16_s struct{}

func _i16x8_extend_high_i8x16_s_0() Instr_i16x8_extend_high_i8x16_s {
	return Instr_i16x8_extend_high_i8x16_s{}
}

var _i16x8_extend_high_i8x16_s = _i16x8_extend_high_i8x16_s_0

type Instr_i16x8_extend_low_i8x16_u struct{}

func _i16x8_extend_low_i8x16_u_0() Instr_i16x8_extend_low_i8x16_u {
	return Instr_i16x8_extend_low_i8x16_u{}
}

var _i16x8_extend_low_i8x16_u = _i16x8_extend_low_i8x16_u_0

type Instr_i16x8_extend_high_i8x16_u struct{}

func _i16x8_extend_high_i8x16_u_0() Instr_i16x8_extend_high_i8x16_u {
	return Instr_i16x8_extend_high_i8x16_u{}
}

var _i16x8_extend_high_i8x16_u = _i16x8_extend_high_i8x16_u_0

type Instr_i8x16_shl struct{}

func _i8x16_shl_0() Instr_i8x16_shl {
	return Instr_i8x16_shl{}
}

var _i8x16_shl = _i8x16_shl_0

type Instr_i8x16_shr_s struct{}

func _i8x16_shr_s_0() Instr_i8x16_shr_s {
	return Instr_i8x16_shr_s{}
}

var _i8x16_shr_s = _i8x16_shr_s_0

type Instr_i8x16_shr_u struct{}

func _i8x16_shr_u_0() Instr_i8x16_shr_u {
	return Instr_i8x16_shr_u{}
}

var _i8x16_shr_u = _i8x16_shr_u_0

type Instr_i8x16_add struct{}

func _i8x16_add_0() Instr_i8x16_add {
	return Instr_i8x16_add{}
}

var _i8x16_add = _i8x16_add_0

type Instr_i8x16_add_sat_s struct{}

func _i8x16_add_sat_s_0() Instr_i8x16_add_sat_s {
	return Instr_i8x16_add_sat_s{}
}

var _i8x16_add_sat_s = _i8x16_add_sat_s_0

type Instr_i8x16_add_sat_u struct{}

func _i8x16_add_sat_u_0() Instr_i8x16_add_sat_u {
	return Instr_i8x16_add_sat_u{}
}

var _i8x16_add_sat_u = _i8x16_add_sat_u_0

type Instr_i8x16_sub struct{}

func _i8x16_sub_0() Instr_i8x16_sub {
	return Instr_i8x16_sub{}
}

var _i8x16_sub = _i8x16_sub_0

type Instr_i8x16_sub_sat_s struct{}

func _i8x16_sub_sat_s_0() Instr_i8x16_sub_sat_s {
	return Instr_i8x16_sub_sat_s{}
}

var _i8x16_sub_sat_s = _i8x16_sub_sat_s_0

type Instr_i8x16_sub_sat_u struct{}

func _i8x16_sub_sat_u_0() Instr_i8x16_sub_sat_u {
	return Instr_i8x16_sub_sat_u{}
}

var _i8x16_sub_sat_u = _i8x16_sub_sat_u_0

type Instr_i8x16_abs struct{}

func _i8x16_abs_0() Instr_i8x16_abs {
	return Instr_i8x16_abs{}
}

var _i8x16_abs = _i8x16_abs_0

type Instr_i8x16_popcnt struct{}

func _i8x16_popcnt_0() Instr_i8x16_popcnt {
	return Instr_i8x16_popcnt{}
}

var _i8x16_popcnt = _i8x16_popcnt_0

type Instr_i8x16_min_s struct{}

func _i8x16_min_s_0() Instr_i8x16_min_s {
	return Instr_i8x16_min_s{}
}

var _i8x16_min_s = _i8x16_min_s_0

type Instr_i8x16_min_u struct{}

func _i8x16_min_u_0() Instr_i8x16_min_u {
	return Instr_i8x16_min_u{}
}

var _i8x16_min_u = _i8x16_min_u_0

type Instr_i8x16_max_s struct{}

func _i8x16_max_s_0() Instr_i8x16_max_s {
	return Instr_i8x16_max_s{}
}

var _i8x16_max_s = _i8x16_max_s_0

type Instr_i8x16_max_u struct{}

func _i8x16_max_u_0() Instr_i8x16_max_u {
	return Instr_i8x16_max_u{}
}

var _i8x16_max_u = _i8x16_max_u_0

type Instr_i8x16_avgr_u struct{}

func _i8x16_avgr_u_0() Instr_i8x16_avgr_u {
	return Instr_i8x16_avgr_u{}
}

var _i8x16_avgr_u = _i8x16_avgr_u_0

type Instr_i16x8_splat struct{}

func _i16x8_splat_0() Instr_i16x8_splat {
	return Instr_i16x8_splat{}
}

var _i16x8_splat = _i16x8_splat_0

type Instr_i16x8_extract_lane_s struct {
	I OInt
}

func _i16x8_extract_lane_s_1(_i OInt) Instr_i16x8_extract_lane_s {
	return Instr_i16x8_extract_lane_s{
		I: _i,
	}
}

var _i16x8_extract_lane_s = _i16x8_extract_lane_s_1

type Instr_i16x8_extract_lane_u struct {
	I OInt
}

func _i16x8_extract_lane_u_1(_i OInt) Instr_i16x8_extract_lane_u {
	return Instr_i16x8_extract_lane_u{
		I: _i,
	}
}

var _i16x8_extract_lane_u = _i16x8_extract_lane_u_1

type Instr_i16x8_replace_lane struct {
	I OInt
}

func _i16x8_replace_lane_1(_i OInt) Instr_i16x8_replace_lane {
	return Instr_i16x8_replace_lane{
		I: _i,
	}
}

var _i16x8_replace_lane = _i16x8_replace_lane_1

type Instr_i16x8_eq struct{}

func _i16x8_eq_0() Instr_i16x8_eq {
	return Instr_i16x8_eq{}
}

var _i16x8_eq = _i16x8_eq_0

type Instr_i16x8_ne struct{}

func _i16x8_ne_0() Instr_i16x8_ne {
	return Instr_i16x8_ne{}
}

var _i16x8_ne = _i16x8_ne_0

type Instr_i16x8_lt_s struct{}

func _i16x8_lt_s_0() Instr_i16x8_lt_s {
	return Instr_i16x8_lt_s{}
}

var _i16x8_lt_s = _i16x8_lt_s_0

type Instr_i16x8_lt_u struct{}

func _i16x8_lt_u_0() Instr_i16x8_lt_u {
	return Instr_i16x8_lt_u{}
}

var _i16x8_lt_u = _i16x8_lt_u_0

type Instr_i16x8_le_s struct{}

func _i16x8_le_s_0() Instr_i16x8_le_s {
	return Instr_i16x8_le_s{}
}

var _i16x8_le_s = _i16x8_le_s_0

type Instr_i16x8_le_u struct{}

func _i16x8_le_u_0() Instr_i16x8_le_u {
	return Instr_i16x8_le_u{}
}

var _i16x8_le_u = _i16x8_le_u_0

type Instr_i16x8_gt_s struct{}

func _i16x8_gt_s_0() Instr_i16x8_gt_s {
	return Instr_i16x8_gt_s{}
}

var _i16x8_gt_s = _i16x8_gt_s_0

type Instr_i16x8_gt_u struct{}

func _i16x8_gt_u_0() Instr_i16x8_gt_u {
	return Instr_i16x8_gt_u{}
}

var _i16x8_gt_u = _i16x8_gt_u_0

type Instr_i16x8_ge_s struct{}

func _i16x8_ge_s_0() Instr_i16x8_ge_s {
	return Instr_i16x8_ge_s{}
}

var _i16x8_ge_s = _i16x8_ge_s_0

type Instr_i16x8_ge_u struct{}

func _i16x8_ge_u_0() Instr_i16x8_ge_u {
	return Instr_i16x8_ge_u{}
}

var _i16x8_ge_u = _i16x8_ge_u_0

type Instr_i16x8_neg struct{}

func _i16x8_neg_0() Instr_i16x8_neg {
	return Instr_i16x8_neg{}
}

var _i16x8_neg = _i16x8_neg_0

type Instr_i16x8_bitmask struct{}

func _i16x8_bitmask_0() Instr_i16x8_bitmask {
	return Instr_i16x8_bitmask{}
}

var _i16x8_bitmask = _i16x8_bitmask_0

type Instr_i16x8_all_true struct{}

func _i16x8_all_true_0() Instr_i16x8_all_true {
	return Instr_i16x8_all_true{}
}

var _i16x8_all_true = _i16x8_all_true_0

type Instr_i16x8_narrow_i32x4_s struct{}

func _i16x8_narrow_i32x4_s_0() Instr_i16x8_narrow_i32x4_s {
	return Instr_i16x8_narrow_i32x4_s{}
}

var _i16x8_narrow_i32x4_s = _i16x8_narrow_i32x4_s_0

type Instr_i16x8_narrow_i32x4_u struct{}

func _i16x8_narrow_i32x4_u_0() Instr_i16x8_narrow_i32x4_u {
	return Instr_i16x8_narrow_i32x4_u{}
}

var _i16x8_narrow_i32x4_u = _i16x8_narrow_i32x4_u_0

type Instr_i16x8_shl struct{}

func _i16x8_shl_0() Instr_i16x8_shl {
	return Instr_i16x8_shl{}
}

var _i16x8_shl = _i16x8_shl_0

type Instr_i16x8_shr_s struct{}

func _i16x8_shr_s_0() Instr_i16x8_shr_s {
	return Instr_i16x8_shr_s{}
}

var _i16x8_shr_s = _i16x8_shr_s_0

type Instr_i16x8_shr_u struct{}

func _i16x8_shr_u_0() Instr_i16x8_shr_u {
	return Instr_i16x8_shr_u{}
}

var _i16x8_shr_u = _i16x8_shr_u_0

type Instr_i16x8_add struct{}

func _i16x8_add_0() Instr_i16x8_add {
	return Instr_i16x8_add{}
}

var _i16x8_add = _i16x8_add_0

type Instr_i16x8_add_sat_s struct{}

func _i16x8_add_sat_s_0() Instr_i16x8_add_sat_s {
	return Instr_i16x8_add_sat_s{}
}

var _i16x8_add_sat_s = _i16x8_add_sat_s_0

type Instr_i16x8_add_sat_u struct{}

func _i16x8_add_sat_u_0() Instr_i16x8_add_sat_u {
	return Instr_i16x8_add_sat_u{}
}

var _i16x8_add_sat_u = _i16x8_add_sat_u_0

type Instr_i16x8_sub struct{}

func _i16x8_sub_0() Instr_i16x8_sub {
	return Instr_i16x8_sub{}
}

var _i16x8_sub = _i16x8_sub_0

type Instr_i16x8_sub_sat_s struct{}

func _i16x8_sub_sat_s_0() Instr_i16x8_sub_sat_s {
	return Instr_i16x8_sub_sat_s{}
}

var _i16x8_sub_sat_s = _i16x8_sub_sat_s_0

type Instr_i16x8_sub_sat_u struct{}

func _i16x8_sub_sat_u_0() Instr_i16x8_sub_sat_u {
	return Instr_i16x8_sub_sat_u{}
}

var _i16x8_sub_sat_u = _i16x8_sub_sat_u_0

type Instr_i16x8_mul struct{}

func _i16x8_mul_0() Instr_i16x8_mul {
	return Instr_i16x8_mul{}
}

var _i16x8_mul = _i16x8_mul_0

type Instr_i16x8_abs struct{}

func _i16x8_abs_0() Instr_i16x8_abs {
	return Instr_i16x8_abs{}
}

var _i16x8_abs = _i16x8_abs_0

type Instr_i16x8_min_s struct{}

func _i16x8_min_s_0() Instr_i16x8_min_s {
	return Instr_i16x8_min_s{}
}

var _i16x8_min_s = _i16x8_min_s_0

type Instr_i16x8_min_u struct{}

func _i16x8_min_u_0() Instr_i16x8_min_u {
	return Instr_i16x8_min_u{}
}

var _i16x8_min_u = _i16x8_min_u_0

type Instr_i16x8_max_s struct{}

func _i16x8_max_s_0() Instr_i16x8_max_s {
	return Instr_i16x8_max_s{}
}

var _i16x8_max_s = _i16x8_max_s_0

type Instr_i16x8_max_u struct{}

func _i16x8_max_u_0() Instr_i16x8_max_u {
	return Instr_i16x8_max_u{}
}

var _i16x8_max_u = _i16x8_max_u_0

type Instr_i16x8_avgr_u struct{}

func _i16x8_avgr_u_0() Instr_i16x8_avgr_u {
	return Instr_i16x8_avgr_u{}
}

var _i16x8_avgr_u = _i16x8_avgr_u_0

type Instr_i16x8_extmul_low_i8x16_s struct{}

func _i16x8_extmul_low_i8x16_s_0() Instr_i16x8_extmul_low_i8x16_s {
	return Instr_i16x8_extmul_low_i8x16_s{}
}

var _i16x8_extmul_low_i8x16_s = _i16x8_extmul_low_i8x16_s_0

type Instr_i16x8_extmul_high_i8x16_s struct{}

func _i16x8_extmul_high_i8x16_s_0() Instr_i16x8_extmul_high_i8x16_s {
	return Instr_i16x8_extmul_high_i8x16_s{}
}

var _i16x8_extmul_high_i8x16_s = _i16x8_extmul_high_i8x16_s_0

type Instr_i16x8_extmul_low_i8x16_u struct{}

func _i16x8_extmul_low_i8x16_u_0() Instr_i16x8_extmul_low_i8x16_u {
	return Instr_i16x8_extmul_low_i8x16_u{}
}

var _i16x8_extmul_low_i8x16_u = _i16x8_extmul_low_i8x16_u_0

type Instr_i16x8_extmul_high_i8x16_u struct{}

func _i16x8_extmul_high_i8x16_u_0() Instr_i16x8_extmul_high_i8x16_u {
	return Instr_i16x8_extmul_high_i8x16_u{}
}

var _i16x8_extmul_high_i8x16_u = _i16x8_extmul_high_i8x16_u_0

type Instr_i16x8_q15mulr_sat_s struct{}

func _i16x8_q15mulr_sat_s_0() Instr_i16x8_q15mulr_sat_s {
	return Instr_i16x8_q15mulr_sat_s{}
}

var _i16x8_q15mulr_sat_s = _i16x8_q15mulr_sat_s_0

type Instr_i16x8_extadd_pairwise_i8x16_s struct{}

func _i16x8_extadd_pairwise_i8x16_s_0() Instr_i16x8_extadd_pairwise_i8x16_s {
	return Instr_i16x8_extadd_pairwise_i8x16_s{}
}

var _i16x8_extadd_pairwise_i8x16_s = _i16x8_extadd_pairwise_i8x16_s_0

type Instr_i16x8_extadd_pairwise_i8x16_u struct{}

func _i16x8_extadd_pairwise_i8x16_u_0() Instr_i16x8_extadd_pairwise_i8x16_u {
	return Instr_i16x8_extadd_pairwise_i8x16_u{}
}

var _i16x8_extadd_pairwise_i8x16_u = _i16x8_extadd_pairwise_i8x16_u_0

type Instr_i32x4_splat struct{}

func _i32x4_splat_0() Instr_i32x4_splat {
	return Instr_i32x4_splat{}
}

var _i32x4_splat = _i32x4_splat_0

type Instr_i32x4_extract_lane struct {
	I OInt
}

func _i32x4_extract_lane_1(_i OInt) Instr_i32x4_extract_lane {
	return Instr_i32x4_extract_lane{
		I: _i,
	}
}

var _i32x4_extract_lane = _i32x4_extract_lane_1

type Instr_i32x4_replace_lane struct {
	I OInt
}

func _i32x4_replace_lane_1(_i OInt) Instr_i32x4_replace_lane {
	return Instr_i32x4_replace_lane{
		I: _i,
	}
}

var _i32x4_replace_lane = _i32x4_replace_lane_1

type Instr_i32x4_eq struct{}

func _i32x4_eq_0() Instr_i32x4_eq {
	return Instr_i32x4_eq{}
}

var _i32x4_eq = _i32x4_eq_0

type Instr_i32x4_ne struct{}

func _i32x4_ne_0() Instr_i32x4_ne {
	return Instr_i32x4_ne{}
}

var _i32x4_ne = _i32x4_ne_0

type Instr_i32x4_lt_s struct{}

func _i32x4_lt_s_0() Instr_i32x4_lt_s {
	return Instr_i32x4_lt_s{}
}

var _i32x4_lt_s = _i32x4_lt_s_0

type Instr_i32x4_lt_u struct{}

func _i32x4_lt_u_0() Instr_i32x4_lt_u {
	return Instr_i32x4_lt_u{}
}

var _i32x4_lt_u = _i32x4_lt_u_0

type Instr_i32x4_le_s struct{}

func _i32x4_le_s_0() Instr_i32x4_le_s {
	return Instr_i32x4_le_s{}
}

var _i32x4_le_s = _i32x4_le_s_0

type Instr_i32x4_le_u struct{}

func _i32x4_le_u_0() Instr_i32x4_le_u {
	return Instr_i32x4_le_u{}
}

var _i32x4_le_u = _i32x4_le_u_0

type Instr_i32x4_gt_s struct{}

func _i32x4_gt_s_0() Instr_i32x4_gt_s {
	return Instr_i32x4_gt_s{}
}

var _i32x4_gt_s = _i32x4_gt_s_0

type Instr_i32x4_gt_u struct{}

func _i32x4_gt_u_0() Instr_i32x4_gt_u {
	return Instr_i32x4_gt_u{}
}

var _i32x4_gt_u = _i32x4_gt_u_0

type Instr_i32x4_ge_s struct{}

func _i32x4_ge_s_0() Instr_i32x4_ge_s {
	return Instr_i32x4_ge_s{}
}

var _i32x4_ge_s = _i32x4_ge_s_0

type Instr_i32x4_ge_u struct{}

func _i32x4_ge_u_0() Instr_i32x4_ge_u {
	return Instr_i32x4_ge_u{}
}

var _i32x4_ge_u = _i32x4_ge_u_0

type Instr_i32x4_abs struct{}

func _i32x4_abs_0() Instr_i32x4_abs {
	return Instr_i32x4_abs{}
}

var _i32x4_abs = _i32x4_abs_0

type Instr_i32x4_neg struct{}

func _i32x4_neg_0() Instr_i32x4_neg {
	return Instr_i32x4_neg{}
}

var _i32x4_neg = _i32x4_neg_0

type Instr_i32x4_bitmask struct{}

func _i32x4_bitmask_0() Instr_i32x4_bitmask {
	return Instr_i32x4_bitmask{}
}

var _i32x4_bitmask = _i32x4_bitmask_0

type Instr_i32x4_all_true struct{}

func _i32x4_all_true_0() Instr_i32x4_all_true {
	return Instr_i32x4_all_true{}
}

var _i32x4_all_true = _i32x4_all_true_0

type Instr_i32x4_extend_low_i16x8_s struct{}

func _i32x4_extend_low_i16x8_s_0() Instr_i32x4_extend_low_i16x8_s {
	return Instr_i32x4_extend_low_i16x8_s{}
}

var _i32x4_extend_low_i16x8_s = _i32x4_extend_low_i16x8_s_0

type Instr_i32x4_extend_high_i16x8_s struct{}

func _i32x4_extend_high_i16x8_s_0() Instr_i32x4_extend_high_i16x8_s {
	return Instr_i32x4_extend_high_i16x8_s{}
}

var _i32x4_extend_high_i16x8_s = _i32x4_extend_high_i16x8_s_0

type Instr_i32x4_extend_low_i16x8_u struct{}

func _i32x4_extend_low_i16x8_u_0() Instr_i32x4_extend_low_i16x8_u {
	return Instr_i32x4_extend_low_i16x8_u{}
}

var _i32x4_extend_low_i16x8_u = _i32x4_extend_low_i16x8_u_0

type Instr_i32x4_extend_high_i16x8_u struct{}

func _i32x4_extend_high_i16x8_u_0() Instr_i32x4_extend_high_i16x8_u {
	return Instr_i32x4_extend_high_i16x8_u{}
}

var _i32x4_extend_high_i16x8_u = _i32x4_extend_high_i16x8_u_0

type Instr_i32x4_shl struct{}

func _i32x4_shl_0() Instr_i32x4_shl {
	return Instr_i32x4_shl{}
}

var _i32x4_shl = _i32x4_shl_0

type Instr_i32x4_shr_s struct{}

func _i32x4_shr_s_0() Instr_i32x4_shr_s {
	return Instr_i32x4_shr_s{}
}

var _i32x4_shr_s = _i32x4_shr_s_0

type Instr_i32x4_shr_u struct{}

func _i32x4_shr_u_0() Instr_i32x4_shr_u {
	return Instr_i32x4_shr_u{}
}

var _i32x4_shr_u = _i32x4_shr_u_0

type Instr_i32x4_add struct{}

func _i32x4_add_0() Instr_i32x4_add {
	return Instr_i32x4_add{}
}

var _i32x4_add = _i32x4_add_0

type Instr_i32x4_sub struct{}

func _i32x4_sub_0() Instr_i32x4_sub {
	return Instr_i32x4_sub{}
}

var _i32x4_sub = _i32x4_sub_0

type Instr_i32x4_min_s struct{}

func _i32x4_min_s_0() Instr_i32x4_min_s {
	return Instr_i32x4_min_s{}
}

var _i32x4_min_s = _i32x4_min_s_0

type Instr_i32x4_min_u struct{}

func _i32x4_min_u_0() Instr_i32x4_min_u {
	return Instr_i32x4_min_u{}
}

var _i32x4_min_u = _i32x4_min_u_0

type Instr_i32x4_max_s struct{}

func _i32x4_max_s_0() Instr_i32x4_max_s {
	return Instr_i32x4_max_s{}
}

var _i32x4_max_s = _i32x4_max_s_0

type Instr_i32x4_max_u struct{}

func _i32x4_max_u_0() Instr_i32x4_max_u {
	return Instr_i32x4_max_u{}
}

var _i32x4_max_u = _i32x4_max_u_0

type Instr_i32x4_mul struct{}

func _i32x4_mul_0() Instr_i32x4_mul {
	return Instr_i32x4_mul{}
}

var _i32x4_mul = _i32x4_mul_0

type Instr_i32x4_dot_i16x8_s struct{}

func _i32x4_dot_i16x8_s_0() Instr_i32x4_dot_i16x8_s {
	return Instr_i32x4_dot_i16x8_s{}
}

var _i32x4_dot_i16x8_s = _i32x4_dot_i16x8_s_0

type Instr_i32x4_trunc_sat_f32x4_s struct{}

func _i32x4_trunc_sat_f32x4_s_0() Instr_i32x4_trunc_sat_f32x4_s {
	return Instr_i32x4_trunc_sat_f32x4_s{}
}

var _i32x4_trunc_sat_f32x4_s = _i32x4_trunc_sat_f32x4_s_0

type Instr_i32x4_trunc_sat_f32x4_u struct{}

func _i32x4_trunc_sat_f32x4_u_0() Instr_i32x4_trunc_sat_f32x4_u {
	return Instr_i32x4_trunc_sat_f32x4_u{}
}

var _i32x4_trunc_sat_f32x4_u = _i32x4_trunc_sat_f32x4_u_0

type Instr_i32x4_trunc_sat_f64x2_s_zero struct{}

func _i32x4_trunc_sat_f64x2_s_zero_0() Instr_i32x4_trunc_sat_f64x2_s_zero {
	return Instr_i32x4_trunc_sat_f64x2_s_zero{}
}

var _i32x4_trunc_sat_f64x2_s_zero = _i32x4_trunc_sat_f64x2_s_zero_0

type Instr_i32x4_trunc_sat_f64x2_u_zero struct{}

func _i32x4_trunc_sat_f64x2_u_zero_0() Instr_i32x4_trunc_sat_f64x2_u_zero {
	return Instr_i32x4_trunc_sat_f64x2_u_zero{}
}

var _i32x4_trunc_sat_f64x2_u_zero = _i32x4_trunc_sat_f64x2_u_zero_0

type Instr_i32x4_extmul_low_i16x8_s struct{}

func _i32x4_extmul_low_i16x8_s_0() Instr_i32x4_extmul_low_i16x8_s {
	return Instr_i32x4_extmul_low_i16x8_s{}
}

var _i32x4_extmul_low_i16x8_s = _i32x4_extmul_low_i16x8_s_0

type Instr_i32x4_extmul_high_i16x8_s struct{}

func _i32x4_extmul_high_i16x8_s_0() Instr_i32x4_extmul_high_i16x8_s {
	return Instr_i32x4_extmul_high_i16x8_s{}
}

var _i32x4_extmul_high_i16x8_s = _i32x4_extmul_high_i16x8_s_0

type Instr_i32x4_extmul_low_i16x8_u struct{}

func _i32x4_extmul_low_i16x8_u_0() Instr_i32x4_extmul_low_i16x8_u {
	return Instr_i32x4_extmul_low_i16x8_u{}
}

var _i32x4_extmul_low_i16x8_u = _i32x4_extmul_low_i16x8_u_0

type Instr_i32x4_extmul_high_i16x8_u struct{}

func _i32x4_extmul_high_i16x8_u_0() Instr_i32x4_extmul_high_i16x8_u {
	return Instr_i32x4_extmul_high_i16x8_u{}
}

var _i32x4_extmul_high_i16x8_u = _i32x4_extmul_high_i16x8_u_0

type Instr_i32x4_extadd_pairwise_i16x8_s struct{}

func _i32x4_extadd_pairwise_i16x8_s_0() Instr_i32x4_extadd_pairwise_i16x8_s {
	return Instr_i32x4_extadd_pairwise_i16x8_s{}
}

var _i32x4_extadd_pairwise_i16x8_s = _i32x4_extadd_pairwise_i16x8_s_0

type Instr_i32x4_extadd_pairwise_i16x8_u struct{}

func _i32x4_extadd_pairwise_i16x8_u_0() Instr_i32x4_extadd_pairwise_i16x8_u {
	return Instr_i32x4_extadd_pairwise_i16x8_u{}
}

var _i32x4_extadd_pairwise_i16x8_u = _i32x4_extadd_pairwise_i16x8_u_0

type Instr_i64x2_splat struct{}

func _i64x2_splat_0() Instr_i64x2_splat {
	return Instr_i64x2_splat{}
}

var _i64x2_splat = _i64x2_splat_0

type Instr_i64x2_extract_lane struct {
	I OInt
}

func _i64x2_extract_lane_1(_i OInt) Instr_i64x2_extract_lane {
	return Instr_i64x2_extract_lane{
		I: _i,
	}
}

var _i64x2_extract_lane = _i64x2_extract_lane_1

type Instr_i64x2_replace_lane struct {
	I OInt
}

func _i64x2_replace_lane_1(_i OInt) Instr_i64x2_replace_lane {
	return Instr_i64x2_replace_lane{
		I: _i,
	}
}

var _i64x2_replace_lane = _i64x2_replace_lane_1

type Instr_i64x2_extend_low_i32x4_s struct{}

func _i64x2_extend_low_i32x4_s_0() Instr_i64x2_extend_low_i32x4_s {
	return Instr_i64x2_extend_low_i32x4_s{}
}

var _i64x2_extend_low_i32x4_s = _i64x2_extend_low_i32x4_s_0

type Instr_i64x2_extend_high_i32x4_s struct{}

func _i64x2_extend_high_i32x4_s_0() Instr_i64x2_extend_high_i32x4_s {
	return Instr_i64x2_extend_high_i32x4_s{}
}

var _i64x2_extend_high_i32x4_s = _i64x2_extend_high_i32x4_s_0

type Instr_i64x2_extend_low_i32x4_u struct{}

func _i64x2_extend_low_i32x4_u_0() Instr_i64x2_extend_low_i32x4_u {
	return Instr_i64x2_extend_low_i32x4_u{}
}

var _i64x2_extend_low_i32x4_u = _i64x2_extend_low_i32x4_u_0

type Instr_i64x2_extend_high_i32x4_u struct{}

func _i64x2_extend_high_i32x4_u_0() Instr_i64x2_extend_high_i32x4_u {
	return Instr_i64x2_extend_high_i32x4_u{}
}

var _i64x2_extend_high_i32x4_u = _i64x2_extend_high_i32x4_u_0

type Instr_i64x2_eq struct{}

func _i64x2_eq_0() Instr_i64x2_eq {
	return Instr_i64x2_eq{}
}

var _i64x2_eq = _i64x2_eq_0

type Instr_i64x2_ne struct{}

func _i64x2_ne_0() Instr_i64x2_ne {
	return Instr_i64x2_ne{}
}

var _i64x2_ne = _i64x2_ne_0

type Instr_i64x2_lt_s struct{}

func _i64x2_lt_s_0() Instr_i64x2_lt_s {
	return Instr_i64x2_lt_s{}
}

var _i64x2_lt_s = _i64x2_lt_s_0

type Instr_i64x2_le_s struct{}

func _i64x2_le_s_0() Instr_i64x2_le_s {
	return Instr_i64x2_le_s{}
}

var _i64x2_le_s = _i64x2_le_s_0

type Instr_i64x2_gt_s struct{}

func _i64x2_gt_s_0() Instr_i64x2_gt_s {
	return Instr_i64x2_gt_s{}
}

var _i64x2_gt_s = _i64x2_gt_s_0

type Instr_i64x2_ge_s struct{}

func _i64x2_ge_s_0() Instr_i64x2_ge_s {
	return Instr_i64x2_ge_s{}
}

var _i64x2_ge_s = _i64x2_ge_s_0

type Instr_i64x2_abs struct{}

func _i64x2_abs_0() Instr_i64x2_abs {
	return Instr_i64x2_abs{}
}

var _i64x2_abs = _i64x2_abs_0

type Instr_i64x2_neg struct{}

func _i64x2_neg_0() Instr_i64x2_neg {
	return Instr_i64x2_neg{}
}

var _i64x2_neg = _i64x2_neg_0

type Instr_i64x2_bitmask struct{}

func _i64x2_bitmask_0() Instr_i64x2_bitmask {
	return Instr_i64x2_bitmask{}
}

var _i64x2_bitmask = _i64x2_bitmask_0

type Instr_i64x2_all_true struct{}

func _i64x2_all_true_0() Instr_i64x2_all_true {
	return Instr_i64x2_all_true{}
}

var _i64x2_all_true = _i64x2_all_true_0

type Instr_i64x2_add struct{}

func _i64x2_add_0() Instr_i64x2_add {
	return Instr_i64x2_add{}
}

var _i64x2_add = _i64x2_add_0

type Instr_i64x2_sub struct{}

func _i64x2_sub_0() Instr_i64x2_sub {
	return Instr_i64x2_sub{}
}

var _i64x2_sub = _i64x2_sub_0

type Instr_i64x2_mul struct{}

func _i64x2_mul_0() Instr_i64x2_mul {
	return Instr_i64x2_mul{}
}

var _i64x2_mul = _i64x2_mul_0

type Instr_i64x2_shl struct{}

func _i64x2_shl_0() Instr_i64x2_shl {
	return Instr_i64x2_shl{}
}

var _i64x2_shl = _i64x2_shl_0

type Instr_i64x2_shr_s struct{}

func _i64x2_shr_s_0() Instr_i64x2_shr_s {
	return Instr_i64x2_shr_s{}
}

var _i64x2_shr_s = _i64x2_shr_s_0

type Instr_i64x2_shr_u struct{}

func _i64x2_shr_u_0() Instr_i64x2_shr_u {
	return Instr_i64x2_shr_u{}
}

var _i64x2_shr_u = _i64x2_shr_u_0

type Instr_i64x2_extmul_low_i32x4_s struct{}

func _i64x2_extmul_low_i32x4_s_0() Instr_i64x2_extmul_low_i32x4_s {
	return Instr_i64x2_extmul_low_i32x4_s{}
}

var _i64x2_extmul_low_i32x4_s = _i64x2_extmul_low_i32x4_s_0

type Instr_i64x2_extmul_high_i32x4_s struct{}

func _i64x2_extmul_high_i32x4_s_0() Instr_i64x2_extmul_high_i32x4_s {
	return Instr_i64x2_extmul_high_i32x4_s{}
}

var _i64x2_extmul_high_i32x4_s = _i64x2_extmul_high_i32x4_s_0

type Instr_i64x2_extmul_low_i32x4_u struct{}

func _i64x2_extmul_low_i32x4_u_0() Instr_i64x2_extmul_low_i32x4_u {
	return Instr_i64x2_extmul_low_i32x4_u{}
}

var _i64x2_extmul_low_i32x4_u = _i64x2_extmul_low_i32x4_u_0

type Instr_i64x2_extmul_high_i32x4_u struct{}

func _i64x2_extmul_high_i32x4_u_0() Instr_i64x2_extmul_high_i32x4_u {
	return Instr_i64x2_extmul_high_i32x4_u{}
}

var _i64x2_extmul_high_i32x4_u = _i64x2_extmul_high_i32x4_u_0

type Instr_f32x4_splat struct{}

func _f32x4_splat_0() Instr_f32x4_splat {
	return Instr_f32x4_splat{}
}

var _f32x4_splat = _f32x4_splat_0

type Instr_f32x4_extract_lane struct {
	I OInt
}

func _f32x4_extract_lane_1(_i OInt) Instr_f32x4_extract_lane {
	return Instr_f32x4_extract_lane{
		I: _i,
	}
}

var _f32x4_extract_lane = _f32x4_extract_lane_1

type Instr_f32x4_replace_lane struct {
	I OInt
}

func _f32x4_replace_lane_1(_i OInt) Instr_f32x4_replace_lane {
	return Instr_f32x4_replace_lane{
		I: _i,
	}
}

var _f32x4_replace_lane = _f32x4_replace_lane_1

type Instr_f32x4_eq struct{}

func _f32x4_eq_0() Instr_f32x4_eq {
	return Instr_f32x4_eq{}
}

var _f32x4_eq = _f32x4_eq_0

type Instr_f32x4_ne struct{}

func _f32x4_ne_0() Instr_f32x4_ne {
	return Instr_f32x4_ne{}
}

var _f32x4_ne = _f32x4_ne_0

type Instr_f32x4_lt struct{}

func _f32x4_lt_0() Instr_f32x4_lt {
	return Instr_f32x4_lt{}
}

var _f32x4_lt = _f32x4_lt_0

type Instr_f32x4_le struct{}

func _f32x4_le_0() Instr_f32x4_le {
	return Instr_f32x4_le{}
}

var _f32x4_le = _f32x4_le_0

type Instr_f32x4_gt struct{}

func _f32x4_gt_0() Instr_f32x4_gt {
	return Instr_f32x4_gt{}
}

var _f32x4_gt = _f32x4_gt_0

type Instr_f32x4_ge struct{}

func _f32x4_ge_0() Instr_f32x4_ge {
	return Instr_f32x4_ge{}
}

var _f32x4_ge = _f32x4_ge_0

type Instr_f32x4_abs struct{}

func _f32x4_abs_0() Instr_f32x4_abs {
	return Instr_f32x4_abs{}
}

var _f32x4_abs = _f32x4_abs_0

type Instr_f32x4_neg struct{}

func _f32x4_neg_0() Instr_f32x4_neg {
	return Instr_f32x4_neg{}
}

var _f32x4_neg = _f32x4_neg_0

type Instr_f32x4_sqrt struct{}

func _f32x4_sqrt_0() Instr_f32x4_sqrt {
	return Instr_f32x4_sqrt{}
}

var _f32x4_sqrt = _f32x4_sqrt_0

type Instr_f32x4_ceil struct{}

func _f32x4_ceil_0() Instr_f32x4_ceil {
	return Instr_f32x4_ceil{}
}

var _f32x4_ceil = _f32x4_ceil_0

type Instr_f32x4_floor struct{}

func _f32x4_floor_0() Instr_f32x4_floor {
	return Instr_f32x4_floor{}
}

var _f32x4_floor = _f32x4_floor_0

type Instr_f32x4_trunc struct{}

func _f32x4_trunc_0() Instr_f32x4_trunc {
	return Instr_f32x4_trunc{}
}

var _f32x4_trunc = _f32x4_trunc_0

type Instr_f32x4_nearest struct{}

func _f32x4_nearest_0() Instr_f32x4_nearest {
	return Instr_f32x4_nearest{}
}

var _f32x4_nearest = _f32x4_nearest_0

type Instr_f32x4_add struct{}

func _f32x4_add_0() Instr_f32x4_add {
	return Instr_f32x4_add{}
}

var _f32x4_add = _f32x4_add_0

type Instr_f32x4_sub struct{}

func _f32x4_sub_0() Instr_f32x4_sub {
	return Instr_f32x4_sub{}
}

var _f32x4_sub = _f32x4_sub_0

type Instr_f32x4_mul struct{}

func _f32x4_mul_0() Instr_f32x4_mul {
	return Instr_f32x4_mul{}
}

var _f32x4_mul = _f32x4_mul_0

type Instr_f32x4_div struct{}

func _f32x4_div_0() Instr_f32x4_div {
	return Instr_f32x4_div{}
}

var _f32x4_div = _f32x4_div_0

type Instr_f32x4_min struct{}

func _f32x4_min_0() Instr_f32x4_min {
	return Instr_f32x4_min{}
}

var _f32x4_min = _f32x4_min_0

type Instr_f32x4_max struct{}

func _f32x4_max_0() Instr_f32x4_max {
	return Instr_f32x4_max{}
}

var _f32x4_max = _f32x4_max_0

type Instr_f32x4_pmin struct{}

func _f32x4_pmin_0() Instr_f32x4_pmin {
	return Instr_f32x4_pmin{}
}

var _f32x4_pmin = _f32x4_pmin_0

type Instr_f32x4_pmax struct{}

func _f32x4_pmax_0() Instr_f32x4_pmax {
	return Instr_f32x4_pmax{}
}

var _f32x4_pmax = _f32x4_pmax_0

type Instr_f32x4_demote_f64x2_zero struct{}

func _f32x4_demote_f64x2_zero_0() Instr_f32x4_demote_f64x2_zero {
	return Instr_f32x4_demote_f64x2_zero{}
}

var _f32x4_demote_f64x2_zero = _f32x4_demote_f64x2_zero_0

type Instr_f32x4_convert_i32x4_s struct{}

func _f32x4_convert_i32x4_s_0() Instr_f32x4_convert_i32x4_s {
	return Instr_f32x4_convert_i32x4_s{}
}

var _f32x4_convert_i32x4_s = _f32x4_convert_i32x4_s_0

type Instr_f32x4_convert_i32x4_u struct{}

func _f32x4_convert_i32x4_u_0() Instr_f32x4_convert_i32x4_u {
	return Instr_f32x4_convert_i32x4_u{}
}

var _f32x4_convert_i32x4_u = _f32x4_convert_i32x4_u_0

type Instr_f64x2_splat struct{}

func _f64x2_splat_0() Instr_f64x2_splat {
	return Instr_f64x2_splat{}
}

var _f64x2_splat = _f64x2_splat_0

type Instr_f64x2_extract_lane struct {
	I OInt
}

func _f64x2_extract_lane_1(_i OInt) Instr_f64x2_extract_lane {
	return Instr_f64x2_extract_lane{
		I: _i,
	}
}

var _f64x2_extract_lane = _f64x2_extract_lane_1

type Instr_f64x2_replace_lane struct {
	I OInt
}

func _f64x2_replace_lane_1(_i OInt) Instr_f64x2_replace_lane {
	return Instr_f64x2_replace_lane{
		I: _i,
	}
}

var _f64x2_replace_lane = _f64x2_replace_lane_1

type Instr_f64x2_eq struct{}

func _f64x2_eq_0() Instr_f64x2_eq {
	return Instr_f64x2_eq{}
}

var _f64x2_eq = _f64x2_eq_0

type Instr_f64x2_ne struct{}

func _f64x2_ne_0() Instr_f64x2_ne {
	return Instr_f64x2_ne{}
}

var _f64x2_ne = _f64x2_ne_0

type Instr_f64x2_lt struct{}

func _f64x2_lt_0() Instr_f64x2_lt {
	return Instr_f64x2_lt{}
}

var _f64x2_lt = _f64x2_lt_0

type Instr_f64x2_le struct{}

func _f64x2_le_0() Instr_f64x2_le {
	return Instr_f64x2_le{}
}

var _f64x2_le = _f64x2_le_0

type Instr_f64x2_gt struct{}

func _f64x2_gt_0() Instr_f64x2_gt {
	return Instr_f64x2_gt{}
}

var _f64x2_gt = _f64x2_gt_0

type Instr_f64x2_ge struct{}

func _f64x2_ge_0() Instr_f64x2_ge {
	return Instr_f64x2_ge{}
}

var _f64x2_ge = _f64x2_ge_0

type Instr_f64x2_neg struct{}

func _f64x2_neg_0() Instr_f64x2_neg {
	return Instr_f64x2_neg{}
}

var _f64x2_neg = _f64x2_neg_0

type Instr_f64x2_sqrt struct{}

func _f64x2_sqrt_0() Instr_f64x2_sqrt {
	return Instr_f64x2_sqrt{}
}

var _f64x2_sqrt = _f64x2_sqrt_0

type Instr_f64x2_ceil struct{}

func _f64x2_ceil_0() Instr_f64x2_ceil {
	return Instr_f64x2_ceil{}
}

var _f64x2_ceil = _f64x2_ceil_0

type Instr_f64x2_floor struct{}

func _f64x2_floor_0() Instr_f64x2_floor {
	return Instr_f64x2_floor{}
}

var _f64x2_floor = _f64x2_floor_0

type Instr_f64x2_trunc struct{}

func _f64x2_trunc_0() Instr_f64x2_trunc {
	return Instr_f64x2_trunc{}
}

var _f64x2_trunc = _f64x2_trunc_0

type Instr_f64x2_nearest struct{}

func _f64x2_nearest_0() Instr_f64x2_nearest {
	return Instr_f64x2_nearest{}
}

var _f64x2_nearest = _f64x2_nearest_0

type Instr_f64x2_add struct{}

func _f64x2_add_0() Instr_f64x2_add {
	return Instr_f64x2_add{}
}

var _f64x2_add = _f64x2_add_0

type Instr_f64x2_sub struct{}

func _f64x2_sub_0() Instr_f64x2_sub {
	return Instr_f64x2_sub{}
}

var _f64x2_sub = _f64x2_sub_0

type Instr_f64x2_mul struct{}

func _f64x2_mul_0() Instr_f64x2_mul {
	return Instr_f64x2_mul{}
}

var _f64x2_mul = _f64x2_mul_0

type Instr_f64x2_div struct{}

func _f64x2_div_0() Instr_f64x2_div {
	return Instr_f64x2_div{}
}

var _f64x2_div = _f64x2_div_0

type Instr_f64x2_min struct{}

func _f64x2_min_0() Instr_f64x2_min {
	return Instr_f64x2_min{}
}

var _f64x2_min = _f64x2_min_0

type Instr_f64x2_max struct{}

func _f64x2_max_0() Instr_f64x2_max {
	return Instr_f64x2_max{}
}

var _f64x2_max = _f64x2_max_0

type Instr_f64x2_abs struct{}

func _f64x2_abs_0() Instr_f64x2_abs {
	return Instr_f64x2_abs{}
}

var _f64x2_abs = _f64x2_abs_0

type Instr_f64x2_pmin struct{}

func _f64x2_pmin_0() Instr_f64x2_pmin {
	return Instr_f64x2_pmin{}
}

var _f64x2_pmin = _f64x2_pmin_0

type Instr_f64x2_pmax struct{}

func _f64x2_pmax_0() Instr_f64x2_pmax {
	return Instr_f64x2_pmax{}
}

var _f64x2_pmax = _f64x2_pmax_0

type Instr_f64x2_promote_low_f32x4 struct{}

func _f64x2_promote_low_f32x4_0() Instr_f64x2_promote_low_f32x4 {
	return Instr_f64x2_promote_low_f32x4{}
}

var _f64x2_promote_low_f32x4 = _f64x2_promote_low_f32x4_0

type Instr_f64x2_convert_low_i32x4_s struct{}

func _f64x2_convert_low_i32x4_s_0() Instr_f64x2_convert_low_i32x4_s {
	return Instr_f64x2_convert_low_i32x4_s{}
}

var _f64x2_convert_low_i32x4_s = _f64x2_convert_low_i32x4_s_0

type Instr_f64x2_convert_low_i32x4_u struct{}

func _f64x2_convert_low_i32x4_u_0() Instr_f64x2_convert_low_i32x4_u {
	return Instr_f64x2_convert_low_i32x4_u{}
}

var _f64x2_convert_low_i32x4_u = _f64x2_convert_low_i32x4_u_0

type Instr_i8x16_relaxed_swizzle struct{}

func _i8x16_relaxed_swizzle_0() Instr_i8x16_relaxed_swizzle {
	return Instr_i8x16_relaxed_swizzle{}
}

var _i8x16_relaxed_swizzle = _i8x16_relaxed_swizzle_0

type Instr_i8x16_relaxed_laneselect struct{}

func _i8x16_relaxed_laneselect_0() Instr_i8x16_relaxed_laneselect {
	return Instr_i8x16_relaxed_laneselect{}
}

var _i8x16_relaxed_laneselect = _i8x16_relaxed_laneselect_0

type Instr_i16x8_relaxed_q15mulr_s struct{}

func _i16x8_relaxed_q15mulr_s_0() Instr_i16x8_relaxed_q15mulr_s {
	return Instr_i16x8_relaxed_q15mulr_s{}
}

var _i16x8_relaxed_q15mulr_s = _i16x8_relaxed_q15mulr_s_0

type Instr_i16x8_relaxed_laneselect struct{}

func _i16x8_relaxed_laneselect_0() Instr_i16x8_relaxed_laneselect {
	return Instr_i16x8_relaxed_laneselect{}
}

var _i16x8_relaxed_laneselect = _i16x8_relaxed_laneselect_0

type Instr_i32x4_relaxed_trunc_f32x4_s struct{}

func _i32x4_relaxed_trunc_f32x4_s_0() Instr_i32x4_relaxed_trunc_f32x4_s {
	return Instr_i32x4_relaxed_trunc_f32x4_s{}
}

var _i32x4_relaxed_trunc_f32x4_s = _i32x4_relaxed_trunc_f32x4_s_0

type Instr_i32x4_relaxed_trunc_f32x4_u struct{}

func _i32x4_relaxed_trunc_f32x4_u_0() Instr_i32x4_relaxed_trunc_f32x4_u {
	return Instr_i32x4_relaxed_trunc_f32x4_u{}
}

var _i32x4_relaxed_trunc_f32x4_u = _i32x4_relaxed_trunc_f32x4_u_0

type Instr_i32x4_relaxed_trunc_f64x2_s_zero struct{}

func _i32x4_relaxed_trunc_f64x2_s_zero_0() Instr_i32x4_relaxed_trunc_f64x2_s_zero {
	return Instr_i32x4_relaxed_trunc_f64x2_s_zero{}
}

var _i32x4_relaxed_trunc_f64x2_s_zero = _i32x4_relaxed_trunc_f64x2_s_zero_0

type Instr_i32x4_relaxed_trunc_f64x2_u_zero struct{}

func _i32x4_relaxed_trunc_f64x2_u_zero_0() Instr_i32x4_relaxed_trunc_f64x2_u_zero {
	return Instr_i32x4_relaxed_trunc_f64x2_u_zero{}
}

var _i32x4_relaxed_trunc_f64x2_u_zero = _i32x4_relaxed_trunc_f64x2_u_zero_0

type Instr_i32x4_relaxed_laneselect struct{}

func _i32x4_relaxed_laneselect_0() Instr_i32x4_relaxed_laneselect {
	return Instr_i32x4_relaxed_laneselect{}
}

var _i32x4_relaxed_laneselect = _i32x4_relaxed_laneselect_0

type Instr_i64x2_relaxed_laneselect struct{}

func _i64x2_relaxed_laneselect_0() Instr_i64x2_relaxed_laneselect {
	return Instr_i64x2_relaxed_laneselect{}
}

var _i64x2_relaxed_laneselect = _i64x2_relaxed_laneselect_0

type Instr_f32x4_relaxed_madd struct{}

func _f32x4_relaxed_madd_0() Instr_f32x4_relaxed_madd {
	return Instr_f32x4_relaxed_madd{}
}

var _f32x4_relaxed_madd = _f32x4_relaxed_madd_0

type Instr_f32x4_relaxed_nmadd struct{}

func _f32x4_relaxed_nmadd_0() Instr_f32x4_relaxed_nmadd {
	return Instr_f32x4_relaxed_nmadd{}
}

var _f32x4_relaxed_nmadd = _f32x4_relaxed_nmadd_0

type Instr_f32x4_relaxed_min struct{}

func _f32x4_relaxed_min_0() Instr_f32x4_relaxed_min {
	return Instr_f32x4_relaxed_min{}
}

var _f32x4_relaxed_min = _f32x4_relaxed_min_0

type Instr_f32x4_relaxed_max struct{}

func _f32x4_relaxed_max_0() Instr_f32x4_relaxed_max {
	return Instr_f32x4_relaxed_max{}
}

var _f32x4_relaxed_max = _f32x4_relaxed_max_0

type Instr_f64x2_relaxed_madd struct{}

func _f64x2_relaxed_madd_0() Instr_f64x2_relaxed_madd {
	return Instr_f64x2_relaxed_madd{}
}

var _f64x2_relaxed_madd = _f64x2_relaxed_madd_0

type Instr_f64x2_relaxed_nmadd struct{}

func _f64x2_relaxed_nmadd_0() Instr_f64x2_relaxed_nmadd {
	return Instr_f64x2_relaxed_nmadd{}
}

var _f64x2_relaxed_nmadd = _f64x2_relaxed_nmadd_0

type Instr_f64x2_relaxed_min struct{}

func _f64x2_relaxed_min_0() Instr_f64x2_relaxed_min {
	return Instr_f64x2_relaxed_min{}
}

var _f64x2_relaxed_min = _f64x2_relaxed_min_0

type Instr_f64x2_relaxed_max struct{}

func _f64x2_relaxed_max_0() Instr_f64x2_relaxed_max {
	return Instr_f64x2_relaxed_max{}
}

var _f64x2_relaxed_max = _f64x2_relaxed_max_0

type Instr_i16x8_relaxed_dot_i8x16_i7x16_s struct{}

func _i16x8_relaxed_dot_i8x16_i7x16_s_0() Instr_i16x8_relaxed_dot_i8x16_i7x16_s {
	return Instr_i16x8_relaxed_dot_i8x16_i7x16_s{}
}

var _i16x8_relaxed_dot_i8x16_i7x16_s = _i16x8_relaxed_dot_i8x16_i7x16_s_0

type Instr_i32x4_relaxed_dot_i8x16_i7x16_add_s struct{}

func _i32x4_relaxed_dot_i8x16_i7x16_add_s_0() Instr_i32x4_relaxed_dot_i8x16_i7x16_add_s {
	return Instr_i32x4_relaxed_dot_i8x16_i7x16_add_s{}
}

var _i32x4_relaxed_dot_i8x16_i7x16_add_s = _i32x4_relaxed_dot_i8x16_i7x16_add_s_0

func _bit_2(_i OInt, _n OInt) bool {
	__tmp1 := _operatorNotEq_2(_int_operatorland_2(_n, _int_operatorlsl_2(1, _i)), 0)
	return __tmp1
}

var _bit = _bit_2

func _byte_1(_s *Stream) OInt {
	__tmp1 := _get_1(_s)
	return __tmp1
}

var _byte = _byte_1

func _word16_1(_s *Stream) OInt {
	__tmp1 := _byte_1(_s)
	_lo := __tmp1
	__tmp4 := _byte_1(_s)
	_hi := __tmp4
	__tmp7 := _int_operatorPlus_2(_int_operatorlsl_2(_hi, 8), _lo)
	return __tmp7
}

var _word16 = _word16_1

func _word32_1(_s *Stream) OInt32 {
	__tmp1 := _Int32_of_int_1(_word16_1(_s))
	_lo := __tmp1
	__tmp5 := _Int32_of_int_1(_word16_1(_s))
	_hi := __tmp5
	__tmp9 := _Int32_add_2(_lo, _Int32_shift_left_2(_hi, 16))
	return __tmp9
}

var _word32 = _word32_1

func _word64_1(_s *Stream) OInt64 {
	__tmp1 := _I64_convert_extend_i32_u_1(_word32_1(_s))
	_lo := __tmp1
	__tmp5 := _I64_convert_extend_i32_u_1(_word32_1(_s))
	_hi := __tmp5
	__tmp9 := _Int64_add_2(_lo, _Int64_shift_left_2(_hi, 32))
	return __tmp9
}

var _word64 = _word64_1

func _uN_2(_n OInt, _s *Stream) OInt64 {
	__tmp1 := _require_4(_operatorGt_2(_n, 0), _s, _pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := _byte_1(_s)
	_b := __tmp7
	__tmp10 := _require_4(_bool_operatorOr_2(_operatorGte_2(_n, 7), _operatorLt_2(_int_operatorland_2(_b, 0x7f), _int_operatorlsl_2(1, _n))), _s, _int_operatorMinus_2(_pos_1(_s), 1), "integer too large")
	_ = __tmp10
	__tmp23 := _Int64_of_int_1(_int_operatorland_2(_b, 0x7f))
	_x := __tmp23
	var __tmp27 OInt64
	if _operatorEq_2(_int_operatorland_2(_b, 0x80), 0) {
		__tmp31 := _x
		__tmp27 = __tmp31
	} else {
		__tmp32 := _Int64_logor_2(_x, _Int64_shift_left_2(_uN_2(_int_operatorMinus_2(_n, 7), _s), 7))
		__tmp27 = __tmp32
	}
	return __tmp27

}

var _uN = _uN_2

func _sN_2(_n OInt, _s *Stream) OInt64 {
	__tmp1 := _require_4(_operatorGt_2(_n, 0), _s, _pos_1(_s), "integer representation too long")
	_ = __tmp1
	__tmp7 := _byte_1(_s)
	_b := __tmp7
	__tmp10 := _int_operatorland_2(_int_operatorlsl_2(-(1), _int_operatorMinus_2(_n, 1)), 0x7f)
	_mask := __tmp10
	__tmp15 := _require_4(_bool_operatorOr_2(_operatorGte_2(_n, 7), _bool_operatorOr_2(_operatorEq_2(_int_operatorland_2(_b, _mask), 0), _operatorEq_2(_int_operatorland_2(_b, _mask), _mask))), _s, _int_operatorMinus_2(_pos_1(_s), 1), "integer too large")
	_ = __tmp15
	__tmp33 := _Int64_of_int_1(_int_operatorland_2(_b, 0x7f))
	_x := __tmp33
	var __tmp37 OInt64
	if _operatorEq_2(_int_operatorland_2(_b, 0x80), 0) {
		var __tmp41 OInt64
		if _operatorEq_2(_int_operatorland_2(_b, 0x40), 0) {
			__tmp45 := _x
			__tmp41 = __tmp45
		} else {
			__tmp46 := _Int64_logor_2(_x, _Int64_logxor_2(-(1), 0x7f))
			__tmp41 = __tmp46
		}
		__tmp37 = __tmp41
	} else {
		__tmp49 := _Int64_logor_2(_x, _Int64_shift_left_2(_sN_2(_int_operatorMinus_2(_n, 7), _s), 7))
		__tmp37 = __tmp49
	}
	return __tmp37

}

var _sN = _sN_2

func _u32_1(_s *Stream) OInt32 {
	__tmp1 := _Int64_to_int32_1(_uN_2(32, _s))
	return __tmp1
}

var _u32 = _u32_1

func _u64_1(_s *Stream) OInt64 {
	__tmp1 := _uN_2(64, _s)
	return __tmp1
}

var _u64 = _u64_1

func _s7_1(_s *Stream) OInt {
	__tmp1 := _Int64_to_int_1(_sN_2(7, _s))
	return __tmp1
}

var _s7 = _s7_1

func _s32_1(_s *Stream) OInt32 {
	__tmp1 := _Int64_to_int32_1(_sN_2(32, _s))
	return __tmp1
}

var _s32 = _s32_1

func _s33_1(_s *Stream) OInt32 {
	__tmp1 := _I32_convert_wrap_i64_1(_sN_2(33, _s))
	return __tmp1
}

var _s33 = _s33_1

func _s64_1(_s *Stream) OInt64 {
	__tmp1 := _sN_2(64, _s)
	return __tmp1
}

var _s64 = _s64_1

func _f32_1(_s *Stream) float32 {
	__tmp1 := _F32_of_bits_1(_word32_1(_s))
	return __tmp1
}

var _f32 = _f32_1

func _f64_1(_s *Stream) float64 {
	__tmp1 := _F64_of_bits_1(_word64_1(_s))
	return __tmp1
}

var _f64 = _f64_1

func _v128_1(_s *Stream) V128 {
	__tmp1 := _V128_of_bits_1(_get_string_2(16, _s))
	return __tmp1
}

var _v128 = _v128_1

func _len32_1(_s *Stream) OInt {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _u32_1(_s)
	_n := __tmp4
	var __tmp7 OInt
	if _I32_le_u_2(_n, _Int32_of_int_1(_int_operatorMinus_2(_len_1(_s), _pos))) {
		__tmp15 := _Int32_to_int_1(_n)
		__tmp7 = __tmp15
	} else {
		__tmp17 := _error_3(_s, _pos, "length out of bounds")
		__tmp7 = __tmp17
	}
	return __tmp7
}

var _len32 = _len32_1

func _string_1(_s *Stream) string {
	__tmp1 := _len32_1(_s)
	_n := __tmp1
	__tmp4 := _get_string_2(_n, _s)
	return __tmp4
}

var _string = _string_1

func _zero_1(_s *Stream) OUnit {
	__tmp1 := _expect_3(0x00, _s, "zero byte expected")
	return __tmp1
}

var _zero = _zero_1

func _var_1(_s *Stream) OLocalIdx {
	__tmp1 := _u32_1(_s)
	return __tmp1
}

var _var = _var_1

func _mutability_1(_s *Stream) OMut {
	var __tmp1 OMut
	__tmp2 := _byte_1(_s)
	if __tmp2 == 0 {
		__tmp5 := _Cons
		__tmp1 = __tmp5
	} else if __tmp2 == 1 {
		__tmp6 := _Var
		__tmp1 = __tmp6
	} else if __ := __tmp2; true {
		_ = __
		__tmp9 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed mutability")
		__tmp1 = __tmp9
	}
	return __tmp1
}

var _mutability = _mutability_1

func _var_type_2(_var func(*Stream) OLocalIdx, _s *Stream) OVar {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 OVar
	__tmp5 := _var_1(_s)
	if _i := __tmp5; _operatorGte_2(_i, 0) {
		_ = _i
		__tmp12 := _StatX_1(_i)
		__tmp4 = __tmp12
	} else if __ := __tmp5; true {
		_ = __
		__tmp16 := _error_3(_s, _pos, "malformed type index")
		__tmp4 = __tmp16
	}
	return __tmp4
}

var _var_type = _var_type_2

func _num_type_1(_s *Stream) ONumType {
	var __tmp1 ONumType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x01 {
		__tmp5 := _I32T
		__tmp1 = __tmp5
	} else if __tmp2 == -0x02 {
		__tmp6 := _I64T
		__tmp1 = __tmp6
	} else if __tmp2 == -0x03 {
		__tmp7 := _F32T
		__tmp1 = __tmp7
	} else if __tmp2 == -0x04 {
		__tmp8 := _F64T
		__tmp1 = __tmp8
	} else if __ := __tmp2; true {
		_ = __
		__tmp11 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed number type")
		__tmp1 = __tmp11
	}
	return __tmp1
}

var _num_type = _num_type_1

func _vec_type_1(_s *Stream) OVecType {
	var __tmp1 OVecType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x05 {
		__tmp5 := _V128T
		__tmp1 = __tmp5
	} else if __ := __tmp2; true {
		_ = __
		__tmp8 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed vector type")
		__tmp1 = __tmp8
	}
	return __tmp1
}

var _vec_type = _vec_type_1

func _heap_type_1(_s *Stream) OHeapType {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _either_2([]func(*Stream) OHeapType{func(_s *Stream) OHeapType {
		__tmp5 := _VarHT_1(_var_type_2(_s33, _s))
		return __tmp5
	}, func(_s *Stream) OHeapType {
		var __tmp9 OHeapType
		__tmp10 := _s7_1(_s)
		if __tmp10 == -0x0c {
			__tmp13 := _NoExnHT
			__tmp9 = __tmp13
		} else if __tmp10 == -0x0d {
			__tmp14 := _NoFuncHT
			__tmp9 = __tmp14
		} else if __tmp10 == -0x0e {
			__tmp15 := _NoExternHT
			__tmp9 = __tmp15
		} else if __tmp10 == -0x0f {
			__tmp16 := _NoneHT
			__tmp9 = __tmp16
		} else if __tmp10 == -0x10 {
			__tmp17 := _FuncHT
			__tmp9 = __tmp17
		} else if __tmp10 == -0x11 {
			__tmp18 := _ExternHT
			__tmp9 = __tmp18
		} else if __tmp10 == -0x12 {
			__tmp19 := _AnyHT
			__tmp9 = __tmp19
		} else if __tmp10 == -0x13 {
			__tmp20 := _EqHT
			__tmp9 = __tmp20
		} else if __tmp10 == -0x14 {
			__tmp21 := _I31HT
			__tmp9 = __tmp21
		} else if __tmp10 == -0x15 {
			__tmp22 := _StructHT
			__tmp9 = __tmp22
		} else if __tmp10 == -0x16 {
			__tmp23 := _ArrayHT
			__tmp9 = __tmp23
		} else if __tmp10 == -0x17 {
			__tmp24 := _ExnHT
			__tmp9 = __tmp24
		} else if __ := __tmp10; true {
			_ = __
			__tmp27 := _error_3(_s, _pos, "malformed heap type")
			__tmp9 = __tmp27
		}
		return __tmp9
	}}, _s)
	return __tmp4
}

var _heap_type = _heap_type_1

func _ref_type_1(_s *Stream) struct {
	F0 ONull
	F1 OHeapType
} {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 struct {
		F0 ONull
		F1 OHeapType
	}
	__tmp5 := _s7_1(_s)
	if __tmp5 == -0x0c {
		__tmp8 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoExnHT}
		__tmp4 = __tmp8
	} else if __tmp5 == -0x0d {
		__tmp11 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoFuncHT}
		__tmp4 = __tmp11
	} else if __tmp5 == -0x0e {
		__tmp14 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoExternHT}
		__tmp4 = __tmp14
	} else if __tmp5 == -0x0f {
		__tmp17 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _NoneHT}
		__tmp4 = __tmp17
	} else if __tmp5 == -0x10 {
		__tmp20 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _FuncHT}
		__tmp4 = __tmp20
	} else if __tmp5 == -0x11 {
		__tmp23 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ExternHT}
		__tmp4 = __tmp23
	} else if __tmp5 == -0x12 {
		__tmp26 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _AnyHT}
		__tmp4 = __tmp26
	} else if __tmp5 == -0x13 {
		__tmp29 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _EqHT}
		__tmp4 = __tmp29
	} else if __tmp5 == -0x14 {
		__tmp32 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _I31HT}
		__tmp4 = __tmp32
	} else if __tmp5 == -0x15 {
		__tmp35 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _StructHT}
		__tmp4 = __tmp35
	} else if __tmp5 == -0x16 {
		__tmp38 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ArrayHT}
		__tmp4 = __tmp38
	} else if __tmp5 == -0x17 {
		__tmp41 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _ExnHT}
		__tmp4 = __tmp41
	} else if __tmp5 == -0x1c {
		__tmp44 := struct {
			F0 ONull
			F1 OHeapType
		}{_NoNull, _heap_type_1(_s)}
		__tmp4 = __tmp44
	} else if __tmp5 == -0x1d {
		__tmp48 := struct {
			F0 ONull
			F1 OHeapType
		}{_Null, _heap_type_1(_s)}
		__tmp4 = __tmp48
	} else if __ := __tmp5; true {
		_ = __
		__tmp54 := _error_3(_s, _pos, "malformed reference type")
		__tmp4 = __tmp54
	}
	return __tmp4
}

var _ref_type = _ref_type_1

func _val_type_1(_s *Stream) OValType {
	__tmp1 := _either_2([]func(*Stream) OValType{func(_s *Stream) OValType {
		__tmp2 := _NumT_1(_num_type_1(_s))
		return __tmp2
	}, func(_s *Stream) OValType {
		__tmp5 := _VecT_1(_vec_type_1(_s))
		return __tmp5
	}, func(_s *Stream) OValType {
		__tmp8 := _RefT_1(_ref_type_1(_s))
		return __tmp8
	}}, _s)
	return __tmp1
}

var _val_type = _val_type_1

func _result_type_1(_s *Stream) []OValType {
	__tmp1 := _vec_2(_val_type, _s)
	return __tmp1
}

var _result_type = _result_type_1

func _pack_type_1(_s *Stream) OPack.packSize {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 OPack.packSize
	__tmp5 := _s7_1(_s)
	if __tmp5 == -0x08 {
		__tmp8 := _Pack_Pack8
		__tmp4 = __tmp8
	} else if __tmp5 == -0x09 {
		__tmp9 := _Pack_Pack16
		__tmp4 = __tmp9
	} else if __ := __tmp5; true {
		_ = __
		__tmp12 := _error_3(_s, _pos, "malformed storage type")
		__tmp4 = __tmp12
	}
	return __tmp4
}

var _pack_type = _pack_type_1

func _storage_type_1(_s *Stream) OStorageType {
	__tmp1 := _either_2([]func(*Stream) OStorageType{func(_s *Stream) OStorageType {
		__tmp2 := _ValStorageT_1(_val_type_1(_s))
		return __tmp2
	}, func(_s *Stream) OStorageType {
		__tmp5 := _PackStorageT_1(_pack_type_1(_s))
		return __tmp5
	}}, _s)
	return __tmp1
}

var _storage_type = _storage_type_1

func _field_type_1(_s *Stream) OFieldType {
	__tmp1 := _storage_type_1(_s)
	_t := __tmp1
	__tmp4 := _mutability_1(_s)
	_mut := __tmp4
	__tmp7 := _FieldT_1(struct {
		F0 OMut
		F1 OStorageType
	}{_mut, _t})
	return __tmp7
}

var _field_type = _field_type_1

func _struct_type_1(_s *Stream) OStructType {
	__tmp1 := _StructT_1(_vec_2(_field_type, _s))
	return __tmp1
}

var _struct_type = _struct_type_1

func _array_type_1(_s *Stream) OArrayType {
	__tmp1 := _ArrayT_1(_field_type_1(_s))
	return __tmp1
}

var _array_type = _array_type_1

func _func_type_1(_s *Stream) OFuncType {
	__tmp1 := _result_type_1(_s)
	_ts1 := __tmp1
	__tmp4 := _result_type_1(_s)
	_ts2 := __tmp4
	__tmp7 := _FuncT_1(struct {
		F0 OResultType
		F1 OResultType
	}{_ts1, _ts2})
	return __tmp7
}

var _func_type = _func_type_1

func _str_type_1(_s *Stream) OStrType {
	var __tmp1 OStrType
	__tmp2 := _s7_1(_s)
	if __tmp2 == -0x20 {
		__tmp5 := _DefFuncT_1(_func_type_1(_s))
		__tmp1 = __tmp5
	} else if __tmp2 == -0x21 {
		__tmp8 := _DefStructT_1(_struct_type_1(_s))
		__tmp1 = __tmp8
	} else if __tmp2 == -0x22 {
		__tmp11 := _DefArrayT_1(_array_type_1(_s))
		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp16 := _error_3(_s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed definition type")
		__tmp1 = __tmp16
	}
	return __tmp1
}

var _str_type = _str_type_1

func _sub_type_1(_s *Stream) OSubType {
	var __tmp1 OSubType
	__tmp2 := _peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x30), 0x7f))) {
		__tmp9 := _skip_2(1, _s)
		_ = __tmp9
		__tmp11 := _vec_2(_var_type_1(_u32), _s)
		_xs := __tmp11
		__tmp16 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_NoFinal, _List_map_2(func(_x OVar) OHeapType {
			__tmp20 := _VarHT_1(_x)
			return __tmp20
		}, _xs), _str_type_1(_s)})

		__tmp1 = __tmp16
	} else if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x31), 0x7f))) {
		__tmp29 := _skip_2(1, _s)
		_ = __tmp29
		__tmp31 := _vec_2(_var_type_1(_u32), _s)
		_xs := __tmp31
		__tmp36 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_Final, _List_map_2(func(_x OVar) OHeapType {
			__tmp40 := _VarHT_1(_x)
			return __tmp40
		}, _xs), _str_type_1(_s)})

		__tmp1 = __tmp36
	} else if __ := __tmp2; true {
		_ = __
		__tmp47 := _SubT_1(struct {
			F0 OFinal
			F1 []OHeapType
			F2 OStrType
		}{_Final, []OHeapType{}, _str_type_1(_s)})
		__tmp1 = __tmp47
	}
	return __tmp1
}

var _sub_type = _sub_type_1

func _rec_type_1(_s *Stream) ORecType {
	var __tmp1 ORecType
	__tmp2 := _peek_1(_s)
	if _i := __derefIfNotNil(__tmp2); __tmp2 != nil && (_operatorEq_2(_i, _int_operatorland_2(-(0x32), 0x7f))) {
		__tmp9 := _skip_2(1, _s)
		_ = __tmp9
		__tmp11 := _RecT_1(_vec_2(_sub_type, _s))

		__tmp1 = __tmp11
	} else if __ := __tmp2; true {
		_ = __
		__tmp17 := _RecT_1([]OSubType{_sub_type_1(_s)})
		__tmp1 = __tmp17
	}
	return __tmp1
}

var _rec_type = _rec_type_1

func _limits_2(_uN func(*Stream) OInt64, _s *Stream) struct {
	F0 OAddrType
	F1 OLimits
} {
	__tmp1 := _byte_1(_s)
	_flags := __tmp1
	__tmp4 := _require_4(_operatorEq_2(_int_operatorland_2(_flags, 0xfa), 0), _s, _int_operatorMinus_2(_pos_1(_s), 1), "malformed limits flags")
	_ = __tmp4
	__tmp12 := _operatorEq_2(_int_operatorland_2(_flags, 1), 1)
	_has_max := __tmp12
	var __tmp16 OAddrType
	if _operatorEq_2(_int_operatorland_2(_flags, 4), 4) {
		__tmp20 := _I64AT
		__tmp16 = __tmp20
	} else {
		__tmp21 := _I32AT
		__tmp16 = __tmp21
	}
	_at := __tmp16
	__tmp23 := _uN_1(_s)
	_min := __tmp23
	__tmp26 := _opt_3(_uN, _has_max, _s)
	_max := __tmp26
	return struct {
		F0 OAddrType
		F1 OLimits
	}{_at, nil /* TODO: record_expression */}

}

var _limits = _limits_2

func _table_type_1(_s *Stream) OTableType {
	__tmp1 := _ref_type_1(_s)
	_t := __tmp1
	__tmp4 := _limits_2(_u64, _s)
	_at, _lim := __tmp4
	__tmp9 := _TableT_1(struct {
		F0 OAddrType
		F1 OLimits
		F2 ORefType
	}{_at, _lim, _t})
	return __tmp9
}

var _table_type = _table_type_1

func _global_type_1(_s *Stream) OGlobalType {
	__tmp1 := _val_type_1(_s)
	_t := __tmp1
	__tmp4 := _mutability_1(_s)
	_mut := __tmp4
	__tmp7 := _GlobalT_1(struct {
		F0 OMut
		F1 OValType
	}{_mut, _t})
	return __tmp7
}

var _global_type = _global_type_1

func _tag_type_1(_s *Stream) *Phrase[OLocalIdx] {
	__tmp1 := _zero_1(_s)
	_ = __tmp1
	__tmp3 := _at_2(_var, _s)
	return __tmp3

}

var _tag_type = _tag_type_1

func _op_1(_s *Stream) OInt {
	__tmp1 := _byte_1(_s)
	return __tmp1
}

var _op = _op_1

func _end__1(_s *Stream) OUnit {
	__tmp1 := _expect_3(0x0b, _s, "END opcode expected")
	return __tmp1
}

var _end_ = _end__1

func _memop_1(_s *Stream) struct {
	F0 *Phrase[OLocalIdx]
	F1 OInt
	F2 OInt64
} {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	__tmp4 := _u32_1(_s)
	_flags := __tmp4
	__tmp7 := _require_4(_I32_lt_u_2(_flags, 0x80), _s, _pos, "malformed memop flags")
	_ = __tmp7
	__tmp12 := _operatorNotEq_2(_Int32_logand_2(_flags, 0x40), 0)
	_has_var := __tmp12
	var __tmp16 *Phrase[OLocalIdx]
	if _has_var {
		__tmp18 := _at_2(_var, _s)
		__tmp16 = __tmp18
	} else {
		__tmp21 := _operatorAtAt_2(0, _no_region)
		__tmp16 = __tmp21
	}
	_x := __tmp16
	__tmp24 := _Int32_to_int_1(_Int32_logand_2(_flags, 0x3f))
	_align := __tmp24
	__tmp28 := _u64_1(_s)
	_offset := __tmp28
	return struct {
		F0 *Phrase[OLocalIdx]
		F1 OInt
		F2 OInt64
	}{_x, _align, _offset}

}

var _memop = _memop_1

func _block_type_1(_s *Stream) OBlockType {
	__tmp1 := _either_2([]func(*Stream) OBlockType{func(_s *Stream) OBlockType {
		__tmp2 := _VarBlockType_1(_at_2(func(_s *Stream) OLocalIdx {
			__tmp4 := _as_stat_var_1(_var_type_2(_s33, _s))
			return __tmp4
		}, _s))
		return __tmp2
	}, func(_s *Stream) OBlockType {
		__tmp9 := _expect_3(0x40, _s, "")
		_ = __tmp9
		__tmp11 := _ValBlockType_1(_None)
		return __tmp11

	}, func(_s *Stream) OBlockType {
		__tmp13 := _ValBlockType_1(_Some_1(_val_type_1(_s)))
		return __tmp13
	}}, _s)
	return __tmp1
}

var _block_type = _block_type_1

func _local_1(_s *Stream) struct {
	F0 OLocalIdx
	F1 *Phrase[Local_]
} {
	__tmp1 := _u32_1(_s)
	_n := __tmp1
	__tmp4 := _at_2(_val_type, _s)
	_t := __tmp4
	return struct {
		F0 OLocalIdx
		F1 *Phrase[Local_]
	}{_n, _operatorAtAt_2(nil /* TODO: record_expression */, nil /* TODO: field_get_expression */)}
}

var _local = _local_1

func _instr_1(_s *Stream) Instruction_ {
	__tmp1 := _pos_1(_s)
	_pos := __tmp1
	var __tmp4 Instruction_
	__tmp5 := _op_1(_s)
	if __tmp5 == 0x00 {
		__tmp8 := _unreachable
		__tmp4 = __tmp8
	} else if __tmp5 == 0x01 {
		__tmp9 := _nop
		__tmp4 = __tmp9
	} else if __tmp5 == 0x02 {
		__tmp10 := _block_type_1(_s)
		_bt := __tmp10
		__tmp13 := _instr_block_1(_s)
		_es_ := __tmp13
		__tmp16 := _end__1(_s)
		_ = __tmp16
		__tmp18 := _block_2(_bt, _es_)

		__tmp4 = __tmp18
	} else if __tmp5 == 0x03 {
		__tmp21 := _block_type_1(_s)
		_bt := __tmp21
		__tmp24 := _instr_block_1(_s)
		_es_ := __tmp24
		__tmp27 := _end__1(_s)
		_ = __tmp27
		__tmp29 := _loop_2(_bt, _es_)

		__tmp4 = __tmp29
	} else if __tmp5 == 0x04 {
		__tmp32 := _block_type_1(_s)
		_bt := __tmp32
		__tmp35 := _instr_block_1(_s)
		_es1 := __tmp35
		var __tmp38 Instruction_
		if _operatorEq_2(_peek_1(_s), _Some_1(0x05)) {
			__tmp43 := _expect_3(0x05, _s, "ELSE or END opcode expected")
			_ = __tmp43
			__tmp45 := _instr_block_1(_s)
			_es2 := __tmp45
			__tmp48 := _end__1(_s)
			_ = __tmp48
			__tmp50 := _if__3(_bt, _es1, _es2)

			__tmp38 = __tmp50
		} else {
			__tmp54 := _end__1(_s)
			_ = __tmp54
			__tmp56 := _if__3(_bt, _es1, []*Phrase[Instruction_]{})

			__tmp38 = __tmp56
		}
		__tmp4 = __tmp38
	} else if __tmp5 == 0x05 {
		__tmp59 := _error_3(_s, _pos, "misplaced ELSE opcode")
		__tmp4 = __tmp59
	} else if __tmp5 == 0x06 || __tmp5 == 0x07 {
		_b := __tmp5
		__tmp63 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp63
	} else if __tmp5 == 0x08 {
		__tmp67 := _throw_1(_at_2(_var, _s))
		__tmp4 = __tmp67
	} else if __tmp5 == 0x09 {
		_b := __tmp5
		__tmp72 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp72
	} else if __tmp5 == 0x0a {
		__tmp76 := _throw_ref
		__tmp4 = __tmp76
	} else if __tmp5 == 0x0b {
		__tmp77 := _error_3(_s, _pos, "misplaced END opcode")
		__tmp4 = __tmp77
	} else if __tmp5 == 0x0c {
		__tmp80 := _br_1(_at_2(_var, _s))
		__tmp4 = __tmp80
	} else if __tmp5 == 0x0d {
		__tmp84 := _br_if_1(_at_2(_var, _s))
		__tmp4 = __tmp84
	} else if __tmp5 == 0x0e {
		__tmp88 := _vec_2(_at_1(_var), _s)
		_xs := __tmp88
		__tmp93 := _at_2(_var, _s)
		_x := __tmp93
		__tmp97 := _br_table_2(_xs, _x)
		__tmp4 = __tmp97
	} else if __tmp5 == 0x0f {
		__tmp100 := _return
		__tmp4 = __tmp100
	} else if __tmp5 == 0x10 {
		__tmp101 := _call_1(_at_2(_var, _s))
		__tmp4 = __tmp101
	} else if __tmp5 == 0x11 {
		__tmp105 := _at_2(_var, _s)
		_y := __tmp105
		__tmp109 := _at_2(_var, _s)
		_x := __tmp109
		__tmp113 := _call_indirect_2(_x, _y)
		__tmp4 = __tmp113
	} else if __tmp5 == 0x12 {
		__tmp116 := _return_call_1(_at_2(_var, _s))
		__tmp4 = __tmp116
	} else if __tmp5 == 0x13 {
		__tmp120 := _at_2(_var, _s)
		_y := __tmp120
		__tmp124 := _at_2(_var, _s)
		_x := __tmp124
		__tmp128 := _return_call_indirect_2(_x, _y)
		__tmp4 = __tmp128
	} else if __tmp5 == 0x14 {
		__tmp131 := _call_ref_1(_at_2(_var, _s))
		__tmp4 = __tmp131
	} else if __tmp5 == 0x15 {
		__tmp135 := _return_call_ref_1(_at_2(_var, _s))
		__tmp4 = __tmp135
	} else if __tmp5 == 0x16 || __tmp5 == 0x17 || __tmp5 == 0x18 || __tmp5 == 0x19 {
		_b := __tmp5
		__tmp140 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp140
	} else if __tmp5 == 0x1a {
		__tmp144 := _drop
		__tmp4 = __tmp144
	} else if __tmp5 == 0x1b {
		__tmp145 := _select_1(_None)
		__tmp4 = __tmp145
	} else if __tmp5 == 0x1c {
		__tmp147 := _select_1(_Some_1(_vec_2(_val_type, _s)))
		__tmp4 = __tmp147
	} else if __tmp5 == 0x1d || __tmp5 == 0x1e {
		_b := __tmp5
		__tmp153 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp153
	} else if __tmp5 == 0x1f {
		__tmp157 := _block_type_1(_s)
		_bt := __tmp157
		__tmp160 := _vec_2(_at_1(_catch), _s)
		_cs := __tmp160
		__tmp165 := _instr_block_1(_s)
		_es := __tmp165
		__tmp168 := _end__1(_s)
		_ = __tmp168
		__tmp170 := _try_table_3(_bt, _cs, _es)

		__tmp4 = __tmp170
	} else if __tmp5 == 0x20 {
		__tmp174 := _local_get_1(_at_2(_var, _s))
		__tmp4 = __tmp174
	} else if __tmp5 == 0x21 {
		__tmp178 := _local_set_1(_at_2(_var, _s))
		__tmp4 = __tmp178
	} else if __tmp5 == 0x22 {
		__tmp182 := _local_tee_1(_at_2(_var, _s))
		__tmp4 = __tmp182
	} else if __tmp5 == 0x23 {
		__tmp186 := _global_get_1(_at_2(_var, _s))
		__tmp4 = __tmp186
	} else if __tmp5 == 0x24 {
		__tmp190 := _global_set_1(_at_2(_var, _s))
		__tmp4 = __tmp190
	} else if __tmp5 == 0x25 {
		__tmp194 := _table_get_1(_at_2(_var, _s))
		__tmp4 = __tmp194
	} else if __tmp5 == 0x26 {
		__tmp198 := _table_set_1(_at_2(_var, _s))
		__tmp4 = __tmp198
	} else if __tmp5 == 0x27 {
		_b := __tmp5
		__tmp203 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp203
	} else if __tmp5 == 0x28 {
		__tmp207 := _memop_1(_s)
		_x, _a, _o := __tmp207
		__tmp212 := _i32_load_3(_x, _a, _o)
		__tmp4 = __tmp212
	} else if __tmp5 == 0x29 {
		__tmp216 := _memop_1(_s)
		_x, _a, _o := __tmp216
		__tmp221 := _i64_load_3(_x, _a, _o)
		__tmp4 = __tmp221
	} else if __tmp5 == 0x2a {
		__tmp225 := _memop_1(_s)
		_x, _a, _o := __tmp225
		__tmp230 := _f32_load_3(_x, _a, _o)
		__tmp4 = __tmp230
	} else if __tmp5 == 0x2b {
		__tmp234 := _memop_1(_s)
		_x, _a, _o := __tmp234
		__tmp239 := _f64_load_3(_x, _a, _o)
		__tmp4 = __tmp239
	} else if __tmp5 == 0x2c {
		__tmp243 := _memop_1(_s)
		_x, _a, _o := __tmp243
		__tmp248 := _i32_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp248
	} else if __tmp5 == 0x2d {
		__tmp252 := _memop_1(_s)
		_x, _a, _o := __tmp252
		__tmp257 := _i32_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp257
	} else if __tmp5 == 0x2e {
		__tmp261 := _memop_1(_s)
		_x, _a, _o := __tmp261
		__tmp266 := _i32_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp266
	} else if __tmp5 == 0x2f {
		__tmp270 := _memop_1(_s)
		_x, _a, _o := __tmp270
		__tmp275 := _i32_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp275
	} else if __tmp5 == 0x30 {
		__tmp279 := _memop_1(_s)
		_x, _a, _o := __tmp279
		__tmp284 := _i64_load8_s_3(_x, _a, _o)
		__tmp4 = __tmp284
	} else if __tmp5 == 0x31 {
		__tmp288 := _memop_1(_s)
		_x, _a, _o := __tmp288
		__tmp293 := _i64_load8_u_3(_x, _a, _o)
		__tmp4 = __tmp293
	} else if __tmp5 == 0x32 {
		__tmp297 := _memop_1(_s)
		_x, _a, _o := __tmp297
		__tmp302 := _i64_load16_s_3(_x, _a, _o)
		__tmp4 = __tmp302
	} else if __tmp5 == 0x33 {
		__tmp306 := _memop_1(_s)
		_x, _a, _o := __tmp306
		__tmp311 := _i64_load16_u_3(_x, _a, _o)
		__tmp4 = __tmp311
	} else if __tmp5 == 0x34 {
		__tmp315 := _memop_1(_s)
		_x, _a, _o := __tmp315
		__tmp320 := _i64_load32_s_3(_x, _a, _o)
		__tmp4 = __tmp320
	} else if __tmp5 == 0x35 {
		__tmp324 := _memop_1(_s)
		_x, _a, _o := __tmp324
		__tmp329 := _i64_load32_u_3(_x, _a, _o)
		__tmp4 = __tmp329
	} else if __tmp5 == 0x36 {
		__tmp333 := _memop_1(_s)
		_x, _a, _o := __tmp333
		__tmp338 := _i32_store_3(_x, _a, _o)
		__tmp4 = __tmp338
	} else if __tmp5 == 0x37 {
		__tmp342 := _memop_1(_s)
		_x, _a, _o := __tmp342
		__tmp347 := _i64_store_3(_x, _a, _o)
		__tmp4 = __tmp347
	} else if __tmp5 == 0x38 {
		__tmp351 := _memop_1(_s)
		_x, _a, _o := __tmp351
		__tmp356 := _f32_store_3(_x, _a, _o)
		__tmp4 = __tmp356
	} else if __tmp5 == 0x39 {
		__tmp360 := _memop_1(_s)
		_x, _a, _o := __tmp360
		__tmp365 := _f64_store_3(_x, _a, _o)
		__tmp4 = __tmp365
	} else if __tmp5 == 0x3a {
		__tmp369 := _memop_1(_s)
		_x, _a, _o := __tmp369
		__tmp374 := _i32_store8_3(_x, _a, _o)
		__tmp4 = __tmp374
	} else if __tmp5 == 0x3b {
		__tmp378 := _memop_1(_s)
		_x, _a, _o := __tmp378
		__tmp383 := _i32_store16_3(_x, _a, _o)
		__tmp4 = __tmp383
	} else if __tmp5 == 0x3c {
		__tmp387 := _memop_1(_s)
		_x, _a, _o := __tmp387
		__tmp392 := _i64_store8_3(_x, _a, _o)
		__tmp4 = __tmp392
	} else if __tmp5 == 0x3d {
		__tmp396 := _memop_1(_s)
		_x, _a, _o := __tmp396
		__tmp401 := _i64_store16_3(_x, _a, _o)
		__tmp4 = __tmp401
	} else if __tmp5 == 0x3e {
		__tmp405 := _memop_1(_s)
		_x, _a, _o := __tmp405
		__tmp410 := _i64_store32_3(_x, _a, _o)
		__tmp4 = __tmp410
	} else if __tmp5 == 0x3f {
		__tmp414 := _memory_size_1(_at_2(_var, _s))
		__tmp4 = __tmp414
	} else if __tmp5 == 0x40 {
		__tmp418 := _memory_grow_1(_at_2(_var, _s))
		__tmp4 = __tmp418
	} else if __tmp5 == 0x41 {
		__tmp422 := _i32_const_1(_at_2(_s32, _s))
		__tmp4 = __tmp422
	} else if __tmp5 == 0x42 {
		__tmp426 := _i64_const_1(_at_2(_s64, _s))
		__tmp4 = __tmp426
	} else if __tmp5 == 0x43 {
		__tmp430 := _f32_const_1(_at_2(_f32, _s))
		__tmp4 = __tmp430
	} else if __tmp5 == 0x44 {
		__tmp434 := _f64_const_1(_at_2(_f64, _s))
		__tmp4 = __tmp434
	} else if __tmp5 == 0x45 {
		__tmp438 := _i32_eqz
		__tmp4 = __tmp438
	} else if __tmp5 == 0x46 {
		__tmp439 := _i32_eq
		__tmp4 = __tmp439
	} else if __tmp5 == 0x47 {
		__tmp440 := _i32_ne
		__tmp4 = __tmp440
	} else if __tmp5 == 0x48 {
		__tmp441 := _i32_lt_s
		__tmp4 = __tmp441
	} else if __tmp5 == 0x49 {
		__tmp442 := _i32_lt_u
		__tmp4 = __tmp442
	} else if __tmp5 == 0x4a {
		__tmp443 := _i32_gt_s
		__tmp4 = __tmp443
	} else if __tmp5 == 0x4b {
		__tmp444 := _i32_gt_u
		__tmp4 = __tmp444
	} else if __tmp5 == 0x4c {
		__tmp445 := _i32_le_s
		__tmp4 = __tmp445
	} else if __tmp5 == 0x4d {
		__tmp446 := _i32_le_u
		__tmp4 = __tmp446
	} else if __tmp5 == 0x4e {
		__tmp447 := _i32_ge_s
		__tmp4 = __tmp447
	} else if __tmp5 == 0x4f {
		__tmp448 := _i32_ge_u
		__tmp4 = __tmp448
	} else if __tmp5 == 0x50 {
		__tmp449 := _i64_eqz
		__tmp4 = __tmp449
	} else if __tmp5 == 0x51 {
		__tmp450 := _i64_eq
		__tmp4 = __tmp450
	} else if __tmp5 == 0x52 {
		__tmp451 := _i64_ne
		__tmp4 = __tmp451
	} else if __tmp5 == 0x53 {
		__tmp452 := _i64_lt_s
		__tmp4 = __tmp452
	} else if __tmp5 == 0x54 {
		__tmp453 := _i64_lt_u
		__tmp4 = __tmp453
	} else if __tmp5 == 0x55 {
		__tmp454 := _i64_gt_s
		__tmp4 = __tmp454
	} else if __tmp5 == 0x56 {
		__tmp455 := _i64_gt_u
		__tmp4 = __tmp455
	} else if __tmp5 == 0x57 {
		__tmp456 := _i64_le_s
		__tmp4 = __tmp456
	} else if __tmp5 == 0x58 {
		__tmp457 := _i64_le_u
		__tmp4 = __tmp457
	} else if __tmp5 == 0x59 {
		__tmp458 := _i64_ge_s
		__tmp4 = __tmp458
	} else if __tmp5 == 0x5a {
		__tmp459 := _i64_ge_u
		__tmp4 = __tmp459
	} else if __tmp5 == 0x5b {
		__tmp460 := _f32_eq
		__tmp4 = __tmp460
	} else if __tmp5 == 0x5c {
		__tmp461 := _f32_ne
		__tmp4 = __tmp461
	} else if __tmp5 == 0x5d {
		__tmp462 := _f32_lt
		__tmp4 = __tmp462
	} else if __tmp5 == 0x5e {
		__tmp463 := _f32_gt
		__tmp4 = __tmp463
	} else if __tmp5 == 0x5f {
		__tmp464 := _f32_le
		__tmp4 = __tmp464
	} else if __tmp5 == 0x60 {
		__tmp465 := _f32_ge
		__tmp4 = __tmp465
	} else if __tmp5 == 0x61 {
		__tmp466 := _f64_eq
		__tmp4 = __tmp466
	} else if __tmp5 == 0x62 {
		__tmp467 := _f64_ne
		__tmp4 = __tmp467
	} else if __tmp5 == 0x63 {
		__tmp468 := _f64_lt
		__tmp4 = __tmp468
	} else if __tmp5 == 0x64 {
		__tmp469 := _f64_gt
		__tmp4 = __tmp469
	} else if __tmp5 == 0x65 {
		__tmp470 := _f64_le
		__tmp4 = __tmp470
	} else if __tmp5 == 0x66 {
		__tmp471 := _f64_ge
		__tmp4 = __tmp471
	} else if __tmp5 == 0x67 {
		__tmp472 := _i32_clz
		__tmp4 = __tmp472
	} else if __tmp5 == 0x68 {
		__tmp473 := _i32_ctz
		__tmp4 = __tmp473
	} else if __tmp5 == 0x69 {
		__tmp474 := _i32_popcnt
		__tmp4 = __tmp474
	} else if __tmp5 == 0x6a {
		__tmp475 := _i32_add
		__tmp4 = __tmp475
	} else if __tmp5 == 0x6b {
		__tmp476 := _i32_sub
		__tmp4 = __tmp476
	} else if __tmp5 == 0x6c {
		__tmp477 := _i32_mul
		__tmp4 = __tmp477
	} else if __tmp5 == 0x6d {
		__tmp478 := _i32_div_s
		__tmp4 = __tmp478
	} else if __tmp5 == 0x6e {
		__tmp479 := _i32_div_u
		__tmp4 = __tmp479
	} else if __tmp5 == 0x6f {
		__tmp480 := _i32_rem_s
		__tmp4 = __tmp480
	} else if __tmp5 == 0x70 {
		__tmp481 := _i32_rem_u
		__tmp4 = __tmp481
	} else if __tmp5 == 0x71 {
		__tmp482 := _i32_and
		__tmp4 = __tmp482
	} else if __tmp5 == 0x72 {
		__tmp483 := _i32_or
		__tmp4 = __tmp483
	} else if __tmp5 == 0x73 {
		__tmp484 := _i32_xor
		__tmp4 = __tmp484
	} else if __tmp5 == 0x74 {
		__tmp485 := _i32_shl
		__tmp4 = __tmp485
	} else if __tmp5 == 0x75 {
		__tmp486 := _i32_shr_s
		__tmp4 = __tmp486
	} else if __tmp5 == 0x76 {
		__tmp487 := _i32_shr_u
		__tmp4 = __tmp487
	} else if __tmp5 == 0x77 {
		__tmp488 := _i32_rotl
		__tmp4 = __tmp488
	} else if __tmp5 == 0x78 {
		__tmp489 := _i32_rotr
		__tmp4 = __tmp489
	} else if __tmp5 == 0x79 {
		__tmp490 := _i64_clz
		__tmp4 = __tmp490
	} else if __tmp5 == 0x7a {
		__tmp491 := _i64_ctz
		__tmp4 = __tmp491
	} else if __tmp5 == 0x7b {
		__tmp492 := _i64_popcnt
		__tmp4 = __tmp492
	} else if __tmp5 == 0x7c {
		__tmp493 := _i64_add
		__tmp4 = __tmp493
	} else if __tmp5 == 0x7d {
		__tmp494 := _i64_sub
		__tmp4 = __tmp494
	} else if __tmp5 == 0x7e {
		__tmp495 := _i64_mul
		__tmp4 = __tmp495
	} else if __tmp5 == 0x7f {
		__tmp496 := _i64_div_s
		__tmp4 = __tmp496
	} else if __tmp5 == 0x80 {
		__tmp497 := _i64_div_u
		__tmp4 = __tmp497
	} else if __tmp5 == 0x81 {
		__tmp498 := _i64_rem_s
		__tmp4 = __tmp498
	} else if __tmp5 == 0x82 {
		__tmp499 := _i64_rem_u
		__tmp4 = __tmp499
	} else if __tmp5 == 0x83 {
		__tmp500 := _i64_and
		__tmp4 = __tmp500
	} else if __tmp5 == 0x84 {
		__tmp501 := _i64_or
		__tmp4 = __tmp501
	} else if __tmp5 == 0x85 {
		__tmp502 := _i64_xor
		__tmp4 = __tmp502
	} else if __tmp5 == 0x86 {
		__tmp503 := _i64_shl
		__tmp4 = __tmp503
	} else if __tmp5 == 0x87 {
		__tmp504 := _i64_shr_s
		__tmp4 = __tmp504
	} else if __tmp5 == 0x88 {
		__tmp505 := _i64_shr_u
		__tmp4 = __tmp505
	} else if __tmp5 == 0x89 {
		__tmp506 := _i64_rotl
		__tmp4 = __tmp506
	} else if __tmp5 == 0x8a {
		__tmp507 := _i64_rotr
		__tmp4 = __tmp507
	} else if __tmp5 == 0x8b {
		__tmp508 := _f32_abs
		__tmp4 = __tmp508
	} else if __tmp5 == 0x8c {
		__tmp509 := _f32_neg
		__tmp4 = __tmp509
	} else if __tmp5 == 0x8d {
		__tmp510 := _f32_ceil
		__tmp4 = __tmp510
	} else if __tmp5 == 0x8e {
		__tmp511 := _f32_floor
		__tmp4 = __tmp511
	} else if __tmp5 == 0x8f {
		__tmp512 := _f32_trunc
		__tmp4 = __tmp512
	} else if __tmp5 == 0x90 {
		__tmp513 := _f32_nearest
		__tmp4 = __tmp513
	} else if __tmp5 == 0x91 {
		__tmp514 := _f32_sqrt
		__tmp4 = __tmp514
	} else if __tmp5 == 0x92 {
		__tmp515 := _f32_add
		__tmp4 = __tmp515
	} else if __tmp5 == 0x93 {
		__tmp516 := _f32_sub
		__tmp4 = __tmp516
	} else if __tmp5 == 0x94 {
		__tmp517 := _f32_mul
		__tmp4 = __tmp517
	} else if __tmp5 == 0x95 {
		__tmp518 := _f32_div
		__tmp4 = __tmp518
	} else if __tmp5 == 0x96 {
		__tmp519 := _f32_min
		__tmp4 = __tmp519
	} else if __tmp5 == 0x97 {
		__tmp520 := _f32_max
		__tmp4 = __tmp520
	} else if __tmp5 == 0x98 {
		__tmp521 := _f32_copysign
		__tmp4 = __tmp521
	} else if __tmp5 == 0x99 {
		__tmp522 := _f64_abs
		__tmp4 = __tmp522
	} else if __tmp5 == 0x9a {
		__tmp523 := _f64_neg
		__tmp4 = __tmp523
	} else if __tmp5 == 0x9b {
		__tmp524 := _f64_ceil
		__tmp4 = __tmp524
	} else if __tmp5 == 0x9c {
		__tmp525 := _f64_floor
		__tmp4 = __tmp525
	} else if __tmp5 == 0x9d {
		__tmp526 := _f64_trunc
		__tmp4 = __tmp526
	} else if __tmp5 == 0x9e {
		__tmp527 := _f64_nearest
		__tmp4 = __tmp527
	} else if __tmp5 == 0x9f {
		__tmp528 := _f64_sqrt
		__tmp4 = __tmp528
	} else if __tmp5 == 0xa0 {
		__tmp529 := _f64_add
		__tmp4 = __tmp529
	} else if __tmp5 == 0xa1 {
		__tmp530 := _f64_sub
		__tmp4 = __tmp530
	} else if __tmp5 == 0xa2 {
		__tmp531 := _f64_mul
		__tmp4 = __tmp531
	} else if __tmp5 == 0xa3 {
		__tmp532 := _f64_div
		__tmp4 = __tmp532
	} else if __tmp5 == 0xa4 {
		__tmp533 := _f64_min
		__tmp4 = __tmp533
	} else if __tmp5 == 0xa5 {
		__tmp534 := _f64_max
		__tmp4 = __tmp534
	} else if __tmp5 == 0xa6 {
		__tmp535 := _f64_copysign
		__tmp4 = __tmp535
	} else if __tmp5 == 0xa7 {
		__tmp536 := _i32_wrap_i64
		__tmp4 = __tmp536
	} else if __tmp5 == 0xa8 {
		__tmp537 := _i32_trunc_f32_s
		__tmp4 = __tmp537
	} else if __tmp5 == 0xa9 {
		__tmp538 := _i32_trunc_f32_u
		__tmp4 = __tmp538
	} else if __tmp5 == 0xaa {
		__tmp539 := _i32_trunc_f64_s
		__tmp4 = __tmp539
	} else if __tmp5 == 0xab {
		__tmp540 := _i32_trunc_f64_u
		__tmp4 = __tmp540
	} else if __tmp5 == 0xac {
		__tmp541 := _i64_extend_i32_s
		__tmp4 = __tmp541
	} else if __tmp5 == 0xad {
		__tmp542 := _i64_extend_i32_u
		__tmp4 = __tmp542
	} else if __tmp5 == 0xae {
		__tmp543 := _i64_trunc_f32_s
		__tmp4 = __tmp543
	} else if __tmp5 == 0xaf {
		__tmp544 := _i64_trunc_f32_u
		__tmp4 = __tmp544
	} else if __tmp5 == 0xb0 {
		__tmp545 := _i64_trunc_f64_s
		__tmp4 = __tmp545
	} else if __tmp5 == 0xb1 {
		__tmp546 := _i64_trunc_f64_u
		__tmp4 = __tmp546
	} else if __tmp5 == 0xb2 {
		__tmp547 := _f32_convert_i32_s
		__tmp4 = __tmp547
	} else if __tmp5 == 0xb3 {
		__tmp548 := _f32_convert_i32_u
		__tmp4 = __tmp548
	} else if __tmp5 == 0xb4 {
		__tmp549 := _f32_convert_i64_s
		__tmp4 = __tmp549
	} else if __tmp5 == 0xb5 {
		__tmp550 := _f32_convert_i64_u
		__tmp4 = __tmp550
	} else if __tmp5 == 0xb6 {
		__tmp551 := _f32_demote_f64
		__tmp4 = __tmp551
	} else if __tmp5 == 0xb7 {
		__tmp552 := _f64_convert_i32_s
		__tmp4 = __tmp552
	} else if __tmp5 == 0xb8 {
		__tmp553 := _f64_convert_i32_u
		__tmp4 = __tmp553
	} else if __tmp5 == 0xb9 {
		__tmp554 := _f64_convert_i64_s
		__tmp4 = __tmp554
	} else if __tmp5 == 0xba {
		__tmp555 := _f64_convert_i64_u
		__tmp4 = __tmp555
	} else if __tmp5 == 0xbb {
		__tmp556 := _f64_promote_f32
		__tmp4 = __tmp556
	} else if __tmp5 == 0xbc {
		__tmp557 := _i32_reinterpret_f32
		__tmp4 = __tmp557
	} else if __tmp5 == 0xbd {
		__tmp558 := _i64_reinterpret_f64
		__tmp4 = __tmp558
	} else if __tmp5 == 0xbe {
		__tmp559 := _f32_reinterpret_i32
		__tmp4 = __tmp559
	} else if __tmp5 == 0xbf {
		__tmp560 := _f64_reinterpret_i64
		__tmp4 = __tmp560
	} else if __tmp5 == 0xc0 {
		__tmp561 := _i32_extend8_s
		__tmp4 = __tmp561
	} else if __tmp5 == 0xc1 {
		__tmp562 := _i32_extend16_s
		__tmp4 = __tmp562
	} else if __tmp5 == 0xc2 {
		__tmp563 := _i64_extend8_s
		__tmp4 = __tmp563
	} else if __tmp5 == 0xc3 {
		__tmp564 := _i64_extend16_s
		__tmp4 = __tmp564
	} else if __tmp5 == 0xc4 {
		__tmp565 := _i64_extend32_s
		__tmp4 = __tmp565
	} else if __tmp5 == 0xc5 || __tmp5 == 0xc6 || __tmp5 == 0xc7 || __tmp5 == 0xc8 || __tmp5 == 0xc9 || __tmp5 == 0xca || __tmp5 == 0xcb || __tmp5 == 0xcc || __tmp5 == 0xcd || __tmp5 == 0xce || __tmp5 == 0xcf {
		_b := __tmp5
		__tmp567 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp567
	} else if __tmp5 == 0xd0 {
		__tmp571 := _ref_null_1(_heap_type_1(_s))
		__tmp4 = __tmp571
	} else if __tmp5 == 0xd1 {
		__tmp574 := _ref_is_null
		__tmp4 = __tmp574
	} else if __tmp5 == 0xd2 {
		__tmp575 := _ref_func_1(_at_2(_var, _s))
		__tmp4 = __tmp575
	} else if __tmp5 == 0xd3 {
		__tmp579 := _ref_eq
		__tmp4 = __tmp579
	} else if __tmp5 == 0xd4 {
		__tmp580 := _ref_as_non_null
		__tmp4 = __tmp580
	} else if __tmp5 == 0xd5 {
		__tmp581 := _br_on_null_1(_at_2(_var, _s))
		__tmp4 = __tmp581
	} else if __tmp5 == 0xd6 {
		__tmp585 := _br_on_non_null_1(_at_2(_var, _s))
		__tmp4 = __tmp585
	} else if __tmp5 == 0xfb {
		_b := __tmp5
		var __tmp590 Instruction_
		__tmp591 := _u32_1(_s)
		if __tmp591 == 0x00 {
			__tmp594 := _struct_new_1(_at_2(_var, _s))
			__tmp590 = __tmp594
		} else if __tmp591 == 0x01 {
			__tmp598 := _struct_new_default_1(_at_2(_var, _s))
			__tmp590 = __tmp598
		} else if __tmp591 == 0x02 {
			__tmp602 := _at_2(_var, _s)
			_x := __tmp602
			__tmp606 := _at_2(_var, _s)
			_y := __tmp606
			__tmp610 := _struct_get_2(_x, _y)
			__tmp590 = __tmp610
		} else if __tmp591 == 0x03 {
			__tmp613 := _at_2(_var, _s)
			_x := __tmp613
			__tmp617 := _at_2(_var, _s)
			_y := __tmp617
			__tmp621 := _struct_get_s_2(_x, _y)
			__tmp590 = __tmp621
		} else if __tmp591 == 0x04 {
			__tmp624 := _at_2(_var, _s)
			_x := __tmp624
			__tmp628 := _at_2(_var, _s)
			_y := __tmp628
			__tmp632 := _struct_get_u_2(_x, _y)
			__tmp590 = __tmp632
		} else if __tmp591 == 0x05 {
			__tmp635 := _at_2(_var, _s)
			_x := __tmp635
			__tmp639 := _at_2(_var, _s)
			_y := __tmp639
			__tmp643 := _struct_set_2(_x, _y)
			__tmp590 = __tmp643
		} else if __tmp591 == 0x06 {
			__tmp646 := _array_new_1(_at_2(_var, _s))
			__tmp590 = __tmp646
		} else if __tmp591 == 0x07 {
			__tmp650 := _array_new_default_1(_at_2(_var, _s))
			__tmp590 = __tmp650
		} else if __tmp591 == 0x08 {
			__tmp654 := _at_2(_var, _s)
			_x := __tmp654
			__tmp658 := _u32_1(_s)
			_n := __tmp658
			__tmp661 := _array_new_fixed_2(_x, _n)
			__tmp590 = __tmp661
		} else if __tmp591 == 0x09 {
			__tmp664 := _at_2(_var, _s)
			_x := __tmp664
			__tmp668 := _at_2(_var, _s)
			_y := __tmp668
			__tmp672 := _array_new_data_2(_x, _y)
			__tmp590 = __tmp672
		} else if __tmp591 == 0x0a {
			__tmp675 := _at_2(_var, _s)
			_x := __tmp675
			__tmp679 := _at_2(_var, _s)
			_y := __tmp679
			__tmp683 := _array_new_elem_2(_x, _y)
			__tmp590 = __tmp683
		} else if __tmp591 == 0x0b {
			__tmp686 := _array_get_1(_at_2(_var, _s))
			__tmp590 = __tmp686
		} else if __tmp591 == 0x0c {
			__tmp690 := _array_get_s_1(_at_2(_var, _s))
			__tmp590 = __tmp690
		} else if __tmp591 == 0x0d {
			__tmp694 := _array_get_u_1(_at_2(_var, _s))
			__tmp590 = __tmp694
		} else if __tmp591 == 0x0e {
			__tmp698 := _array_set_1(_at_2(_var, _s))
			__tmp590 = __tmp698
		} else if __tmp591 == 0x0f {
			__tmp702 := _array_len
			__tmp590 = __tmp702
		} else if __tmp591 == 0x10 {
			__tmp703 := _array_fill_1(_at_2(_var, _s))
			__tmp590 = __tmp703
		} else if __tmp591 == 0x11 {
			__tmp707 := _at_2(_var, _s)
			_x := __tmp707
			__tmp711 := _at_2(_var, _s)
			_y := __tmp711
			__tmp715 := _array_copy_2(_x, _y)
			__tmp590 = __tmp715
		} else if __tmp591 == 0x12 {
			__tmp718 := _at_2(_var, _s)
			_x := __tmp718
			__tmp722 := _at_2(_var, _s)
			_y := __tmp722
			__tmp726 := _array_init_data_2(_x, _y)
			__tmp590 = __tmp726
		} else if __tmp591 == 0x13 {
			__tmp729 := _at_2(_var, _s)
			_x := __tmp729
			__tmp733 := _at_2(_var, _s)
			_y := __tmp733
			__tmp737 := _array_init_elem_2(_x, _y)
			__tmp590 = __tmp737
		} else if __tmp591 == 0x14 {
			__tmp740 := _ref_test_1(struct {
				F0 ONull
				F1 OHeapType
			}{_NoNull, _heap_type_1(_s)})
			__tmp590 = __tmp740
		} else if __tmp591 == 0x15 {
			__tmp745 := _ref_test_1(struct {
				F0 ONull
				F1 OHeapType
			}{_Null, _heap_type_1(_s)})
			__tmp590 = __tmp745
		} else if __tmp591 == 0x16 {
			__tmp750 := _ref_cast_1(struct {
				F0 ONull
				F1 OHeapType
			}{_NoNull, _heap_type_1(_s)})
			__tmp590 = __tmp750
		} else if __tmp591 == 0x17 {
			__tmp755 := _ref_cast_1(struct {
				F0 ONull
				F1 OHeapType
			}{_Null, _heap_type_1(_s)})
			__tmp590 = __tmp755
		} else if __tmp591 == 0x18 || __tmp591 == 0x19 {
			_opcode := __tmp591
			__tmp761 := _byte_1(_s)
			_flags := __tmp761
			__tmp764 := _require_4(_operatorEq_2(_int_operatorland_2(_flags, 0xfc), 0), _s, _int_operatorPlus_2(_pos, 2), "malformed br_on_cast flags")
			_ = __tmp764
			__tmp771 := _at_2(_var, _s)
			_x := __tmp771
			__tmp775 := struct {
				F0 ONull
				F1 OHeapType
			}{func() ONull {
				var __tmp776 ONull
				if _bit_2(0, _flags) {
					__tmp779 := _Null
					__tmp776 = __tmp779
				} else {
					__tmp780 := _NoNull
					__tmp776 = __tmp780
				}
				return __tmp776
			}(), _heap_type_1(_s)}
			_rt1 := __tmp775
			__tmp784 := struct {
				F0 ONull
				F1 OHeapType
			}{func() ONull {
				var __tmp785 ONull
				if _bit_2(1, _flags) {
					__tmp788 := _Null
					__tmp785 = __tmp788
				} else {
					__tmp789 := _NoNull
					__tmp785 = __tmp789
				}
				return __tmp785
			}(), _heap_type_1(_s)}
			_rt2 := __tmp784
			__tmp793 := __if_opcode___0x18l_then_br_on_cast_else_br_on_cast_fail__3(_x, _rt1, _rt2)

			__tmp590 = __tmp793
		} else if __tmp591 == 0x1a {
			__tmp797 := _any_convert_extern
			__tmp590 = __tmp797
		} else if __tmp591 == 0x1b {
			__tmp798 := _extern_convert_any
			__tmp590 = __tmp798
		} else if __tmp591 == 0x1c {
			__tmp799 := _ref_i31
			__tmp590 = __tmp799
		} else if __tmp591 == 0x1d {
			__tmp800 := _i31_get_s
			__tmp590 = __tmp800
		} else if __tmp591 == 0x1e {
			__tmp801 := _i31_get_u
			__tmp590 = __tmp801
		} else if _n := __tmp591; true {
			_ = _n
			__tmp804 := _illegal2_4(_s, _pos, _b, _n)
			__tmp590 = __tmp804
		}
		__tmp4 = __tmp590
	} else if __tmp5 == 0xfc {
		_b := __tmp5
		var __tmp810 Instruction_
		__tmp811 := _u32_1(_s)
		if __tmp811 == 0x00 {
			__tmp814 := _i32_trunc_sat_f32_s
			__tmp810 = __tmp814
		} else if __tmp811 == 0x01 {
			__tmp815 := _i32_trunc_sat_f32_u
			__tmp810 = __tmp815
		} else if __tmp811 == 0x02 {
			__tmp816 := _i32_trunc_sat_f64_s
			__tmp810 = __tmp816
		} else if __tmp811 == 0x03 {
			__tmp817 := _i32_trunc_sat_f64_u
			__tmp810 = __tmp817
		} else if __tmp811 == 0x04 {
			__tmp818 := _i64_trunc_sat_f32_s
			__tmp810 = __tmp818
		} else if __tmp811 == 0x05 {
			__tmp819 := _i64_trunc_sat_f32_u
			__tmp810 = __tmp819
		} else if __tmp811 == 0x06 {
			__tmp820 := _i64_trunc_sat_f64_s
			__tmp810 = __tmp820
		} else if __tmp811 == 0x07 {
			__tmp821 := _i64_trunc_sat_f64_u
			__tmp810 = __tmp821
		} else if __tmp811 == 0x08 {
			__tmp822 := _at_2(_var, _s)
			_y := __tmp822
			__tmp826 := _at_2(_var, _s)
			_x := __tmp826
			__tmp830 := _memory_init_2(_x, _y)
			__tmp810 = __tmp830
		} else if __tmp811 == 0x09 {
			__tmp833 := _data_drop_1(_at_2(_var, _s))
			__tmp810 = __tmp833
		} else if __tmp811 == 0x0a {
			__tmp837 := _at_2(_var, _s)
			_x := __tmp837
			__tmp841 := _at_2(_var, _s)
			_y := __tmp841
			__tmp845 := _memory_copy_2(_x, _y)
			__tmp810 = __tmp845
		} else if __tmp811 == 0x0b {
			__tmp848 := _memory_fill_1(_at_2(_var, _s))
			__tmp810 = __tmp848
		} else if __tmp811 == 0x0c {
			__tmp852 := _at_2(_var, _s)
			_y := __tmp852
			__tmp856 := _at_2(_var, _s)
			_x := __tmp856
			__tmp860 := _table_init_2(_x, _y)
			__tmp810 = __tmp860
		} else if __tmp811 == 0x0d {
			__tmp863 := _elem_drop_1(_at_2(_var, _s))
			__tmp810 = __tmp863
		} else if __tmp811 == 0x0e {
			__tmp867 := _at_2(_var, _s)
			_x := __tmp867
			__tmp871 := _at_2(_var, _s)
			_y := __tmp871
			__tmp875 := _table_copy_2(_x, _y)
			__tmp810 = __tmp875
		} else if __tmp811 == 0x0f {
			__tmp878 := _table_grow_1(_at_2(_var, _s))
			__tmp810 = __tmp878
		} else if __tmp811 == 0x10 {
			__tmp882 := _table_size_1(_at_2(_var, _s))
			__tmp810 = __tmp882
		} else if __tmp811 == 0x11 {
			__tmp886 := _table_fill_1(_at_2(_var, _s))
			__tmp810 = __tmp886
		} else if _n := __tmp811; true {
			_ = _n
			__tmp892 := _illegal2_4(_s, _pos, _b, _n)
			__tmp810 = __tmp892
		}
		__tmp4 = __tmp810
	} else if __tmp5 == 0xfd {
		var __tmp897 Instruction_
		__tmp898 := _u32_1(_s)
		if __tmp898 == 0x00 {
			__tmp901 := _memop_1(_s)
			_x, _a, _o := __tmp901
			__tmp906 := _v128_load_3(_x, _a, _o)
			__tmp897 = __tmp906
		} else if __tmp898 == 0x01 {
			__tmp910 := _memop_1(_s)
			_x, _a, _o := __tmp910
			__tmp915 := _v128_load8x8_s_3(_x, _a, _o)
			__tmp897 = __tmp915
		} else if __tmp898 == 0x02 {
			__tmp919 := _memop_1(_s)
			_x, _a, _o := __tmp919
			__tmp924 := _v128_load8x8_u_3(_x, _a, _o)
			__tmp897 = __tmp924
		} else if __tmp898 == 0x03 {
			__tmp928 := _memop_1(_s)
			_x, _a, _o := __tmp928
			__tmp933 := _v128_load16x4_s_3(_x, _a, _o)
			__tmp897 = __tmp933
		} else if __tmp898 == 0x04 {
			__tmp937 := _memop_1(_s)
			_x, _a, _o := __tmp937
			__tmp942 := _v128_load16x4_u_3(_x, _a, _o)
			__tmp897 = __tmp942
		} else if __tmp898 == 0x05 {
			__tmp946 := _memop_1(_s)
			_x, _a, _o := __tmp946
			__tmp951 := _v128_load32x2_s_3(_x, _a, _o)
			__tmp897 = __tmp951
		} else if __tmp898 == 0x06 {
			__tmp955 := _memop_1(_s)
			_x, _a, _o := __tmp955
			__tmp960 := _v128_load32x2_u_3(_x, _a, _o)
			__tmp897 = __tmp960
		} else if __tmp898 == 0x07 {
			__tmp964 := _memop_1(_s)
			_x, _a, _o := __tmp964
			__tmp969 := _v128_load8_splat_3(_x, _a, _o)
			__tmp897 = __tmp969
		} else if __tmp898 == 0x08 {
			__tmp973 := _memop_1(_s)
			_x, _a, _o := __tmp973
			__tmp978 := _v128_load16_splat_3(_x, _a, _o)
			__tmp897 = __tmp978
		} else if __tmp898 == 0x09 {
			__tmp982 := _memop_1(_s)
			_x, _a, _o := __tmp982
			__tmp987 := _v128_load32_splat_3(_x, _a, _o)
			__tmp897 = __tmp987
		} else if __tmp898 == 0x0a {
			__tmp991 := _memop_1(_s)
			_x, _a, _o := __tmp991
			__tmp996 := _v128_load64_splat_3(_x, _a, _o)
			__tmp897 = __tmp996
		} else if __tmp898 == 0x0b {
			__tmp1000 := _memop_1(_s)
			_x, _a, _o := __tmp1000
			__tmp1005 := _v128_store_3(_x, _a, _o)
			__tmp897 = __tmp1005
		} else if __tmp898 == 0x0c {
			__tmp1009 := _v128_const_1(_at_2(_v128, _s))
			__tmp897 = __tmp1009
		} else if __tmp898 == 0x0d {
			__tmp1013 := _i8x16_shuffle_1(_List_init_2(16, func(__ OInt) OInt {
				__tmp1015 := _byte_1(_s)
				return __tmp1015
			}))
			__tmp897 = __tmp1013
		} else if __tmp898 == 0x0e {
			__tmp1017 := _i8x16_swizzle
			__tmp897 = __tmp1017
		} else if __tmp898 == 0x0f {
			__tmp1018 := _i8x16_splat
			__tmp897 = __tmp1018
		} else if __tmp898 == 0x10 {
			__tmp1019 := _i16x8_splat
			__tmp897 = __tmp1019
		} else if __tmp898 == 0x11 {
			__tmp1020 := _i32x4_splat
			__tmp897 = __tmp1020
		} else if __tmp898 == 0x12 {
			__tmp1021 := _i64x2_splat
			__tmp897 = __tmp1021
		} else if __tmp898 == 0x13 {
			__tmp1022 := _f32x4_splat
			__tmp897 = __tmp1022
		} else if __tmp898 == 0x14 {
			__tmp1023 := _f64x2_splat
			__tmp897 = __tmp1023
		} else if __tmp898 == 0x15 {
			__tmp1024 := _byte_1(_s)
			_i := __tmp1024
			__tmp1027 := _i8x16_extract_lane_s_1(_i)
			__tmp897 = __tmp1027
		} else if __tmp898 == 0x16 {
			__tmp1029 := _byte_1(_s)
			_i := __tmp1029
			__tmp1032 := _i8x16_extract_lane_u_1(_i)
			__tmp897 = __tmp1032
		} else if __tmp898 == 0x17 {
			__tmp1034 := _byte_1(_s)
			_i := __tmp1034
			__tmp1037 := _i8x16_replace_lane_1(_i)
			__tmp897 = __tmp1037
		} else if __tmp898 == 0x18 {
			__tmp1039 := _byte_1(_s)
			_i := __tmp1039
			__tmp1042 := _i16x8_extract_lane_s_1(_i)
			__tmp897 = __tmp1042
		} else if __tmp898 == 0x19 {
			__tmp1044 := _byte_1(_s)
			_i := __tmp1044
			__tmp1047 := _i16x8_extract_lane_u_1(_i)
			__tmp897 = __tmp1047
		} else if __tmp898 == 0x1a {
			__tmp1049 := _byte_1(_s)
			_i := __tmp1049
			__tmp1052 := _i16x8_replace_lane_1(_i)
			__tmp897 = __tmp1052
		} else if __tmp898 == 0x1b {
			__tmp1054 := _byte_1(_s)
			_i := __tmp1054
			__tmp1057 := _i32x4_extract_lane_1(_i)
			__tmp897 = __tmp1057
		} else if __tmp898 == 0x1c {
			__tmp1059 := _byte_1(_s)
			_i := __tmp1059
			__tmp1062 := _i32x4_replace_lane_1(_i)
			__tmp897 = __tmp1062
		} else if __tmp898 == 0x1d {
			__tmp1064 := _byte_1(_s)
			_i := __tmp1064
			__tmp1067 := _i64x2_extract_lane_1(_i)
			__tmp897 = __tmp1067
		} else if __tmp898 == 0x1e {
			__tmp1069 := _byte_1(_s)
			_i := __tmp1069
			__tmp1072 := _i64x2_replace_lane_1(_i)
			__tmp897 = __tmp1072
		} else if __tmp898 == 0x1f {
			__tmp1074 := _byte_1(_s)
			_i := __tmp1074
			__tmp1077 := _f32x4_extract_lane_1(_i)
			__tmp897 = __tmp1077
		} else if __tmp898 == 0x20 {
			__tmp1079 := _byte_1(_s)
			_i := __tmp1079
			__tmp1082 := _f32x4_replace_lane_1(_i)
			__tmp897 = __tmp1082
		} else if __tmp898 == 0x21 {
			__tmp1084 := _byte_1(_s)
			_i := __tmp1084
			__tmp1087 := _f64x2_extract_lane_1(_i)
			__tmp897 = __tmp1087
		} else if __tmp898 == 0x22 {
			__tmp1089 := _byte_1(_s)
			_i := __tmp1089
			__tmp1092 := _f64x2_replace_lane_1(_i)
			__tmp897 = __tmp1092
		} else if __tmp898 == 0x23 {
			__tmp1094 := _i8x16_eq
			__tmp897 = __tmp1094
		} else if __tmp898 == 0x24 {
			__tmp1095 := _i8x16_ne
			__tmp897 = __tmp1095
		} else if __tmp898 == 0x25 {
			__tmp1096 := _i8x16_lt_s
			__tmp897 = __tmp1096
		} else if __tmp898 == 0x26 {
			__tmp1097 := _i8x16_lt_u
			__tmp897 = __tmp1097
		} else if __tmp898 == 0x27 {
			__tmp1098 := _i8x16_gt_s
			__tmp897 = __tmp1098
		} else if __tmp898 == 0x28 {
			__tmp1099 := _i8x16_gt_u
			__tmp897 = __tmp1099
		} else if __tmp898 == 0x29 {
			__tmp1100 := _i8x16_le_s
			__tmp897 = __tmp1100
		} else if __tmp898 == 0x2a {
			__tmp1101 := _i8x16_le_u
			__tmp897 = __tmp1101
		} else if __tmp898 == 0x2b {
			__tmp1102 := _i8x16_ge_s
			__tmp897 = __tmp1102
		} else if __tmp898 == 0x2c {
			__tmp1103 := _i8x16_ge_u
			__tmp897 = __tmp1103
		} else if __tmp898 == 0x2d {
			__tmp1104 := _i16x8_eq
			__tmp897 = __tmp1104
		} else if __tmp898 == 0x2e {
			__tmp1105 := _i16x8_ne
			__tmp897 = __tmp1105
		} else if __tmp898 == 0x2f {
			__tmp1106 := _i16x8_lt_s
			__tmp897 = __tmp1106
		} else if __tmp898 == 0x30 {
			__tmp1107 := _i16x8_lt_u
			__tmp897 = __tmp1107
		} else if __tmp898 == 0x31 {
			__tmp1108 := _i16x8_gt_s
			__tmp897 = __tmp1108
		} else if __tmp898 == 0x32 {
			__tmp1109 := _i16x8_gt_u
			__tmp897 = __tmp1109
		} else if __tmp898 == 0x33 {
			__tmp1110 := _i16x8_le_s
			__tmp897 = __tmp1110
		} else if __tmp898 == 0x34 {
			__tmp1111 := _i16x8_le_u
			__tmp897 = __tmp1111
		} else if __tmp898 == 0x35 {
			__tmp1112 := _i16x8_ge_s
			__tmp897 = __tmp1112
		} else if __tmp898 == 0x36 {
			__tmp1113 := _i16x8_ge_u
			__tmp897 = __tmp1113
		} else if __tmp898 == 0x37 {
			__tmp1114 := _i32x4_eq
			__tmp897 = __tmp1114
		} else if __tmp898 == 0x38 {
			__tmp1115 := _i32x4_ne
			__tmp897 = __tmp1115
		} else if __tmp898 == 0x39 {
			__tmp1116 := _i32x4_lt_s
			__tmp897 = __tmp1116
		} else if __tmp898 == 0x3a {
			__tmp1117 := _i32x4_lt_u
			__tmp897 = __tmp1117
		} else if __tmp898 == 0x3b {
			__tmp1118 := _i32x4_gt_s
			__tmp897 = __tmp1118
		} else if __tmp898 == 0x3c {
			__tmp1119 := _i32x4_gt_u
			__tmp897 = __tmp1119
		} else if __tmp898 == 0x3d {
			__tmp1120 := _i32x4_le_s
			__tmp897 = __tmp1120
		} else if __tmp898 == 0x3e {
			__tmp1121 := _i32x4_le_u
			__tmp897 = __tmp1121
		} else if __tmp898 == 0x3f {
			__tmp1122 := _i32x4_ge_s
			__tmp897 = __tmp1122
		} else if __tmp898 == 0x40 {
			__tmp1123 := _i32x4_ge_u
			__tmp897 = __tmp1123
		} else if __tmp898 == 0x41 {
			__tmp1124 := _f32x4_eq
			__tmp897 = __tmp1124
		} else if __tmp898 == 0x42 {
			__tmp1125 := _f32x4_ne
			__tmp897 = __tmp1125
		} else if __tmp898 == 0x43 {
			__tmp1126 := _f32x4_lt
			__tmp897 = __tmp1126
		} else if __tmp898 == 0x44 {
			__tmp1127 := _f32x4_gt
			__tmp897 = __tmp1127
		} else if __tmp898 == 0x45 {
			__tmp1128 := _f32x4_le
			__tmp897 = __tmp1128
		} else if __tmp898 == 0x46 {
			__tmp1129 := _f32x4_ge
			__tmp897 = __tmp1129
		} else if __tmp898 == 0x47 {
			__tmp1130 := _f64x2_eq
			__tmp897 = __tmp1130
		} else if __tmp898 == 0x48 {
			__tmp1131 := _f64x2_ne
			__tmp897 = __tmp1131
		} else if __tmp898 == 0x49 {
			__tmp1132 := _f64x2_lt
			__tmp897 = __tmp1132
		} else if __tmp898 == 0x4a {
			__tmp1133 := _f64x2_gt
			__tmp897 = __tmp1133
		} else if __tmp898 == 0x4b {
			__tmp1134 := _f64x2_le
			__tmp897 = __tmp1134
		} else if __tmp898 == 0x4c {
			__tmp1135 := _f64x2_ge
			__tmp897 = __tmp1135
		} else if __tmp898 == 0x4d {
			__tmp1136 := _v128_not
			__tmp897 = __tmp1136
		} else if __tmp898 == 0x4e {
			__tmp1137 := _v128_and
			__tmp897 = __tmp1137
		} else if __tmp898 == 0x4f {
			__tmp1138 := _v128_andnot
			__tmp897 = __tmp1138
		} else if __tmp898 == 0x50 {
			__tmp1139 := _v128_or
			__tmp897 = __tmp1139
		} else if __tmp898 == 0x51 {
			__tmp1140 := _v128_xor
			__tmp897 = __tmp1140
		} else if __tmp898 == 0x52 {
			__tmp1141 := _v128_bitselect
			__tmp897 = __tmp1141
		} else if __tmp898 == 0x53 {
			__tmp1142 := _v128_any_true
			__tmp897 = __tmp1142
		} else if __tmp898 == 0x54 {
			__tmp1143 := _memop_1(_s)
			_x, _a, _o := __tmp1143
			__tmp1148 := _byte_1(_s)
			_lane := __tmp1148
			__tmp1151 := _v128_load8_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1151
		} else if __tmp898 == 0x55 {
			__tmp1156 := _memop_1(_s)
			_x, _a, _o := __tmp1156
			__tmp1161 := _byte_1(_s)
			_lane := __tmp1161
			__tmp1164 := _v128_load16_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1164
		} else if __tmp898 == 0x56 {
			__tmp1169 := _memop_1(_s)
			_x, _a, _o := __tmp1169
			__tmp1174 := _byte_1(_s)
			_lane := __tmp1174
			__tmp1177 := _v128_load32_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1177
		} else if __tmp898 == 0x57 {
			__tmp1182 := _memop_1(_s)
			_x, _a, _o := __tmp1182
			__tmp1187 := _byte_1(_s)
			_lane := __tmp1187
			__tmp1190 := _v128_load64_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1190
		} else if __tmp898 == 0x58 {
			__tmp1195 := _memop_1(_s)
			_x, _a, _o := __tmp1195
			__tmp1200 := _byte_1(_s)
			_lane := __tmp1200
			__tmp1203 := _v128_store8_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1203
		} else if __tmp898 == 0x59 {
			__tmp1208 := _memop_1(_s)
			_x, _a, _o := __tmp1208
			__tmp1213 := _byte_1(_s)
			_lane := __tmp1213
			__tmp1216 := _v128_store16_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1216
		} else if __tmp898 == 0x5a {
			__tmp1221 := _memop_1(_s)
			_x, _a, _o := __tmp1221
			__tmp1226 := _byte_1(_s)
			_lane := __tmp1226
			__tmp1229 := _v128_store32_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1229
		} else if __tmp898 == 0x5b {
			__tmp1234 := _memop_1(_s)
			_x, _a, _o := __tmp1234
			__tmp1239 := _byte_1(_s)
			_lane := __tmp1239
			__tmp1242 := _v128_store64_lane_4(_x, _a, _o, _lane)
			__tmp897 = __tmp1242
		} else if __tmp898 == 0x5c {
			__tmp1247 := _memop_1(_s)
			_x, _a, _o := __tmp1247
			__tmp1252 := _v128_load32_zero_3(_x, _a, _o)
			__tmp897 = __tmp1252
		} else if __tmp898 == 0x5d {
			__tmp1256 := _memop_1(_s)
			_x, _a, _o := __tmp1256
			__tmp1261 := _v128_load64_zero_3(_x, _a, _o)
			__tmp897 = __tmp1261
		} else if __tmp898 == 0x5e {
			__tmp1265 := _f32x4_demote_f64x2_zero
			__tmp897 = __tmp1265
		} else if __tmp898 == 0x5f {
			__tmp1266 := _f64x2_promote_low_f32x4
			__tmp897 = __tmp1266
		} else if __tmp898 == 0x60 {
			__tmp1267 := _i8x16_abs
			__tmp897 = __tmp1267
		} else if __tmp898 == 0x61 {
			__tmp1268 := _i8x16_neg
			__tmp897 = __tmp1268
		} else if __tmp898 == 0x62 {
			__tmp1269 := _i8x16_popcnt
			__tmp897 = __tmp1269
		} else if __tmp898 == 0x63 {
			__tmp1270 := _i8x16_all_true
			__tmp897 = __tmp1270
		} else if __tmp898 == 0x64 {
			__tmp1271 := _i8x16_bitmask
			__tmp897 = __tmp1271
		} else if __tmp898 == 0x65 {
			__tmp1272 := _i8x16_narrow_i16x8_s
			__tmp897 = __tmp1272
		} else if __tmp898 == 0x66 {
			__tmp1273 := _i8x16_narrow_i16x8_u
			__tmp897 = __tmp1273
		} else if __tmp898 == 0x67 {
			__tmp1274 := _f32x4_ceil
			__tmp897 = __tmp1274
		} else if __tmp898 == 0x68 {
			__tmp1275 := _f32x4_floor
			__tmp897 = __tmp1275
		} else if __tmp898 == 0x69 {
			__tmp1276 := _f32x4_trunc
			__tmp897 = __tmp1276
		} else if __tmp898 == 0x6a {
			__tmp1277 := _f32x4_nearest
			__tmp897 = __tmp1277
		} else if __tmp898 == 0x6b {
			__tmp1278 := _i8x16_shl
			__tmp897 = __tmp1278
		} else if __tmp898 == 0x6c {
			__tmp1279 := _i8x16_shr_s
			__tmp897 = __tmp1279
		} else if __tmp898 == 0x6d {
			__tmp1280 := _i8x16_shr_u
			__tmp897 = __tmp1280
		} else if __tmp898 == 0x6e {
			__tmp1281 := _i8x16_add
			__tmp897 = __tmp1281
		} else if __tmp898 == 0x6f {
			__tmp1282 := _i8x16_add_sat_s
			__tmp897 = __tmp1282
		} else if __tmp898 == 0x70 {
			__tmp1283 := _i8x16_add_sat_u
			__tmp897 = __tmp1283
		} else if __tmp898 == 0x71 {
			__tmp1284 := _i8x16_sub
			__tmp897 = __tmp1284
		} else if __tmp898 == 0x72 {
			__tmp1285 := _i8x16_sub_sat_s
			__tmp897 = __tmp1285
		} else if __tmp898 == 0x73 {
			__tmp1286 := _i8x16_sub_sat_u
			__tmp897 = __tmp1286
		} else if __tmp898 == 0x74 {
			__tmp1287 := _f64x2_ceil
			__tmp897 = __tmp1287
		} else if __tmp898 == 0x75 {
			__tmp1288 := _f64x2_floor
			__tmp897 = __tmp1288
		} else if __tmp898 == 0x76 {
			__tmp1289 := _i8x16_min_s
			__tmp897 = __tmp1289
		} else if __tmp898 == 0x77 {
			__tmp1290 := _i8x16_min_u
			__tmp897 = __tmp1290
		} else if __tmp898 == 0x78 {
			__tmp1291 := _i8x16_max_s
			__tmp897 = __tmp1291
		} else if __tmp898 == 0x79 {
			__tmp1292 := _i8x16_max_u
			__tmp897 = __tmp1292
		} else if __tmp898 == 0x7a {
			__tmp1293 := _f64x2_trunc
			__tmp897 = __tmp1293
		} else if __tmp898 == 0x7b {
			__tmp1294 := _i8x16_avgr_u
			__tmp897 = __tmp1294
		} else if __tmp898 == 0x7c {
			__tmp1295 := _i16x8_extadd_pairwise_i8x16_s
			__tmp897 = __tmp1295
		} else if __tmp898 == 0x7d {
			__tmp1296 := _i16x8_extadd_pairwise_i8x16_u
			__tmp897 = __tmp1296
		} else if __tmp898 == 0x7e {
			__tmp1297 := _i32x4_extadd_pairwise_i16x8_s
			__tmp897 = __tmp1297
		} else if __tmp898 == 0x7f {
			__tmp1298 := _i32x4_extadd_pairwise_i16x8_u
			__tmp897 = __tmp1298
		} else if __tmp898 == 0x80 {
			__tmp1299 := _i16x8_abs
			__tmp897 = __tmp1299
		} else if __tmp898 == 0x81 {
			__tmp1300 := _i16x8_neg
			__tmp897 = __tmp1300
		} else if __tmp898 == 0x82 {
			__tmp1301 := _i16x8_q15mulr_sat_s
			__tmp897 = __tmp1301
		} else if __tmp898 == 0x83 {
			__tmp1302 := _i16x8_all_true
			__tmp897 = __tmp1302
		} else if __tmp898 == 0x84 {
			__tmp1303 := _i16x8_bitmask
			__tmp897 = __tmp1303
		} else if __tmp898 == 0x85 {
			__tmp1304 := _i16x8_narrow_i32x4_s
			__tmp897 = __tmp1304
		} else if __tmp898 == 0x86 {
			__tmp1305 := _i16x8_narrow_i32x4_u
			__tmp897 = __tmp1305
		} else if __tmp898 == 0x87 {
			__tmp1306 := _i16x8_extend_low_i8x16_s
			__tmp897 = __tmp1306
		} else if __tmp898 == 0x88 {
			__tmp1307 := _i16x8_extend_high_i8x16_s
			__tmp897 = __tmp1307
		} else if __tmp898 == 0x89 {
			__tmp1308 := _i16x8_extend_low_i8x16_u
			__tmp897 = __tmp1308
		} else if __tmp898 == 0x8a {
			__tmp1309 := _i16x8_extend_high_i8x16_u
			__tmp897 = __tmp1309
		} else if __tmp898 == 0x8b {
			__tmp1310 := _i16x8_shl
			__tmp897 = __tmp1310
		} else if __tmp898 == 0x8c {
			__tmp1311 := _i16x8_shr_s
			__tmp897 = __tmp1311
		} else if __tmp898 == 0x8d {
			__tmp1312 := _i16x8_shr_u
			__tmp897 = __tmp1312
		} else if __tmp898 == 0x8e {
			__tmp1313 := _i16x8_add
			__tmp897 = __tmp1313
		} else if __tmp898 == 0x8f {
			__tmp1314 := _i16x8_add_sat_s
			__tmp897 = __tmp1314
		} else if __tmp898 == 0x90 {
			__tmp1315 := _i16x8_add_sat_u
			__tmp897 = __tmp1315
		} else if __tmp898 == 0x91 {
			__tmp1316 := _i16x8_sub
			__tmp897 = __tmp1316
		} else if __tmp898 == 0x92 {
			__tmp1317 := _i16x8_sub_sat_s
			__tmp897 = __tmp1317
		} else if __tmp898 == 0x93 {
			__tmp1318 := _i16x8_sub_sat_u
			__tmp897 = __tmp1318
		} else if __tmp898 == 0x94 {
			__tmp1319 := _f64x2_nearest
			__tmp897 = __tmp1319
		} else if __tmp898 == 0x95 {
			__tmp1320 := _i16x8_mul
			__tmp897 = __tmp1320
		} else if __tmp898 == 0x96 {
			__tmp1321 := _i16x8_min_s
			__tmp897 = __tmp1321
		} else if __tmp898 == 0x97 {
			__tmp1322 := _i16x8_min_u
			__tmp897 = __tmp1322
		} else if __tmp898 == 0x98 {
			__tmp1323 := _i16x8_max_s
			__tmp897 = __tmp1323
		} else if __tmp898 == 0x99 {
			__tmp1324 := _i16x8_max_u
			__tmp897 = __tmp1324
		} else if __tmp898 == 0x9a {
			_n := __tmp898
			__tmp1326 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1326
		} else if __tmp898 == 0x9b {
			__tmp1331 := _i16x8_avgr_u
			__tmp897 = __tmp1331
		} else if __tmp898 == 0x9c {
			__tmp1332 := _i16x8_extmul_low_i8x16_s
			__tmp897 = __tmp1332
		} else if __tmp898 == 0x9d {
			__tmp1333 := _i16x8_extmul_high_i8x16_s
			__tmp897 = __tmp1333
		} else if __tmp898 == 0x9e {
			__tmp1334 := _i16x8_extmul_low_i8x16_u
			__tmp897 = __tmp1334
		} else if __tmp898 == 0x9f {
			__tmp1335 := _i16x8_extmul_high_i8x16_u
			__tmp897 = __tmp1335
		} else if __tmp898 == 0xa0 {
			__tmp1336 := _i32x4_abs
			__tmp897 = __tmp1336
		} else if __tmp898 == 0xa1 {
			__tmp1337 := _i32x4_neg
			__tmp897 = __tmp1337
		} else if __tmp898 == 0xa2 {
			_n := __tmp898
			__tmp1339 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1339
		} else if __tmp898 == 0xa3 {
			__tmp1344 := _i32x4_all_true
			__tmp897 = __tmp1344
		} else if __tmp898 == 0xa4 {
			__tmp1345 := _i32x4_bitmask
			__tmp897 = __tmp1345
		} else if __tmp898 == 0xa5 || __tmp898 == 0xa6 {
			_n := __tmp898
			__tmp1347 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1347
		} else if __tmp898 == 0xa7 {
			__tmp1352 := _i32x4_extend_low_i16x8_s
			__tmp897 = __tmp1352
		} else if __tmp898 == 0xa8 {
			__tmp1353 := _i32x4_extend_high_i16x8_s
			__tmp897 = __tmp1353
		} else if __tmp898 == 0xa9 {
			__tmp1354 := _i32x4_extend_low_i16x8_u
			__tmp897 = __tmp1354
		} else if __tmp898 == 0xaa {
			__tmp1355 := _i32x4_extend_high_i16x8_u
			__tmp897 = __tmp1355
		} else if __tmp898 == 0xab {
			__tmp1356 := _i32x4_shl
			__tmp897 = __tmp1356
		} else if __tmp898 == 0xac {
			__tmp1357 := _i32x4_shr_s
			__tmp897 = __tmp1357
		} else if __tmp898 == 0xad {
			__tmp1358 := _i32x4_shr_u
			__tmp897 = __tmp1358
		} else if __tmp898 == 0xae {
			__tmp1359 := _i32x4_add
			__tmp897 = __tmp1359
		} else if __tmp898 == 0xaf || __tmp898 == 0xb0 {
			_n := __tmp898
			__tmp1361 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1361
		} else if __tmp898 == 0xb1 {
			__tmp1366 := _i32x4_sub
			__tmp897 = __tmp1366
		} else if __tmp898 == 0xb2 || __tmp898 == 0xb3 || __tmp898 == 0xb4 {
			_n := __tmp898
			__tmp1368 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1368
		} else if __tmp898 == 0xb5 {
			__tmp1373 := _i32x4_mul
			__tmp897 = __tmp1373
		} else if __tmp898 == 0xb6 {
			__tmp1374 := _i32x4_min_s
			__tmp897 = __tmp1374
		} else if __tmp898 == 0xb7 {
			__tmp1375 := _i32x4_min_u
			__tmp897 = __tmp1375
		} else if __tmp898 == 0xb8 {
			__tmp1376 := _i32x4_max_s
			__tmp897 = __tmp1376
		} else if __tmp898 == 0xb9 {
			__tmp1377 := _i32x4_max_u
			__tmp897 = __tmp1377
		} else if __tmp898 == 0xba {
			__tmp1378 := _i32x4_dot_i16x8_s
			__tmp897 = __tmp1378
		} else if __tmp898 == 0xbc {
			__tmp1379 := _i32x4_extmul_low_i16x8_s
			__tmp897 = __tmp1379
		} else if __tmp898 == 0xbd {
			__tmp1380 := _i32x4_extmul_high_i16x8_s
			__tmp897 = __tmp1380
		} else if __tmp898 == 0xbe {
			__tmp1381 := _i32x4_extmul_low_i16x8_u
			__tmp897 = __tmp1381
		} else if __tmp898 == 0xbf {
			__tmp1382 := _i32x4_extmul_high_i16x8_u
			__tmp897 = __tmp1382
		} else if __tmp898 == 0xc0 {
			__tmp1383 := _i64x2_abs
			__tmp897 = __tmp1383
		} else if __tmp898 == 0xc1 {
			__tmp1384 := _i64x2_neg
			__tmp897 = __tmp1384
		} else if __tmp898 == 0xc2 {
			_n := __tmp898
			__tmp1386 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1386
		} else if __tmp898 == 0xc3 {
			__tmp1391 := _i64x2_all_true
			__tmp897 = __tmp1391
		} else if __tmp898 == 0xc4 {
			__tmp1392 := _i64x2_bitmask
			__tmp897 = __tmp1392
		} else if __tmp898 == 0xc5 || __tmp898 == 0xc6 {
			_n := __tmp898
			__tmp1394 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1394
		} else if __tmp898 == 0xc7 {
			__tmp1399 := _i64x2_extend_low_i32x4_s
			__tmp897 = __tmp1399
		} else if __tmp898 == 0xc8 {
			__tmp1400 := _i64x2_extend_high_i32x4_s
			__tmp897 = __tmp1400
		} else if __tmp898 == 0xc9 {
			__tmp1401 := _i64x2_extend_low_i32x4_u
			__tmp897 = __tmp1401
		} else if __tmp898 == 0xca {
			__tmp1402 := _i64x2_extend_high_i32x4_u
			__tmp897 = __tmp1402
		} else if __tmp898 == 0xcb {
			__tmp1403 := _i64x2_shl
			__tmp897 = __tmp1403
		} else if __tmp898 == 0xcc {
			__tmp1404 := _i64x2_shr_s
			__tmp897 = __tmp1404
		} else if __tmp898 == 0xcd {
			__tmp1405 := _i64x2_shr_u
			__tmp897 = __tmp1405
		} else if __tmp898 == 0xce {
			__tmp1406 := _i64x2_add
			__tmp897 = __tmp1406
		} else if __tmp898 == 0xcf || __tmp898 == 0xd0 {
			_n := __tmp898
			__tmp1408 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1408
		} else if __tmp898 == 0xd1 {
			__tmp1413 := _i64x2_sub
			__tmp897 = __tmp1413
		} else if __tmp898 == 0xd2 || __tmp898 == 0xd3 || __tmp898 == 0xd4 {
			_n := __tmp898
			__tmp1415 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1415
		} else if __tmp898 == 0xd5 {
			__tmp1420 := _i64x2_mul
			__tmp897 = __tmp1420
		} else if __tmp898 == 0xd6 {
			__tmp1421 := _i64x2_eq
			__tmp897 = __tmp1421
		} else if __tmp898 == 0xd7 {
			__tmp1422 := _i64x2_ne
			__tmp897 = __tmp1422
		} else if __tmp898 == 0xd8 {
			__tmp1423 := _i64x2_lt_s
			__tmp897 = __tmp1423
		} else if __tmp898 == 0xd9 {
			__tmp1424 := _i64x2_gt_s
			__tmp897 = __tmp1424
		} else if __tmp898 == 0xda {
			__tmp1425 := _i64x2_le_s
			__tmp897 = __tmp1425
		} else if __tmp898 == 0xdb {
			__tmp1426 := _i64x2_ge_s
			__tmp897 = __tmp1426
		} else if __tmp898 == 0xdc {
			__tmp1427 := _i64x2_extmul_low_i32x4_s
			__tmp897 = __tmp1427
		} else if __tmp898 == 0xdd {
			__tmp1428 := _i64x2_extmul_high_i32x4_s
			__tmp897 = __tmp1428
		} else if __tmp898 == 0xde {
			__tmp1429 := _i64x2_extmul_low_i32x4_u
			__tmp897 = __tmp1429
		} else if __tmp898 == 0xdf {
			__tmp1430 := _i64x2_extmul_high_i32x4_u
			__tmp897 = __tmp1430
		} else if __tmp898 == 0xe0 {
			__tmp1431 := _f32x4_abs
			__tmp897 = __tmp1431
		} else if __tmp898 == 0xe1 {
			__tmp1432 := _f32x4_neg
			__tmp897 = __tmp1432
		} else if __tmp898 == 0xe2 {
			_n := __tmp898
			__tmp1434 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1434
		} else if __tmp898 == 0xe3 {
			__tmp1439 := _f32x4_sqrt
			__tmp897 = __tmp1439
		} else if __tmp898 == 0xe4 {
			__tmp1440 := _f32x4_add
			__tmp897 = __tmp1440
		} else if __tmp898 == 0xe5 {
			__tmp1441 := _f32x4_sub
			__tmp897 = __tmp1441
		} else if __tmp898 == 0xe6 {
			__tmp1442 := _f32x4_mul
			__tmp897 = __tmp1442
		} else if __tmp898 == 0xe7 {
			__tmp1443 := _f32x4_div
			__tmp897 = __tmp1443
		} else if __tmp898 == 0xe8 {
			__tmp1444 := _f32x4_min
			__tmp897 = __tmp1444
		} else if __tmp898 == 0xe9 {
			__tmp1445 := _f32x4_max
			__tmp897 = __tmp1445
		} else if __tmp898 == 0xea {
			__tmp1446 := _f32x4_pmin
			__tmp897 = __tmp1446
		} else if __tmp898 == 0xeb {
			__tmp1447 := _f32x4_pmax
			__tmp897 = __tmp1447
		} else if __tmp898 == 0xec {
			__tmp1448 := _f64x2_abs
			__tmp897 = __tmp1448
		} else if __tmp898 == 0xed {
			__tmp1449 := _f64x2_neg
			__tmp897 = __tmp1449
		} else if __tmp898 == 0xef {
			__tmp1450 := _f64x2_sqrt
			__tmp897 = __tmp1450
		} else if __tmp898 == 0xf0 {
			__tmp1451 := _f64x2_add
			__tmp897 = __tmp1451
		} else if __tmp898 == 0xf1 {
			__tmp1452 := _f64x2_sub
			__tmp897 = __tmp1452
		} else if __tmp898 == 0xf2 {
			__tmp1453 := _f64x2_mul
			__tmp897 = __tmp1453
		} else if __tmp898 == 0xf3 {
			__tmp1454 := _f64x2_div
			__tmp897 = __tmp1454
		} else if __tmp898 == 0xf4 {
			__tmp1455 := _f64x2_min
			__tmp897 = __tmp1455
		} else if __tmp898 == 0xf5 {
			__tmp1456 := _f64x2_max
			__tmp897 = __tmp1456
		} else if __tmp898 == 0xf6 {
			__tmp1457 := _f64x2_pmin
			__tmp897 = __tmp1457
		} else if __tmp898 == 0xf7 {
			__tmp1458 := _f64x2_pmax
			__tmp897 = __tmp1458
		} else if __tmp898 == 0xf8 {
			__tmp1459 := _i32x4_trunc_sat_f32x4_s
			__tmp897 = __tmp1459
		} else if __tmp898 == 0xf9 {
			__tmp1460 := _i32x4_trunc_sat_f32x4_u
			__tmp897 = __tmp1460
		} else if __tmp898 == 0xfa {
			__tmp1461 := _f32x4_convert_i32x4_s
			__tmp897 = __tmp1461
		} else if __tmp898 == 0xfb {
			__tmp1462 := _f32x4_convert_i32x4_u
			__tmp897 = __tmp1462
		} else if __tmp898 == 0xfc {
			__tmp1463 := _i32x4_trunc_sat_f64x2_s_zero
			__tmp897 = __tmp1463
		} else if __tmp898 == 0xfd {
			__tmp1464 := _i32x4_trunc_sat_f64x2_u_zero
			__tmp897 = __tmp1464
		} else if __tmp898 == 0xfe {
			__tmp1465 := _f64x2_convert_low_i32x4_s
			__tmp897 = __tmp1465
		} else if __tmp898 == 0xff {
			__tmp1466 := _f64x2_convert_low_i32x4_u
			__tmp897 = __tmp1466
		} else if __tmp898 == 0x100 {
			__tmp1467 := _i8x16_relaxed_swizzle
			__tmp897 = __tmp1467
		} else if __tmp898 == 0x101 {
			__tmp1468 := _i32x4_relaxed_trunc_f32x4_s
			__tmp897 = __tmp1468
		} else if __tmp898 == 0x102 {
			__tmp1469 := _i32x4_relaxed_trunc_f32x4_u
			__tmp897 = __tmp1469
		} else if __tmp898 == 0x103 {
			__tmp1470 := _i32x4_relaxed_trunc_f64x2_s_zero
			__tmp897 = __tmp1470
		} else if __tmp898 == 0x104 {
			__tmp1471 := _i32x4_relaxed_trunc_f64x2_u_zero
			__tmp897 = __tmp1471
		} else if __tmp898 == 0x105 {
			__tmp1472 := _f32x4_relaxed_madd
			__tmp897 = __tmp1472
		} else if __tmp898 == 0x106 {
			__tmp1473 := _f32x4_relaxed_nmadd
			__tmp897 = __tmp1473
		} else if __tmp898 == 0x107 {
			__tmp1474 := _f64x2_relaxed_madd
			__tmp897 = __tmp1474
		} else if __tmp898 == 0x108 {
			__tmp1475 := _f64x2_relaxed_nmadd
			__tmp897 = __tmp1475
		} else if __tmp898 == 0x109 {
			__tmp1476 := _i8x16_relaxed_laneselect
			__tmp897 = __tmp1476
		} else if __tmp898 == 0x10a {
			__tmp1477 := _i16x8_relaxed_laneselect
			__tmp897 = __tmp1477
		} else if __tmp898 == 0x10b {
			__tmp1478 := _i32x4_relaxed_laneselect
			__tmp897 = __tmp1478
		} else if __tmp898 == 0x10c {
			__tmp1479 := _i64x2_relaxed_laneselect
			__tmp897 = __tmp1479
		} else if __tmp898 == 0x10d {
			__tmp1480 := _f32x4_relaxed_min
			__tmp897 = __tmp1480
		} else if __tmp898 == 0x10e {
			__tmp1481 := _f32x4_relaxed_max
			__tmp897 = __tmp1481
		} else if __tmp898 == 0x10f {
			__tmp1482 := _f64x2_relaxed_min
			__tmp897 = __tmp1482
		} else if __tmp898 == 0x110 {
			__tmp1483 := _f64x2_relaxed_max
			__tmp897 = __tmp1483
		} else if __tmp898 == 0x111 {
			__tmp1484 := _i16x8_relaxed_q15mulr_s
			__tmp897 = __tmp1484
		} else if __tmp898 == 0x112 {
			__tmp1485 := _i16x8_relaxed_dot_i8x16_i7x16_s
			__tmp897 = __tmp1485
		} else if __tmp898 == 0x113 {
			__tmp1486 := _i32x4_relaxed_dot_i8x16_i7x16_add_s
			__tmp897 = __tmp1486
		} else if _n := __tmp898; true {
			_ = _n
			__tmp1489 := _illegal_3(_s, _pos, _I32_to_int_u_1(_n))
			__tmp897 = __tmp1489
		}
		__tmp4 = __tmp897
	} else if _b := __tmp5; true {
		_ = _b
		__tmp1496 := _illegal_3(_s, _pos, _b)
		__tmp4 = __tmp1496
	}
	return __tmp4
}

var _instr = _instr_1
